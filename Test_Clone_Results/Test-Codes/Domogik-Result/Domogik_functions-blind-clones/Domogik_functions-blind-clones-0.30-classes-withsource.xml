<clones>
<systeminfo processor="nicad6" system="Domogik" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="62" npairs="3"/>
<runinfo ncompares="220" cputime="16154"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="17" similarity="76">
<source file="systems/Domogik/tests/common/testdevice.py" startline="70" endline="89" pcid="34">
    def get_params(self, client_id, device_type):
        """CALL GET /device/params/<device_Type>
        """
        print(u"{0} : Getting device_type params {1}".format(datetime.now(), device_type))
        cli = MQSyncReq(zmq.Context())
        msg = MQMessage()
        msg.set_action('device.params')
        msg.add_data('device_type', device_type)
        msg.add_data('client_id', client_id)
        response = cli.request('admin', msg.get(), timeout=15)
        if response is not None:
            response = response.get_data()
            if 'result' in response :
                print(u"{0} : The params are: {1}".format(datetime.now(), response['result']))
                return response['result']
            else :
                raise RuntimeError("Error when getting devices param for {0} : {1}".format(client_id, response))
        else :
            raise RuntimeError("Error when getting devices param for {0}".format(client_id))

</source>
<source file="systems/Domogik/tests/common/testdevice.py" startline="90" endline="110" pcid="35">
    def create_device(self, params):
        """ Call POST /device/... to create the device
            @param params : The filled params
            @return : the device id for the device created
        """
        print(u"{0} : Create a test device <{1}> with {2} device type".format(datetime.now(), params['name'], params['device_type']))
        cli = MQSyncReq(zmq.Context())
        msg = MQMessage()
        msg.set_action('device.create')
        msg.set_data({'data': params})
        response = cli.request('admin', msg.get(), timeout=20)
        if response is not None:
            response = response.get_data()
            if 'result' in response :
                print(u"{0} : The new device is: {1}".format(datetime.now(), response['result']))
                return response['result']
            else :
                raise RuntimeError("Error when creating the device : {0} : {1}".format(params, response))
        else :
            raise RuntimeError("Error when creating the device : {0}".format(params))

</source>
</class>

<class classid="2" nclones="2" nlines="20" similarity="76">
<source file="systems/Domogik/tests/common/helpers.py" startline="92" endline="111" pcid="40">
def delete_configuration(type, name, host):
    cli = MQSyncReq(zmq.Context())
    msg = MQMessage()
    msg.set_action('config.delete')
    msg.add_data('type', type)
    msg.add_data('host', host)
    msg.add_data('name', name)
    result = cli.request('admin', msg.get(), timeout=20)
    if result:
        data = result.get_data()
        if 'status' in data:
            if not data['status']:
                raise RuntimeError("DbMgr did not return status true on a config.delete for {0}-{1}.{2}: {3}".format(type, name, host), result.get())
            else:
                return True
        else:
            raise RuntimeError("DbMgr did bad return status on a config.delete for {0}-{1}.{2}: {3}".format(type, name, host), result.get())
    else:
        raise RuntimeError("Timeout while deleting configuration for {0}-{1}.{2}".format(type, name, host))

</source>
<source file="systems/Domogik/tests/common/helpers.py" startline="112" endline="133" pcid="41">
def configure(type, name, host, key, value):
    cli = MQSyncReq(zmq.Context())
    msg = MQMessage()
    msg.set_action('config.set')
    msg.add_data('type', type)
    msg.add_data('host', host)
    msg.add_data('name', name)
    msg.add_data('data', {key : value})
    result = cli.request('admin', msg.get(), timeout=15)
    if result:
        data = result.get_data()
        if 'status' in data:
            if not data['status']:
                print(result.get())
                raise RuntimeError("DbMgr did not return status true on a config.set for {0}-{1}.{2} : {3} = {4}".format(type, name, host, key, value))
            else:
                return True
        else:
            raise RuntimeError("DbMgr did bad return status on a config.set for {0}-{1}.{2}: {3}".format(type, name, host), result.get())
    else:
        raise RuntimeError("Error while setting configuration for {0}-{1}.{2} : {3} = {4}".format(type, name, host, key, value))

</source>
</class>

<class classid="3" nclones="2" nlines="12" similarity="100">
<source file="systems/Domogik/tests/external_xpl_clients/rfxcom_lan.py" startline="58" endline="74" pcid="60">
    def send_xpl(self, message = None, schema = None, data = {}):
        """ Send xPL message on network
        """
        if message != None:
            self.log.debug(u"send_xpl : send full message : {0}".format(message))
            self.myxpl.send(message)

        else:
            self.log.debug(u"send_xpl : Send xPL message xpl-trig : schema:{0}, data:{1}".format(schema, data))
            msg = XplMessage()
            msg.set_type("xpl-trig")
            msg.set_schema(schema)
            for key in data:
                msg.add_data({key : data[key]})
            self.myxpl.send(msg)


</source>
<source file="systems/Domogik/tests/external_xpl_clients/xpl_client.py" startline="58" endline="74" pcid="62">
    def send_xpl(self, message = None, schema = None, data = {}):
        """ Send xPL message on network
        """
        if message != None:
            self.log.debug(u"send_xpl : send full message : {0}".format(message))
            self.myxpl.send(message)

        else:
            self.log.debug(u"send_xpl : Send xPL message xpl-trig : schema:{0}, data:{1}".format(schema, data))
            msg = XplMessage()
            msg.set_type("xpl-trig")
            msg.set_schema(schema)
            for key in data:
                msg.add_data({key : data[key]})
            self.myxpl.send(msg)


</source>
</class>

</clones>
