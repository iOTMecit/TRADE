<clones>
<systeminfo processor="nicad6" system="Pywemo" granularity="functions-blind" threshold="30%" minlines="10" maxlines="2500"/>
<cloneinfo npcs="145" npairs="3"/>
<runinfo ncompares="280" cputime="20586"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="17" similarity="70">
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="85" endline="104" pcid="53">
def test_bridge_getdevicestatus(bridge):
    status = bridge.bridge_getdevicestatus(LIGHT_ID)
    expected = b"".join(
        [
            b"<DeviceStatus>",
            b"<IsGroupAction>NO</IsGroupAction>",
            b'<DeviceID available="YES">F0D1B8000001420C</DeviceID>',
            b"<CapabilityID>",
            b"10006,10008,10300,30008,30009,3000A,30301",
            b"</CapabilityID>",
            b"<CapabilityValue>",
            b"0,120:0,45940:19594:50,,,,200:0",
            b"</CapabilityValue>",
            b"<LastEventTimeStamp>0</LastEventTimeStamp>",
            b"</DeviceStatus>",
        ]
    )
    assert et.tostring(status) == expected


</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="39" endline="59" pcid="59">
def test_create_empty_db(sqldb):
    statements = set(
        line for line in sqldb.iterdump() if line.startswith("CREATE TABLE")
    )
    # flake8: noqa: E501 (long lines)
    assert statements == set(
        [
            # https://github.com/pywemo/pywemo/issues/61#issuecomment-748693894
            "CREATE TABLE RULES(RuleID PRIMARY KEY, Name TEXT NOT NULL, Type TEXT NOT NULL, RuleOrder INTEGER, StartDate TEXT, EndDate TEXT, State TEXT, Sync INTEGER);",
            "CREATE TABLE RULEDEVICES(RuleDevicePK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, DeviceID TEXT, GroupID INTEGER, DayID INTEGER, StartTime INTEGER, RuleDuration INTEGER, StartAction REAL, EndAction REAL, SensorDuration INTEGER, Type INTEGER, Value INTEGER, Level INTEGER, ZBCapabilityStart TEXT, ZBCapabilityEnd TEXT, OnModeOffset INTEGER, OffModeOffset INTEGER, CountdownTime INTEGER, EndTime INTEGER);",
            "CREATE TABLE DEVICECOMBINATION(DeviceCombinationPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, SensorID TEXT, SensorGroupID INTEGER, DeviceID TEXT, DeviceGroupID INTEGER);",
            "CREATE TABLE GROUPDEVICES(GroupDevicePK INTEGER PRIMARY KEY AUTOINCREMENT, GroupID INTEGER, DeviceID TEXT);",
            "CREATE TABLE LOCATIONINFO(LocationPk INTEGER PRIMARY KEY AUTOINCREMENT, cityName TEXT, countryName TEXT, latitude TEXT, longitude TEXT, countryCode TEXT, region TEXT);",
            "CREATE TABLE BLOCKEDRULES(Primarykey INTEGER PRIMARY KEY AUTOINCREMENT, ruleId TEXT);",
            "CREATE TABLE RULESNOTIFYMESSAGE(RuleID INTEGER PRIMARY KEY AUTOINCREMENT, NotifyRuleID INTEGER, Message TEXT, Frequency INTEGER);",
            "CREATE TABLE SENSORNOTIFICATION(SensorNotificationPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, NotifyRuleID INTEGER, NotificationMessage TEXT, NotificationDuration INTEGER);",
            "CREATE TABLE TARGETDEVICES(TargetDevicesPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, DeviceID TEXT, DeviceIndex INTEGER);",
        ]
    )


</source>
</class>

<class classid="2" nclones="2" nlines="24" similarity="76">
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="92" endline="127" pcid="62">
def test_add_remove(sqldb):
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)

    # Rules
    assert len(db._rules) == 0
    rule = db.add_rule(
        rules_db.RulesRow(
            RuleID=501,
            Name="Long Press Rule",
            Type=MOCK_RULE_TYPE,
            State=1,
        )
    )
    assert len(db._rules) == 1
    db.remove_rule(rule)
    assert len(db._rules) == 0

    # RuleDevices
    assert len(db._rule_devices) == 0
    device = db.add_rule_devices(
        rules_db.RuleDevicesRow(RuleDevicePK=1, RuleID=501, DeviceID=MOCK_UDN)
    )
    assert len(db._rule_devices) == 1
    db.remove_rule_devices(device)
    assert len(db._rule_devices) == 0

    # TargetDevices
    assert len(db._target_devices) == 0
    target = db.add_target_devices(
        rules_db.TargetDevicesRow(RuleID=501, DeviceID=MOCK_TARGET_UDN)
    )
    assert len(db._target_devices) == 1
    db.remove_target_devices(target)
    assert len(db._target_devices) == 0


</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="128" endline="159" pcid="63">
def test_clear_all(sqldb):
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    rule = db.add_rule(
        rules_db.RulesRow(
            RuleID=501,
            Name="Long Press Rule",
            Type=MOCK_RULE_TYPE,
            State=1,
        )
    )
    assert len(db._rules) == 1

    # RuleDevices
    assert len(db._rule_devices) == 0
    device = db.add_rule_devices(
        rules_db.RuleDevicesRow(RuleDevicePK=1, RuleID=501, DeviceID=MOCK_UDN)
    )
    assert len(db._rule_devices) == 1

    # TargetDevices
    assert len(db._target_devices) == 0
    target = db.add_target_devices(
        rules_db.TargetDevicesRow(RuleID=501, DeviceID=MOCK_TARGET_UDN)
    )
    assert len(db._target_devices) == 1

    db.clear_all()
    assert len(db._rules) == 0
    assert len(db._rule_devices) == 0
    assert len(db._target_devices) == 0


</source>
</class>

<class classid="3" nclones="2" nlines="21" similarity="72">
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="277" endline="307" pcid="72">
def test_rules_db_from_device_404():
    mock_response = create_autospec(urllib3.HTTPResponse, instance=True)
    mock_response.status = 404

    class Device:
        name = MOCK_NAME
        udn = MOCK_UDN
        session = Session("http://localhost/")

        class rules:
            @staticmethod
            def FetchRules():
                return {
                    "ruleDbVersion": "1",
                    "ruleDbPath": "http://localhost/rules.db",
                }

    completed_with_no_exceptions = False
    with patch(
        "urllib3.PoolManager.request", return_value=mock_response
    ) as mock_request:
        with rules_db.rules_db_from_device(Device) as db:
            mock_request.assert_called_once_with(
                method="GET", url="http://localhost/rules.db"
            )
        assert len(db.rules) == 0
        completed_with_no_exceptions = True

    assert completed_with_no_exceptions


</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="324" endline="346" pcid="75">
def test_sqlite_errors_raised():
    mock_response = create_autospec(urllib3.HTTPResponse, instance=True)
    mock_response.status = 404

    class Device:
        name = MOCK_NAME
        udn = MOCK_UDN
        session = Session("http://localhost/")

        class rules:
            @staticmethod
            def FetchRules():
                return {
                    "ruleDbVersion": "1",
                    "ruleDbPath": "http://localhost/rules.db",
                }

    with patch(
        "urllib3.PoolManager.request", return_value=mock_response
    ) as mock_request:
        with pytest.raises(RulesDbQueryError):
            with rules_db.rules_db_from_device(Device) as db:
                raise sqlite3.OperationalError("test")
</source>
</class>

</clones>
