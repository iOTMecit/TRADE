<source file="systems/Home Assistant/tests/scripts/test_init.py" startline="9" endline="15">
def test_config_per_platform(mock_def) -> None :
INDENT
    assert scripts.get_default_config_dir() == "/default"
    assert scripts.extract_config_dir() == "/default"
    assert scripts.extract_config_dir([""]) == "/default"
    assert scripts.extract_config_dir(["-c", "/arg"]) == "/arg"
    assert scripts.extract_config_dir(["--config", "/a"]) == "/a"
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="31" endline="54">
async def test_ordered_list_item_to_percentage() -> None :
INDENT
    assert ordered_list_item_to_percentage(LEGACY_ORDERED_LIST, SPEED_LOW) == 33
    assert ordered_list_item_to_percentage(LEGACY_ORDERED_LIST, SPEED_MEDIUM) == 66
    assert ordered_list_item_to_percentage(LEGACY_ORDERED_LIST, SPEED_HIGH) == 100
    assert ordered_list_item_to_percentage(SMALL_ORDERED_LIST, SPEED_1) == 25
    assert ordered_list_item_to_percentage(SMALL_ORDERED_LIST, SPEED_2) == 50
    assert ordered_list_item_to_percentage(SMALL_ORDERED_LIST, SPEED_3) == 75
    assert ordered_list_item_to_percentage(SMALL_ORDERED_LIST, SPEED_4) == 100
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_1) == 14
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_2) == 28
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_3) == 42
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_4) == 57
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_5) == 71
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_6) == 85
    assert ordered_list_item_to_percentage(LARGE_ORDERED_LIST, SPEED_7) == 100
    with pytest.raises(ValueError) :
    INDENT
        assert ordered_list_item_to_percentage([], SPEED_1)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="55" endline="104">
async def test_percentage_to_ordered_list_item() -> None :
INDENT
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 1) == SPEED_1
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 25) == SPEED_1
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 26) == SPEED_2
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 50) == SPEED_2
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 51) == SPEED_3
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 75) == SPEED_3
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 76) == SPEED_4
    assert percentage_to_ordered_list_item(SMALL_ORDERED_LIST, 100) == SPEED_4
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 17) == SPEED_LOW
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 33) == SPEED_LOW
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 50) == SPEED_MEDIUM
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 66) == SPEED_MEDIUM
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 84) == SPEED_HIGH
    assert percentage_to_ordered_list_item(LEGACY_ORDERED_LIST, 100) == SPEED_HIGH
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 1) == SPEED_1
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 14) == SPEED_1
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 25) == SPEED_2
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 26) == SPEED_2
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 28) == SPEED_2
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 29) == SPEED_3
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 41) == SPEED_3
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 42) == SPEED_3
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 43) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 56) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 50) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 51) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 75) == SPEED_6
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 76) == SPEED_6
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 100) == SPEED_7
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 1) == SPEED_1
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 25) == SPEED_2
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 26) == SPEED_2
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 50) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 51) == SPEED_4
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 75) == SPEED_6
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 76) == SPEED_6
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 100) == SPEED_7
    assert percentage_to_ordered_list_item(LARGE_ORDERED_LIST, 100.1) == SPEED_7
    with pytest.raises(ValueError) :
    INDENT
        assert percentage_to_ordered_list_item([], 100)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="105" endline="114">
async def test_ranged_value_to_percentage_large() -> None :
INDENT
    range = (1, 255)
    assert ranged_value_to_percentage(range, 255) == 100
    assert ranged_value_to_percentage(range, 127) == 49
    assert ranged_value_to_percentage(range, 10) == 3
    assert ranged_value_to_percentage(range, 1) == 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="115" endline="127">
async def test_percentage_to_ranged_value_large() -> None :
INDENT
    range = (1, 255)
    assert percentage_to_ranged_value(range, 100) == 255
    assert percentage_to_ranged_value(range, 50) == 127.5
    assert percentage_to_ranged_value(range, 4) == 10.2
    assert math.ceil(percentage_to_ranged_value(range, 100)) == 255
    assert math.ceil(percentage_to_ranged_value(range, 50)) == 128
    assert math.ceil(percentage_to_ranged_value(range, 4)) == 11
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="128" endline="139">
async def test_ranged_value_to_percentage_small() -> None :
INDENT
    range = (1, 6)
    assert ranged_value_to_percentage(range, 1) == 16
    assert ranged_value_to_percentage(range, 2) == 33
    assert ranged_value_to_percentage(range, 3) == 50
    assert ranged_value_to_percentage(range, 4) == 66
    assert ranged_value_to_percentage(range, 5) == 83
    assert ranged_value_to_percentage(range, 6) == 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="140" endline="151">
async def test_percentage_to_ranged_value_small() -> None :
INDENT
    range = (1, 6)
    assert math.ceil(percentage_to_ranged_value(range, 16)) == 1
    assert math.ceil(percentage_to_ranged_value(range, 33)) == 2
    assert math.ceil(percentage_to_ranged_value(range, 50)) == 3
    assert math.ceil(percentage_to_ranged_value(range, 66)) == 4
    assert math.ceil(percentage_to_ranged_value(range, 83)) == 5
    assert math.ceil(percentage_to_ranged_value(range, 100)) == 6
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="152" endline="161">
async def test_ranged_value_to_percentage_starting_at_one() -> None :
INDENT
    range = (1, 4)
    assert ranged_value_to_percentage(range, 1) == 25
    assert ranged_value_to_percentage(range, 2) == 50
    assert ranged_value_to_percentage(range, 3) == 75
    assert ranged_value_to_percentage(range, 4) == 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="162" endline="172">
async def test_ranged_value_to_percentage_starting_high() -> None :
INDENT
    range = (101, 255)
    assert ranged_value_to_percentage(range, 101) == 0
    assert ranged_value_to_percentage(range, 139) == 25
    assert ranged_value_to_percentage(range, 178) == 50
    assert ranged_value_to_percentage(range, 217) == 75
    assert ranged_value_to_percentage(range, 255) == 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_percentage.py" startline="173" endline="180">
async def test_ranged_value_to_percentage_starting_zero() -> None :
INDENT
    range = (0, 3)
    assert ranged_value_to_percentage(range, 0) == 25
    assert ranged_value_to_percentage(range, 1) == 50
    assert ranged_value_to_percentage(range, 2) == 75
    assert ranged_value_to_percentage(range, 3) == 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="11" endline="19">
def test_match_all() -> None :
INDENT
    assert language.matches(MATCH_ALL, ["fr-Fr", "en-US", "en-GB"]) == [
        "fr-Fr",
        "en-US",
        "en-GB",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="20" endline="27">
def test_region_match() -> None :
INDENT
    assert language.matches("en-GB", ["fr-Fr", "en-US", "en-GB"]) == [
        "en-GB",
        "en-US",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="28" endline="48">
def test_no_match() -> None :
INDENT
    assert (
        language.matches(
            "en-US",
            ["de-DE", "fr-FR", "zh"],
            )
        == [])
    assert (
        language.matches(
            "en",
            ["de-DE", "fr-FR", "zh"],
            )
        == [])
    assert language.matches("en", []) == []
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="49" endline="56">
def test_prefer_us_english() -> None :
INDENT
    assert language.matches("en", ["en-GB", "en-US", "fr-FR"]) == [
        "en-US",
        "en-GB",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="57" endline="68">
def test_country_preferred() -> None :
INDENT
    assert language.matches(
        "en",
        ["fr-Fr", "en-US", "en-GB"],
        country = "GB",
        ) == [
        "en-GB",
        "en-US",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="69" endline="88">
def test_country_preferred_over_family() -> None :
INDENT
    assert (
        language.matches(
            "de",
            ["de", "de-CH", "de-DE"],
            country = "CH",
            ) [0]
        == "de-CH")
    assert (
        language.matches(
            "de",
            ["de", "de-CH", "de-DE"],
            country = "DE",
            ) [0]
        == "de-DE")
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="89" endline="99">
def test_language_as_region() -> None :
INDENT
    assert language.matches(
        "fr",
        ["en-US", "en-GB", "fr-CA", "fr-FR"],
        ) == [
        "fr-FR",
        "fr-CA",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="100" endline="118">
def test_zh_hant() -> None :
INDENT
    assert language.matches(
        "zh-Hant",
        ["en-US", "en-GB", "zh-CN", "zh-HK"],
        ) == [
        "zh-HK",
        "zh-CN",
        ]
    assert language.matches(
        "zh-Hant",
        ["en-US", "en-GB", "zh-CN", "zh-TW"],
        ) == [
        "zh-TW",
        "zh-CN",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="120" endline="148">
def test_zh_with_country(target : str) -> None :
INDENT
    supported = ["en-US", "en-GB", "zh-CN", "zh-HK", "zh-TW"]
    assert (
        language.matches(
            target,
            supported,
            country = "TW",
            ) [0]
        == "zh-TW")
    assert (
        language.matches(
            target,
            supported,
            country = "HK",
            ) [0]
        == "zh-HK")
    assert (
        language.matches(
            target,
            supported,
            country = "CN",
            ) [0]
        == "zh-CN")
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="149" endline="160">
def test_zh_hans() -> None :
INDENT
    assert language.matches(
        "zh-Hans",
        ["en-US", "en-GB", "zh-CN", "zh-HK", "zh-TW"],
        ) == [
        "zh-CN",
        "zh-HK",
        "zh-TW",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="161" endline="172">
def test_zh_no_code() -> None :
INDENT
    assert language.matches(
        "zh",
        ["en-US", "en-GB", "zh-CN", "zh-HK", "zh-TW"],
        ) == [
        "zh-CN",
        "zh-HK",
        "zh-TW",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="173" endline="184">
def test_es_419() -> None :
INDENT
    assert language.matches(
        "es-419",
        ["en-US", "en-GB", "es-CL", "es-US", "es-ES"],
        ) == [
        "es-ES",
        "es-CL",
        "es-US",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="185" endline="195">
def test_sr_latn() -> None :
INDENT
    assert language.matches(
        "sr-Latn",
        ["en-US", "en-GB", "sr-CS", "sr-RS"],
        ) == [
        "sr-CS",
        "sr-RS",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="196" endline="207">
def test_no_nb_same() -> None :
INDENT
    assert language.matches(
        "no",
        ["en-US", "en-GB", "nb"],
        ) == ["nb"]
    assert language.matches(
        "nb",
        ["en-US", "en-GB", "no"],
        ) == ["no"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="208" endline="219">
def test_no_nb_prefer_exact() -> None :
INDENT
    assert language.matches(
        "no",
        ["en-US", "en-GB", "nb", "no"],
        ) == ["no", "nb"]
    assert language.matches(
        "no",
        ["en-US", "en-GB", "no", "nb"],
        ) == ["no", "nb"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="220" endline="231">
def test_no_nb_prefer_exact_regions() -> None :
INDENT
    assert language.matches(
        "no-AA",
        ["en-US", "en-GB", "nb-AA", "no-AA"],
        ) == ["no-AA", "nb-AA"]
    assert language.matches(
        "no-AA",
        ["en-US", "en-GB", "no-AA", "nb-AA"],
        ) == ["no-AA", "nb-AA"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="232" endline="243">
def test_he_iw_same() -> None :
INDENT
    assert language.matches(
        "he",
        ["en-US", "en-GB", "iw"],
        ) == ["iw"]
    assert language.matches(
        "iw",
        ["en-US", "en-GB", "he"],
        ) == ["he"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="244" endline="255">
def test_he_iw_prefer_exact() -> None :
INDENT
    assert language.matches(
        "he",
        ["en-US", "en-GB", "iw", "he"],
        ) == ["he", "iw"]
    assert language.matches(
        "he",
        ["en-US", "en-GB", "he", "iw"],
        ) == ["he", "iw"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_language.py" startline="256" endline="265">
def test_he_iw_prefer_exact_regions() -> None :
INDENT
    assert language.matches(
        "he-IL",
        ["en-US", "en-GB", "iw-IL", "he-IL"],
        ) == ["he-IL", "iw-IL"]
    assert language.matches(
        "he-IL",
        ["en-US", "en-GB", "he-IL", "iw-IL"],
        ) == ["he-IL", "iw-IL"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_variance.py" startline="37" endline="41">
def test_ignore_variance(value_1, value_2, variance, expected) -> None :
INDENT
    with_ignore = ignore_variance(lambda x : x, variance)
    assert with_ignore(value_1) == value_1
    assert with_ignore(value_2) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_read_only_dict.py" startline="10" endline="37">
def test_read_only_dict() -> None :
INDENT
    data = ReadOnlyDict({"hello" : "world"})
    with pytest.raises(RuntimeError) :
    INDENT
        data ["hello"] = "universe"
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data ["other_key"] = "universe"
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data.pop("hello")
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data.popitem()
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data.clear()
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data.update({"yo" : "yo"})
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        data.setdefault("yo", "yo")
    DEDENT
    assert isinstance(data, dict)
    assert dict(data) == {"hello" : "world"}
    assert json.dumps(data) == json.dumps({"hello" : "world"})
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="13" endline="38">
async def test_executor_shutdown_can_interrupt_threads(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    iexecutor = InterruptibleThreadPoolExecutor()
    def _loop_sleep_in_executor() :
    INDENT
        while True :
        INDENT
            time.sleep(0.1)
        DEDENT
    DEDENT
    sleep_futures = []
    for _ in range(100) :
    INDENT
        sleep_futures.append(iexecutor.submit(_loop_sleep_in_executor))
    DEDENT
    iexecutor.shutdown()
    for future in sleep_futures :
    INDENT
        with pytest.raises((concurrent.futures.CancelledError, SystemExit)) :
        INDENT
            future.result()
        DEDENT
    DEDENT
    assert "is still running at shutdown" in caplog.text
    assert "time.sleep(0.1)" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="20" endline="23">
def _loop_sleep_in_executor() :
INDENT
    while True :
    INDENT
        time.sleep(0.1)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="39" endline="58">
async def test_executor_shutdown_only_logs_max_attempts(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    iexecutor = InterruptibleThreadPoolExecutor()
    def _loop_sleep_in_executor() :
    INDENT
        time.sleep(0.2)
    DEDENT
    iexecutor.submit(_loop_sleep_in_executor)
    with patch.object(executor, "EXECUTOR_SHUTDOWN_TIMEOUT", 0.3) :
    INDENT
        iexecutor.shutdown()
    DEDENT
    assert "time.sleep(0.2)" in caplog.text
    assert "is still running at shutdown" in caplog.text
    iexecutor.shutdown()

DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="46" endline="48">
def _loop_sleep_in_executor() :
INDENT
    time.sleep(0.2)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="59" endline="76">
async def test_executor_shutdown_does_not_log_shutdown_on_first_attempt(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    iexecutor = InterruptibleThreadPoolExecutor()
    def _do_nothing() :
    INDENT
        return
    DEDENT
    for _ in range(5) :
    INDENT
        iexecutor.submit(_do_nothing)
    DEDENT
    iexecutor.shutdown()
    assert "is still running at shutdown" not in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="66" endline="68">
def _do_nothing() :
INDENT
    return
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="77" endline="97">
async def test_overall_timeout_reached(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    def _loop_sleep_in_executor() :
    INDENT
        time.sleep(1)
    DEDENT
    with patch.object(executor, "EXECUTOR_SHUTDOWN_TIMEOUT", 0.5) :
    INDENT
        iexecutor = InterruptibleThreadPoolExecutor()
        for _ in range(6) :
        INDENT
            iexecutor.submit(_loop_sleep_in_executor)
        DEDENT
        start = time.monotonic()
        iexecutor.shutdown()
        finish = time.monotonic()

    DEDENT
    assert finish - start < 3.0
    iexecutor.shutdown()
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_executor.py" startline="80" endline="82">
def _loop_sleep_in_executor() :
INDENT
    time.sleep(1)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="25" endline="34">
def test_load_bad_data(tmp_path : Path) -> None :
INDENT
    fname = tmp_path / "test5.json"
    with open(fname, "w") as fh :
    INDENT
        fh.write(TEST_BAD_SERIALIED)
    DEDENT
    with pytest.raises(HomeAssistantError, match = re.escape(str(fname))) as err :
    INDENT
        load_json(fname)
    DEDENT
    assert isinstance(err.value.__cause__, ValueError)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="35" endline="42">
def test_load_json_os_error() -> None :
INDENT
    fname = "/"
    with pytest.raises(HomeAssistantError, match = re.escape(str(fname))) as err :
    INDENT
        load_json(fname)
    DEDENT
    assert isinstance(err.value.__cause__, OSError)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="43" endline="54">
def test_load_json_file_not_found_error() -> None :
INDENT
    fname = "invalid_file.json"
    assert load_json(fname) == {}
    assert load_json(fname, default = "") == ""
    assert load_json_object(fname) == {}
    assert load_json_object(fname, default = {"Hi" : "Peter"}) == {"Hi" : "Peter"}
    assert load_json_array(fname) == []
    assert load_json_array(fname, default = ["Hi"]) == ["Hi"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="55" endline="71">
def test_load_json_value_data(tmp_path : Path) -> None :
INDENT
    fname = tmp_path / "test5.json"
    with open(fname, "w", encoding = "utf8") as handle :
    INDENT
        handle.write('"two"')
    DEDENT
    assert load_json(fname) == "two"
    with pytest.raises(
        HomeAssistantError, match = "Expected JSON to be parsed as a dict") :
    INDENT
        load_json_object(fname)
    DEDENT
    with pytest.raises(
        HomeAssistantError, match = "Expected JSON to be parsed as a list") :
    INDENT
        load_json_array(fname)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="72" endline="85">
def test_load_json_object_data(tmp_path : Path) -> None :
INDENT
    fname = tmp_path / "test5.json"
    with open(fname, "w", encoding = "utf8") as handle :
    INDENT
        handle.write('{"a": 1, "B": "two"}')
    DEDENT
    assert load_json(fname) == {"a" : 1, "B" : "two"}
    assert load_json_object(fname) == {"a" : 1, "B" : "two"}
    with pytest.raises(
        HomeAssistantError, match = "Expected JSON to be parsed as a list") :
    INDENT
        load_json_array(fname)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="86" endline="99">
def test_load_json_array_data(tmp_path : Path) -> None :
INDENT
    fname = tmp_path / "test5.json"
    with open(fname, "w", encoding = "utf8") as handle :
    INDENT
        handle.write('[{"a": 1, "B": "two"}]')
    DEDENT
    assert load_json(fname) == [{"a" : 1, "B" : "two"}]
    assert load_json_array(fname) == [{"a" : 1, "B" : "two"}]
    with pytest.raises(
        HomeAssistantError, match = "Expected JSON to be parsed as a dict") :
    INDENT
        load_json_object(fname)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="100" endline="116">
def test_json_loads_array() -> None :
INDENT
    assert json_loads_array('[{"c":1.2}]') == [{"c" : 1.2}]
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a list got <class 'dict'>") :
    INDENT
        json_loads_array("{}")
    DEDENT
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a list got <class 'bool'>") :
    INDENT
        json_loads_array("true")
    DEDENT
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a list got <class 'NoneType'>") :
    INDENT
        json_loads_array("null")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="117" endline="133">
def test_json_loads_object() -> None :
INDENT
    assert json_loads_object('{"c":1.2}') == {"c" : 1.2}
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a dict got <class 'list'>") :
    INDENT
        json_loads_object("[]")
    DEDENT
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a dict got <class 'bool'>") :
    INDENT
        json_loads_object("true")
    DEDENT
    with pytest.raises(
        ValueError, match = "Expected JSON to be parsed as a dict got <class 'NoneType'>") :
    INDENT
        json_loads_object("null")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="134" endline="148">
async def test_deprecated_test_find_unserializable_data(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    from homeassistant.util.json import find_paths_unserializable_data
    find_paths_unserializable_data(1)
    assert (
        "uses find_paths_unserializable_data from homeassistant.util.json"
        in caplog.text)
    assert "should be updated to use homeassistant.helpers.json module" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="149" endline="161">
async def test_deprecated_save_json(
caplog : pytest.LogCaptureFixture, tmp_path : Path
) -> None :
INDENT
    from homeassistant.util.json import save_json
    fname = tmp_path / "test1.json"
    save_json(fname, TEST_JSON_A)
    assert "uses save_json from homeassistant.util.json" in caplog.text
    assert "should be updated to use homeassistant.helpers.json module" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_json.py" startline="162" endline="176">
async def test_loading_derived_class() :
INDENT
    class MyStr(str) :
    INDENT
        pass
    DEDENT
    class MyBytes(bytes) :
    INDENT
        pass
    DEDENT
    assert json_loads('"abc"') == "abc"
    assert json_loads(MyStr('"abc"')) == "abc"
    assert json_loads(b'"abc"') == "abc"
    with pytest.raises(orjson.JSONDecodeError) :
    INDENT
        assert json_loads(MyBytes(b'"abc"')) == "abc"
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_process.py" startline="11" endline="26">
async def test_kill_process() -> None :
INDENT
    sleeper = subprocess.Popen(
        "sleep 1000",
        shell = True,
        stdout = subprocess.DEVNULL,
        stderr = subprocess.DEVNULL,
        )
    pid = sleeper.pid
    assert os.kill(pid, 0) is None
    process.kill_subprocess(sleeper)
    with pytest.raises(OSError) :
    INDENT
        os.kill(pid, 0)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ulid.py" startline="8" endline="13">
async def test_ulid_util_uuid_hex() -> None :
INDENT
    assert len(ulid_util.ulid_hex()) == 32
    assert uuid.UUID(ulid_util.ulid_hex())
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ulid.py" startline="14" endline="16">
async def test_ulid_util_uuid() -> None :
INDENT
    assert len(ulid_util.ulid()) == 26
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_uuid.py" startline="8" endline="11">
async def test_uuid_util_random_uuid_hex() -> None :
INDENT
    assert len(uuid_util.random_uuid_hex()) == 32
    assert uuid.UUID(uuid_util.random_uuid_hex())
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="8" endline="19">
def test_is_loopback() -> None :
INDENT
    assert network_util.is_loopback(ip_address("127.0.0.2"))
    assert network_util.is_loopback(ip_address("127.0.0.1"))
    assert network_util.is_loopback(ip_address("::1"))
    assert network_util.is_loopback(ip_address("::ffff:127.0.0.0"))
    assert network_util.is_loopback(ip_address("0:0:0:0:0:0:0:1"))
    assert network_util.is_loopback(ip_address("0:0:0:0:0:ffff:7f00:1"))
    assert not network_util.is_loopback(ip_address("104.26.5.238"))
    assert not network_util.is_loopback(ip_address("2600:1404:400:1a4::356e"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="20" endline="29">
def test_is_private() -> None :
INDENT
    assert network_util.is_private(ip_address("192.168.0.1"))
    assert network_util.is_private(ip_address("172.16.12.0"))
    assert network_util.is_private(ip_address("10.5.43.3"))
    assert network_util.is_private(ip_address("fd12:3456:789a:1::1"))
    assert not network_util.is_private(ip_address("127.0.0.1"))
    assert not network_util.is_private(ip_address("::1"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="30" endline="37">
def test_is_link_local() -> None :
INDENT
    assert network_util.is_link_local(ip_address("169.254.12.3"))
    assert network_util.is_link_local(ip_address("fe80::1234:5678:abcd"))
    assert not network_util.is_link_local(ip_address("127.0.0.1"))
    assert not network_util.is_link_local(ip_address("::1"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="38" endline="43">
def test_is_invalid() -> None :
INDENT
    assert network_util.is_invalid(ip_address("0.0.0.0"))
    assert not network_util.is_invalid(ip_address("127.0.0.1"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="44" endline="56">
def test_is_local() -> None :
INDENT
    assert network_util.is_local(ip_address("192.168.0.1"))
    assert network_util.is_local(ip_address("127.0.0.1"))
    assert network_util.is_local(ip_address("fd12:3456:789a:1::1"))
    assert network_util.is_local(ip_address("fe80::1234:5678:abcd"))
    assert network_util.is_local(ip_address("::ffff:192.168.0.1"))
    assert not network_util.is_local(ip_address("208.5.4.2"))
    assert not network_util.is_local(ip_address("198.51.100.1"))
    assert not network_util.is_local(ip_address("2001:DB8:FA1::1"))
    assert not network_util.is_local(ip_address("::ffff:208.5.4.2"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="57" endline="66">
def test_is_ip_address() -> None :
INDENT
    assert network_util.is_ip_address("192.168.0.1")
    assert network_util.is_ip_address("8.8.8.8")
    assert network_util.is_ip_address("::ffff:127.0.0.0")
    assert not network_util.is_ip_address("192.168.0.999")
    assert not network_util.is_ip_address("192.168.0.0/24")
    assert not network_util.is_ip_address("example.com")
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="67" endline="75">
def test_is_ipv4_address() -> None :
INDENT
    assert network_util.is_ipv4_address("192.168.0.1") is True
    assert network_util.is_ipv4_address("8.8.8.8") is True
    assert network_util.is_ipv4_address("192.168.0.999") is False
    assert network_util.is_ipv4_address("192.168.0.0/24") is False
    assert network_util.is_ipv4_address("example.com") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="76" endline="82">
def test_is_ipv6_address() -> None :
INDENT
    assert network_util.is_ipv6_address("::1") is True
    assert network_util.is_ipv6_address("8.8.8.8") is False
    assert network_util.is_ipv6_address("8.8.8.8") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="83" endline="106">
def test_is_valid_host() -> None :
INDENT
    assert network_util.is_host_valid("::1")
    assert network_util.is_host_valid("::ffff:127.0.0.0")
    assert network_util.is_host_valid("2001:0db8:85a3:0000:0000:8a2e:0370:7334")
    assert network_util.is_host_valid("8.8.8.8")
    assert network_util.is_host_valid("local")
    assert network_util.is_host_valid("host-host")
    assert network_util.is_host_valid("example.com")
    assert network_util.is_host_valid("example.com.")
    assert network_util.is_host_valid("Example123.com")
    assert not network_util.is_host_valid("")
    assert not network_util.is_host_valid("192.168.0.1:8080")
    assert not network_util.is_host_valid("192.168.0.999")
    assert not network_util.is_host_valid("2001:hb8::1:0:0:1")
    assert not network_util.is_host_valid("-host-host")
    assert not network_util.is_host_valid("host-host-")
    assert not network_util.is_host_valid("host_host")
    assert not network_util.is_host_valid("example.com/path")
    assert not network_util.is_host_valid("example.com:8080")
    assert not network_util.is_host_valid("verylonghostname" * 4)
    assert not network_util.is_host_valid("verydeepdomain." * 18)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_network.py" startline="107" endline="126">
def test_normalize_url() -> None :
INDENT
    assert network_util.normalize_url("http://example.com") == "http://example.com"
    assert network_util.normalize_url("https://example.com") == "https://example.com"
    assert network_util.normalize_url("https://example.com/") == "https://example.com"
    assert (
        network_util.normalize_url("https://example.com:443") == "https://example.com")
    assert network_util.normalize_url("http://example.com:80") == "http://example.com"
    assert (
        network_util.normalize_url("https://example.com:80") == "https://example.com:80")
    assert (
        network_util.normalize_url("http://example.com:443") == "http://example.com:443")
    assert (
        network_util.normalize_url("https://example.com:443/test/")
        == "https://example.com/test")
    assert network_util.normalize_url("/test/") == "/test"
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ssl.py" startline="16" endline="21">
def mock_sslcontext() :
INDENT
    ssl_mock = MagicMock(set_ciphers = Mock(return_value = True))
    return ssl_mock

DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ssl.py" startline="22" endline="38">
def test_client_context(mock_sslcontext) -> None :
INDENT
    with patch("homeassistant.util.ssl.ssl.SSLContext", return_value = mock_sslcontext) :
    INDENT
        client_context()
        mock_sslcontext.set_ciphers.assert_not_called()
        client_context(SSLCipherList.MODERN)
        mock_sslcontext.set_ciphers.assert_called_with(
            SSL_CIPHER_LISTS [SSLCipherList.MODERN])
        client_context(SSLCipherList.INTERMEDIATE)
        mock_sslcontext.set_ciphers.assert_called_with(
            SSL_CIPHER_LISTS [SSLCipherList.INTERMEDIATE])

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ssl.py" startline="39" endline="55">
def test_no_verify_ssl_context(mock_sslcontext) -> None :
INDENT
    with patch("homeassistant.util.ssl.ssl.SSLContext", return_value = mock_sslcontext) :
    INDENT
        create_no_verify_ssl_context()
        mock_sslcontext.set_ciphers.assert_not_called()
        create_no_verify_ssl_context(SSLCipherList.MODERN)
        mock_sslcontext.set_ciphers.assert_called_with(
            SSL_CIPHER_LISTS [SSLCipherList.MODERN])
        create_no_verify_ssl_context(SSLCipherList.INTERMEDIATE)
        mock_sslcontext.set_ciphers.assert_called_with(
            SSL_CIPHER_LISTS [SSLCipherList.INTERMEDIATE])

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_ssl.py" startline="56" endline="62">
def test_ssl_context_caching() -> None :
INDENT
    assert client_context() is client_context(SSLCipherList.PYTHON_DEFAULT)
    assert create_no_verify_ssl_context() is create_no_verify_ssl_context(
        SSLCipherList.PYTHON_DEFAULT)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="41" endline="134">
def test_invalid_units() -> None :
INDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = UnitOfMass.GRAMS,
            pressure = UnitOfPressure.PA,
            temperature = INVALID_UNIT,
            volume = UnitOfVolume.LITERS,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = INVALID_UNIT,
            mass = UnitOfMass.GRAMS,
            pressure = UnitOfPressure.PA,
            temperature = UnitOfTemperature.CELSIUS,
            volume = UnitOfVolume.LITERS,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = UnitOfMass.GRAMS,
            pressure = UnitOfPressure.PA,
            temperature = UnitOfTemperature.CELSIUS,
            volume = UnitOfVolume.LITERS,
            wind_speed = INVALID_UNIT,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = UnitOfMass.GRAMS,
            pressure = UnitOfPressure.PA,
            temperature = UnitOfTemperature.CELSIUS,
            volume = INVALID_UNIT,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = INVALID_UNIT,
            pressure = UnitOfPressure.PA,
            temperature = UnitOfTemperature.CELSIUS,
            volume = UnitOfVolume.LITERS,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = UnitOfLength.MILLIMETERS,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = UnitOfMass.GRAMS,
            pressure = INVALID_UNIT,
            temperature = UnitOfTemperature.CELSIUS,
            volume = UnitOfVolume.LITERS,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        UnitSystem(
            SYSTEM_NAME,
            accumulated_precipitation = INVALID_UNIT,
            conversions = {},
            length = UnitOfLength.METERS,
            mass = UnitOfMass.GRAMS,
            pressure = UnitOfPressure.PA,
            temperature = UnitOfTemperature.CELSIUS,
            volume = UnitOfVolume.LITERS,
            wind_speed = UnitOfSpeed.METERS_PER_SECOND,
            )

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="135" endline="150">
def test_invalid_value() -> None :
INDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.length("25a", UnitOfLength.KILOMETERS)
    DEDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.temperature("50K", UnitOfTemperature.CELSIUS)
    DEDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.wind_speed("50km/h", UnitOfSpeed.METERS_PER_SECOND)
    DEDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.volume("50L", UnitOfVolume.LITERS)
    DEDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.pressure("50Pa", UnitOfPressure.PA)
    DEDENT
    with pytest.raises(TypeError) :
    INDENT
        METRIC_SYSTEM.accumulated_precipitation("50mm", UnitOfLength.MILLIMETERS)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="151" endline="165">
def test_as_dict() -> None :
INDENT
    expected = {
        LENGTH : UnitOfLength.KILOMETERS,
        WIND_SPEED : UnitOfSpeed.METERS_PER_SECOND,
        TEMPERATURE : UnitOfTemperature.CELSIUS,
        VOLUME : UnitOfVolume.LITERS,
        MASS : UnitOfMass.GRAMS,
        PRESSURE : UnitOfPressure.PA,
        ACCUMULATED_PRECIPITATION : UnitOfLength.MILLIMETERS,
        }
    assert expected == METRIC_SYSTEM.as_dict()
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="166" endline="170">
def test_temperature_same_unit() -> None :
INDENT
    assert METRIC_SYSTEM.temperature(5, METRIC_SYSTEM.temperature_unit) == 5
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="171" endline="176">
def test_temperature_unknown_unit() -> None :
INDENT
    with pytest.raises(HomeAssistantError, match = "is not a recognized .* unit") :
    INDENT
        METRIC_SYSTEM.temperature(5, "abc")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="177" endline="185">
def test_temperature_to_metric() -> None :
INDENT
    assert METRIC_SYSTEM.temperature(25, METRIC_SYSTEM.temperature_unit) == 25
    assert (
        round(METRIC_SYSTEM.temperature(80, IMPERIAL_SYSTEM.temperature_unit), 1)
        == 26.7)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="186" endline="191">
def test_temperature_to_imperial() -> None :
INDENT
    assert IMPERIAL_SYSTEM.temperature(77, IMPERIAL_SYSTEM.temperature_unit) == 77
    assert IMPERIAL_SYSTEM.temperature(25, METRIC_SYSTEM.temperature_unit) == 77
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="192" endline="197">
def test_length_unknown_unit() -> None :
INDENT
    with pytest.raises(HomeAssistantError, match = "is not a recognized .* unit") :
    INDENT
        METRIC_SYSTEM.length(5, "fr")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="198" endline="205">
def test_length_to_metric() -> None :
INDENT
    assert METRIC_SYSTEM.length(100, METRIC_SYSTEM.length_unit) == 100
    assert METRIC_SYSTEM.length(5, IMPERIAL_SYSTEM.length_unit) == pytest.approx(
        8.04672)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="206" endline="213">
def test_length_to_imperial() -> None :
INDENT
    assert IMPERIAL_SYSTEM.length(100, IMPERIAL_SYSTEM.length_unit) == 100
    assert IMPERIAL_SYSTEM.length(5, METRIC_SYSTEM.length_unit) == pytest.approx(
        3.106855)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="214" endline="219">
def test_wind_speed_unknown_unit() -> None :
INDENT
    with pytest.raises(HomeAssistantError, match = "is not a recognized .* unit") :
    INDENT
        METRIC_SYSTEM.length(5, "turtles")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="220" endline="228">
def test_wind_speed_to_metric() -> None :
INDENT
    assert METRIC_SYSTEM.wind_speed(100, METRIC_SYSTEM.wind_speed_unit) == 100
    assert METRIC_SYSTEM.wind_speed(
        2237, IMPERIAL_SYSTEM.wind_speed_unit) == pytest.approx(1000, abs = 0.1)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="229" endline="236">
def test_wind_speed_to_imperial() -> None :
INDENT
    assert IMPERIAL_SYSTEM.wind_speed(100, IMPERIAL_SYSTEM.wind_speed_unit) == 100
    assert IMPERIAL_SYSTEM.wind_speed(
        1000, METRIC_SYSTEM.wind_speed_unit) == pytest.approx(2237, abs = 0.1)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="237" endline="241">
def test_pressure_same_unit() -> None :
INDENT
    assert METRIC_SYSTEM.pressure(5, METRIC_SYSTEM.pressure_unit) == 5
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="242" endline="247">
def test_pressure_unknown_unit() -> None :
INDENT
    with pytest.raises(HomeAssistantError, match = "is not a recognized .* unit") :
    INDENT
        METRIC_SYSTEM.pressure(5, "K")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="248" endline="255">
def test_pressure_to_metric() -> None :
INDENT
    assert METRIC_SYSTEM.pressure(25, METRIC_SYSTEM.pressure_unit) == 25
    assert METRIC_SYSTEM.pressure(14.7, IMPERIAL_SYSTEM.pressure_unit) == pytest.approx(
        101352.932, abs = 1e-1)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="256" endline="263">
def test_pressure_to_imperial() -> None :
INDENT
    assert IMPERIAL_SYSTEM.pressure(77, IMPERIAL_SYSTEM.pressure_unit) == 77
    assert IMPERIAL_SYSTEM.pressure(
        101352.932, METRIC_SYSTEM.pressure_unit) == pytest.approx(14.7, abs = 1e-4)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="264" endline="273">
def test_accumulated_precipitation_same_unit() -> None :
INDENT
    assert (
        METRIC_SYSTEM.accumulated_precipitation(
            5, METRIC_SYSTEM.accumulated_precipitation_unit)
        == 5)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="274" endline="279">
def test_accumulated_precipitation_unknown_unit() -> None :
INDENT
    with pytest.raises(HomeAssistantError, match = "is not a recognized .* unit") :
    INDENT
        METRIC_SYSTEM.accumulated_precipitation(5, "K")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="280" endline="292">
def test_accumulated_precipitation_to_metric() -> None :
INDENT
    assert (
        METRIC_SYSTEM.accumulated_precipitation(
            25, METRIC_SYSTEM.accumulated_precipitation_unit)
        == 25)
    assert METRIC_SYSTEM.accumulated_precipitation(
        10, IMPERIAL_SYSTEM.accumulated_precipitation_unit) == pytest.approx(254, abs = 1e-4)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="293" endline="305">
def test_accumulated_precipitation_to_imperial() -> None :
INDENT
    assert (
        IMPERIAL_SYSTEM.accumulated_precipitation(
            10, IMPERIAL_SYSTEM.accumulated_precipitation_unit)
        == 10)
    assert IMPERIAL_SYSTEM.accumulated_precipitation(
        254, METRIC_SYSTEM.accumulated_precipitation_unit) == pytest.approx(10, abs = 1e-4)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="306" endline="316">
def test_properties() -> None :
INDENT
    assert METRIC_SYSTEM.length_unit == UnitOfLength.KILOMETERS
    assert METRIC_SYSTEM.wind_speed_unit == UnitOfSpeed.METERS_PER_SECOND
    assert METRIC_SYSTEM.temperature_unit == UnitOfTemperature.CELSIUS
    assert METRIC_SYSTEM.mass_unit == UnitOfMass.GRAMS
    assert METRIC_SYSTEM.volume_unit == UnitOfVolume.LITERS
    assert METRIC_SYSTEM.pressure_unit == UnitOfPressure.PA
    assert METRIC_SYSTEM.accumulated_precipitation_unit == UnitOfLength.MILLIMETERS
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="324" endline="328">
def test_get_unit_system(key : str, expected_system : UnitSystem) -> None :
INDENT
    assert get_unit_system(key) is expected_system
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="332" endline="337">
def test_get_unit_system_invalid(key : str) -> None :
INDENT
    with pytest.raises(ValueError, match = f"`{key}` is not a valid unit system key") :
    INDENT
        _ = get_unit_system(key)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="482" endline="491">
def test_get_metric_converted_unit_(
device_class : SensorDeviceClass,
original_unit : str,
state_unit : str | None,
) -> None :
INDENT
    unit_system = METRIC_SYSTEM
    assert unit_system.get_converted_unit(device_class, original_unit) == state_unit
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="552" endline="565">
def test_metric_converted_units(device_class : SensorDeviceClass) -> None :
INDENT
    unit_system = METRIC_SYSTEM
    for unit in UNCONVERTED_UNITS_METRIC_SYSTEM [device_class] :
    INDENT
        assert unit in DEVICE_CLASS_UNITS [device_class]
    DEDENT
    for unit in DEVICE_CLASS_UNITS [device_class] :
    INDENT
        if unit in UNCONVERTED_UNITS_METRIC_SYSTEM [device_class] :
        INDENT
            assert (device_class, unit) not in unit_system._conversions
            continue
        DEDENT
        assert (device_class, unit) in unit_system._conversions
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="702" endline="711">
def test_get_us_converted_unit(
device_class : SensorDeviceClass,
original_unit : str,
state_unit : str | None,
) -> None :
INDENT
    unit_system = US_CUSTOMARY_SYSTEM
    assert unit_system.get_converted_unit(device_class, original_unit) == state_unit
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_unit_system.py" startline="763" endline="774">
def test_imperial_converted_units(device_class : SensorDeviceClass) -> None :
INDENT
    unit_system = US_CUSTOMARY_SYSTEM
    for unit in UNCONVERTED_UNITS_US_SYSTEM [device_class] :
    INDENT
        assert unit in DEVICE_CLASS_UNITS [device_class]
    DEDENT
    for unit in DEVICE_CLASS_UNITS [device_class] :
    INDENT
        if unit in UNCONVERTED_UNITS_US_SYSTEM [device_class] :
        INDENT
            assert (device_class, unit) not in unit_system._conversions
            continue
        DEDENT
        assert (device_class, unit) in unit_system._conversions
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_enum.py" startline="50" endline="52">
def test_try_parse(enum_type : type [Enum], value : Any, expected : Enum | None) -> None :
INDENT
    assert try_parse_enum(enum_type, value) is expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="22" endline="34">
async def test_ranged_value_to_int_range_large(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (1, 255)
    dest_range = (1, 100)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="43" endline="57">
async def test_scale_to_ranged_value_large(
input_val : float, output_val : float, math_ceil : int
) -> None :
INDENT
    source_range = (1, 100)
    dest_range = (1, 255)
    assert scale_to_ranged_value(source_range, dest_range, input_val) == output_val
    assert (
        math.ceil(scale_to_ranged_value(source_range, dest_range, input_val))
        == math_ceil)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="69" endline="81">
async def test_scale_ranged_value_to_int_range_small(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (1, 6)
    dest_range = (1, 100)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="93" endline="103">
async def test_scale_to_ranged_value_small(input_val : float, output_val : int) -> None :
INDENT
    source_range = (1, 100)
    dest_range = (1, 6)
    assert (
        math.ceil(scale_to_ranged_value(source_range, dest_range, input_val))
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="113" endline="125">
async def test_scale_ranged_value_to_int_range_starting_at_one(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (1, 4)
    dest_range = (1, 100)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="136" endline="148">
async def test_scale_ranged_value_to_int_range_starting_high(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (101, 255)
    dest_range = (1, 100)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="158" endline="175">
async def test_scale_ranged_value_to_scaled_range_starting_zero(
input_val : float, output_int : int, output_float : float
) -> None :
INDENT
    source_range = (0, 3)
    dest_range = (1, 100)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_int)
    assert scale_to_ranged_value(source_range, dest_range, input_val) == output_float
    assert scale_ranged_value_to_int_range(
        dest_range, source_range, output_float) == int(input_val)
    assert scale_to_ranged_value(dest_range, source_range, output_float) == input_val
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="186" endline="198">
async def test_scale_ranged_value_to_int_range_starting_high_with_offset(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (101, 255)
    dest_range = (101, 200)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="208" endline="220">
async def test_scale_ranged_value_to_int_range_starting_zero_with_offset(
input_val : float, output_val : int
) -> None :
INDENT
    source_range = (0, 3)
    dest_range = (101, 200)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_val)
DEDENT
</source>
<source file="systems/Home Assistant/tests/util/test_scaling.py" startline="230" endline="249">
async def test_scale_ranged_value_to_int_range_starting_zero_with_zero_offset(
input_val : float, output_int : int, output_float : float
) -> None :
INDENT
    source_range = (0, 3)
    dest_range = (0, 7)
    assert (
        scale_ranged_value_to_int_range(source_range, dest_range, input_val)
        == output_int)
    assert scale_to_ranged_value(source_range, dest_range, input_val) == output_float
    assert scale_ranged_value_to_int_range(dest_range, source_range, output_int) == int(
        input_val)
    assert scale_to_ranged_value(dest_range, source_range, output_float) == input_val
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="8" endline="28">
async def test_expand_entity_ids(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set("light.Bowl", STATE_ON)
    hass.states.async_set("light.Ceiling", STATE_OFF)
    hass.states.async_set(
        "group.init_group", STATE_ON, {ATTR_ENTITY_ID : ["light.bowl", "light.ceiling"]})
    state = hass.states.get("group.init_group")
    assert state is not None
    assert state.attributes [ATTR_ENTITY_ID] == ["light.bowl", "light.ceiling"]
    assert sorted(group.expand_entity_ids(hass, ["group.init_group"])) == [
        "light.bowl",
        "light.ceiling",
        ]
    assert sorted(group.expand_entity_ids(hass, ["group.INIT_group"])) == [
        "light.bowl",
        "light.ceiling",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="29" endline="47">
async def test_expand_entity_ids_does_not_return_duplicates(
hass : HomeAssistant,
) -> None :
INDENT
    hass.states.async_set("light.Bowl", STATE_ON)
    hass.states.async_set("light.Ceiling", STATE_OFF)
    hass.states.async_set(
        "group.init_group", STATE_ON, {ATTR_ENTITY_ID : ["light.bowl", "light.ceiling"]})
    assert sorted(
        group.expand_entity_ids(hass, ["group.init_group", "light.Ceiling"])) == ["light.bowl", "light.ceiling"]
    assert sorted(
        group.expand_entity_ids(hass, ["light.bowl", "group.init_group"])) == ["light.bowl", "light.ceiling"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="48" endline="67">
async def test_expand_entity_ids_recursive(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set("light.Bowl", STATE_ON)
    hass.states.async_set("light.Ceiling", STATE_OFF)
    hass.states.async_set(
        "group.init_group", STATE_ON, {ATTR_ENTITY_ID : ["light.bowl", "light.ceiling"]})
    hass.states.async_set(
        "group.rec_group",
        STATE_ON,
        {ATTR_ENTITY_ID : ["group.init_group", "light.ceiling"]},
        )
    assert sorted(group.expand_entity_ids(hass, ["group.rec_group"])) == [
        "light.bowl",
        "light.ceiling",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="68" endline="72">
async def test_expand_entity_ids_ignores_non_strings(hass : HomeAssistant) -> None :
INDENT
    assert group.expand_entity_ids(hass, [5, True]) == []
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="73" endline="86">
async def test_get_entity_ids(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set("light.Bowl", STATE_ON)
    hass.states.async_set("light.Ceiling", STATE_OFF)
    hass.states.async_set(
        "group.init_group", STATE_ON, {ATTR_ENTITY_ID : ["light.bowl", "light.ceiling"]})
    assert sorted(group.get_entity_ids(hass, "group.init_group")) == [
        "light.bowl",
        "light.ceiling",
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="87" endline="98">
async def test_get_entity_ids_with_domain_filter(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set("switch.AC", STATE_OFF)
    hass.states.async_set(
        "group.mixed_group", STATE_ON, {ATTR_ENTITY_ID : ["light.bowl", "switch.ac"]})
    assert group.get_entity_ids(hass, "group.mixed_group", domain_filter = "switch") == [
        "switch.ac"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="99" endline="103">
async def test_get_entity_ids_with_non_existing_group_name(hass : HomeAssistant) -> None :
INDENT
    assert group.get_entity_ids(hass, "non_existing") == []
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_group.py" startline="104" endline="106">
async def test_get_entity_ids_with_non_group_state(hass : HomeAssistant) -> None :
INDENT
    assert group.get_entity_ids(hass, "switch.AC") == []
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="9" endline="17">
async def test_static_vars() -> None :
INDENT
    orig = {"hello" : "world"}
    var = cv.SCRIPT_VARIABLES_SCHEMA(orig)
    rendered = var.async_render(None, None)
    assert rendered is not orig
    assert rendered == orig
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="18" endline="28">
async def test_static_vars_run_args() -> None :
INDENT
    orig = {"hello" : "world"}
    orig_copy = dict(orig)
    var = cv.SCRIPT_VARIABLES_SCHEMA(orig)
    rendered = var.async_render(None, {"hello" : "override", "run" : "var"})
    assert rendered == {"hello" : "override", "run" : "var"}
    assert orig == orig_copy
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="29" endline="37">
async def test_static_vars_no_default() -> None :
INDENT
    orig = {"hello" : "world"}
    var = cv.SCRIPT_VARIABLES_SCHEMA(orig)
    rendered = var.async_render(None, None, render_as_defaults = False)
    assert rendered is not orig
    assert rendered == orig
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="38" endline="50">
async def test_static_vars_run_args_no_default() -> None :
INDENT
    orig = {"hello" : "world"}
    orig_copy = dict(orig)
    var = cv.SCRIPT_VARIABLES_SCHEMA(orig)
    rendered = var.async_render(
        None, {"hello" : "override", "run" : "var"}, render_as_defaults = False)
    assert rendered == {"hello" : "world", "run" : "var"}
    assert orig == orig_copy
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="51" endline="57">
async def test_template_vars(hass : HomeAssistant) -> None :
INDENT
    var = cv.SCRIPT_VARIABLES_SCHEMA({"hello" : "{{ 1 + 1 }}"})
    rendered = var.async_render(hass, None)
    assert rendered == {"hello" : 2}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="58" endline="79">
async def test_template_vars_run_args(hass : HomeAssistant) -> None :
INDENT
    var = cv.SCRIPT_VARIABLES_SCHEMA(
        {
            "something" : "{{ run_var_ex + 1 }}",
            "something_2" : "{{ run_var_ex + 1 }}",
            })
    rendered = var.async_render(
        hass,
        {
            "run_var_ex" : 5,
            "something_2" : 1,
            },
        )
    assert rendered == {
        "run_var_ex" : 5,
        "something" : 6,
        "something_2" : 1,
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="80" endline="86">
async def test_template_vars_no_default(hass : HomeAssistant) -> None :
INDENT
    var = cv.SCRIPT_VARIABLES_SCHEMA({"hello" : "{{ 1 + 1 }}"})
    rendered = var.async_render(hass, None, render_as_defaults = False)
    assert rendered == {"hello" : 2}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="87" endline="109">
async def test_template_vars_run_args_no_default(hass : HomeAssistant) -> None :
INDENT
    var = cv.SCRIPT_VARIABLES_SCHEMA(
        {
            "something" : "{{ run_var_ex + 1 }}",
            "something_2" : "{{ run_var_ex + 1 }}",
            })
    rendered = var.async_render(
        hass,
        {
            "run_var_ex" : 5,
            "something_2" : 1,
            },
        render_as_defaults = False,
        )
    assert rendered == {
        "run_var_ex" : 5,
        "something" : 6,
        "something_2" : 6,
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_script_variables.py" startline="110" endline="114">
async def test_template_vars_error(hass : HomeAssistant) -> None :
INDENT
    var = cv.SCRIPT_VARIABLES_SCHEMA({"hello" : "{{ canont.work }}"})
    with pytest.raises(template.TemplateError) :
    INDENT
        var.async_render(hass, None)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="14" endline="88">
def test_next_events(hass : HomeAssistant) -> None :
INDENT
    utc_now = datetime(2016, 11, 1, 8, 0, 0, tzinfo = dt_util.UTC)
    from astral import LocationInfo
    import astral.sun
    utc_today = utc_now.date()
    location = LocationInfo(
        latitude = hass.config.latitude, longitude = hass.config.longitude)
    mod = - 1
    while True :
    INDENT
        next_dawn = astral.sun.dawn(
            location.observer, date = utc_today + timedelta(days = mod))
        if next_dawn > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    mod = - 1
    while True :
    INDENT
        next_dusk = astral.sun.dusk(
            location.observer, date = utc_today + timedelta(days = mod))
        if next_dusk > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    mod = - 1
    while True :
    INDENT
        next_midnight = astral.sun.midnight(
            location.observer, date = utc_today + timedelta(days = mod))
        if next_midnight > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    mod = - 1
    while True :
    INDENT
        next_noon = astral.sun.noon(
            location.observer, date = utc_today + timedelta(days = mod))
        if next_noon > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    mod = - 1
    while True :
    INDENT
        next_rising = astral.sun.sunrise(
            location.observer, date = utc_today + timedelta(days = mod))
        if next_rising > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    mod = - 1
    while True :
    INDENT
        next_setting = astral.sun.sunset(
            location.observer, utc_today + timedelta(days = mod))
        if next_setting > utc_now :
        INDENT
            break
        DEDENT
        mod += 1
    DEDENT
    with freeze_time(utc_now) :
    INDENT
        assert next_dawn == sun.get_astral_event_next(hass, "dawn")
        assert next_dusk == sun.get_astral_event_next(hass, "dusk")
        assert next_midnight == sun.get_astral_event_next(hass, "midnight")
        assert next_noon == sun.get_astral_event_next(hass, "noon")
        assert next_rising == sun.get_astral_event_next(hass, SUN_EVENT_SUNRISE)
        assert next_setting == sun.get_astral_event_next(hass, SUN_EVENT_SUNSET)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="89" endline="115">
def test_date_events(hass : HomeAssistant) -> None :
INDENT
    utc_now = datetime(2016, 11, 1, 8, 0, 0, tzinfo = dt_util.UTC)
    from astral import LocationInfo
    import astral.sun
    utc_today = utc_now.date()
    location = LocationInfo(
        latitude = hass.config.latitude, longitude = hass.config.longitude)
    dawn = astral.sun.dawn(location.observer, utc_today)
    dusk = astral.sun.dusk(location.observer, utc_today)
    midnight = astral.sun.midnight(location.observer, utc_today)
    noon = astral.sun.noon(location.observer, utc_today)
    sunrise = astral.sun.sunrise(location.observer, utc_today)
    sunset = astral.sun.sunset(location.observer, utc_today)
    assert dawn == sun.get_astral_event_date(hass, "dawn", utc_today)
    assert dusk == sun.get_astral_event_date(hass, "dusk", utc_today)
    assert midnight == sun.get_astral_event_date(hass, "midnight", utc_today)
    assert noon == sun.get_astral_event_date(hass, "noon", utc_today)
    assert sunrise == sun.get_astral_event_date(hass, SUN_EVENT_SUNRISE, utc_today)
    assert sunset == sun.get_astral_event_date(hass, SUN_EVENT_SUNSET, utc_today)
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="116" endline="143">
def test_date_events_default_date(hass : HomeAssistant) -> None :
INDENT
    utc_now = datetime(2016, 11, 1, 8, 0, 0, tzinfo = dt_util.UTC)
    from astral import LocationInfo
    import astral.sun
    utc_today = utc_now.date()
    location = LocationInfo(
        latitude = hass.config.latitude, longitude = hass.config.longitude)
    dawn = astral.sun.dawn(location.observer, date = utc_today)
    dusk = astral.sun.dusk(location.observer, date = utc_today)
    midnight = astral.sun.midnight(location.observer, date = utc_today)
    noon = astral.sun.noon(location.observer, date = utc_today)
    sunrise = astral.sun.sunrise(location.observer, date = utc_today)
    sunset = astral.sun.sunset(location.observer, date = utc_today)
    with freeze_time(utc_now) :
    INDENT
        assert dawn == sun.get_astral_event_date(hass, "dawn", utc_today)
        assert dusk == sun.get_astral_event_date(hass, "dusk", utc_today)
        assert midnight == sun.get_astral_event_date(hass, "midnight", utc_today)
        assert noon == sun.get_astral_event_date(hass, "noon", utc_today)
        assert sunrise == sun.get_astral_event_date(hass, SUN_EVENT_SUNRISE, utc_today)
        assert sunset == sun.get_astral_event_date(hass, SUN_EVENT_SUNSET, utc_today)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="144" endline="170">
def test_date_events_accepts_datetime(hass : HomeAssistant) -> None :
INDENT
    utc_now = datetime(2016, 11, 1, 8, 0, 0, tzinfo = dt_util.UTC)
    from astral import LocationInfo
    import astral.sun
    utc_today = utc_now.date()
    location = LocationInfo(
        latitude = hass.config.latitude, longitude = hass.config.longitude)
    dawn = astral.sun.dawn(location.observer, date = utc_today)
    dusk = astral.sun.dusk(location.observer, date = utc_today)
    midnight = astral.sun.midnight(location.observer, date = utc_today)
    noon = astral.sun.noon(location.observer, date = utc_today)
    sunrise = astral.sun.sunrise(location.observer, date = utc_today)
    sunset = astral.sun.sunset(location.observer, date = utc_today)
    assert dawn == sun.get_astral_event_date(hass, "dawn", utc_now)
    assert dusk == sun.get_astral_event_date(hass, "dusk", utc_now)
    assert midnight == sun.get_astral_event_date(hass, "midnight", utc_now)
    assert noon == sun.get_astral_event_date(hass, "noon", utc_now)
    assert sunrise == sun.get_astral_event_date(hass, SUN_EVENT_SUNRISE, utc_now)
    assert sunset == sun.get_astral_event_date(hass, SUN_EVENT_SUNSET, utc_now)
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="171" endline="181">
def test_is_up(hass : HomeAssistant) -> None :
INDENT
    utc_now = datetime(2016, 11, 1, 12, 0, 0, tzinfo = dt_util.UTC)
    with freeze_time(utc_now) :
    INDENT
        assert not sun.is_up(hass)
    DEDENT
    utc_now = datetime(2016, 11, 1, 18, 0, 0, tzinfo = dt_util.UTC)
    with freeze_time(utc_now) :
    INDENT
        assert sun.is_up(hass)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="182" endline="198">
def test_norway_in_june(hass : HomeAssistant) -> None :
INDENT
    hass.config.latitude = 69.6
    hass.config.longitude = 18.8
    june = datetime(2016, 6, 1, tzinfo = dt_util.UTC)
    assert sun.get_astral_event_next(hass, SUN_EVENT_SUNRISE, june) == datetime(
        2016, 7, 24, 22, 59, 45, 689645, tzinfo = dt_util.UTC)
    assert sun.get_astral_event_next(hass, SUN_EVENT_SUNSET, june) == datetime(
        2016, 7, 25, 22, 17, 13, 503932, tzinfo = dt_util.UTC)
    assert sun.get_astral_event_date(hass, SUN_EVENT_SUNRISE, june) is None
    assert sun.get_astral_event_date(hass, SUN_EVENT_SUNSET, june) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_sun.py" startline="199" endline="208">
def test_impossible_elevation(hass : HomeAssistant) -> None :
INDENT
    hass.config.latitude = 69.6
    hass.config.longitude = 18.8
    hass.config.elevation = 10000000
    june = datetime(2016, 6, 1, tzinfo = dt_util.UTC)
    with pytest.raises(ValueError) :
    INDENT
        sun.get_astral_event_next(hass, SUN_EVENT_SUNRISE, june)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="10" endline="22">
def test_override_single_value() -> None :
INDENT
    store = EV({ent : {"key" : "value"}})
    store.get.cache_clear()
    assert store.get(ent) == {"key" : "value"}
    assert store.get.cache_info().currsize == 1
    assert store.get.cache_info().misses == 1
    assert store.get(ent) == {"key" : "value"}
    assert store.get.cache_info().currsize == 1
    assert store.get.cache_info().misses == 1
    assert store.get.cache_info().hits == 1
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="23" endline="28">
def test_override_by_domain() -> None :
INDENT
    store = EV(domain = {"test" : {"key" : "value"}})
    assert store.get(ent) == {"key" : "value"}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="29" endline="34">
def test_override_by_glob() -> None :
INDENT
    store = EV(glob = {"test.?e*" : {"key" : "value"}})
    assert store.get(ent) == {"key" : "value"}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="35" endline="40">
def test_glob_overrules_domain() -> None :
INDENT
    store = EV(domain = {"test" : {"key" : "domain"}}, glob = {"test.?e*" : {"key" : "glob"}})
    assert store.get(ent) == {"key" : "glob"}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="41" endline="50">
def test_exact_overrules_domain() -> None :
INDENT
    store = EV(
        exact = {"test.test" : {"key" : "exact"}},
        domain = {"test" : {"key" : "domain"}},
        glob = {"test.?e*" : {"key" : "glob"}},
        )
    assert store.get(ent) == {"key" : "exact"}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="51" endline="64">
def test_merging_values() -> None :
INDENT
    store = EV(
        exact = {"test.test" : {"exact_key" : "exact"}},
        domain = {"test" : {"domain_key" : "domain"}},
        glob = {"test.?e*" : {"glob_key" : "glob"}},
        )
    assert store.get(ent) == {
        "exact_key" : "exact",
        "domain_key" : "domain",
        "glob_key" : "glob",
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_entity_values.py" startline="65" endline="72">
def test_glob_order() -> None :
INDENT
    glob = OrderedDict()
    glob ["test.*est"] = {"value" : "first"}
    glob ["test.*"] = {"value" : "second"}
    store = EV(glob = glob)
    assert store.get(ent) == {"value" : "second"}
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="8" endline="13">
def test_has_location_with_invalid_states() -> None :
INDENT
    for state in (None, 1, "hello", object) :
    INDENT
        assert not location.has_location(state)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="14" endline="21">
def test_has_location_with_states_with_invalid_locations() -> None :
INDENT
    state = State(
        "hello.world", "invalid", {ATTR_LATITUDE : "no number", ATTR_LONGITUDE : 123.12})
    assert not location.has_location(state)
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="22" endline="29">
def test_has_location_with_states_with_valid_location() -> None :
INDENT
    state = State(
        "hello.world", "invalid", {ATTR_LATITUDE : 123.12, ATTR_LONGITUDE : 123.12})
    assert location.has_location(state)
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="30" endline="40">
def test_closest_with_no_states_with_location() -> None :
INDENT
    state = State("light.test", "on")
    state2 = State(
        "light.test", "on", {ATTR_LATITUDE : "invalid", ATTR_LONGITUDE : 123.45})
    state3 = State("light.test", "on", {ATTR_LONGITUDE : 123.45})
    assert location.closest(123.45, 123.45, [state, state2, state3]) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="41" endline="48">
def test_closest_returns_closest() -> None :
INDENT
    state = State("light.test", "on", {ATTR_LATITUDE : 124.45, ATTR_LONGITUDE : 124.45})
    state2 = State("light.test", "on", {ATTR_LATITUDE : 125.45, ATTR_LONGITUDE : 125.45})
    assert state == location.closest(123.45, 123.45, [state, state2])
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="49" endline="56">
async def test_coordinates_function_as_attributes(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set(
        "test.object", "happy", {"latitude" : 32.87336, "longitude" : - 117.22943})
    assert location.find_coordinates(hass, "test.object") == "32.87336,-117.22943"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="57" endline="62">
async def test_coordinates_function_as_state(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set("test.object", "32.87336,-117.22943")
    assert location.find_coordinates(hass, "test.object") == "32.87336,-117.22943"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="63" endline="76">
async def test_coordinates_function_device_tracker_in_zone(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set(
        "zone.home",
        "zoning",
        {"latitude" : 32.87336, "longitude" : - 117.22943},
        )
    hass.states.async_set("device_tracker.device", "home")
    assert (
        location.find_coordinates(hass, "device_tracker.device")
        == "32.87336,-117.22943")
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="77" endline="91">
async def test_coordinates_function_zone_friendly_name(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set(
        "zone.home",
        "zoning",
        {"latitude" : 32.87336, "longitude" : - 117.22943, ATTR_FRIENDLY_NAME : "my_home"},
        )
    hass.states.async_set(
        "test.object",
        "my_home",
        )
    assert location.find_coordinates(hass, "test.object") == "32.87336,-117.22943"
    assert location.find_coordinates(hass, "my_home") == "32.87336,-117.22943"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="92" endline="106">
async def test_coordinates_function_device_tracker_from_input_select(
hass : HomeAssistant,
) -> None :
INDENT
    hass.states.async_set(
        "input_select.select",
        "device_tracker.device",
        {"options" : "device_tracker.device"},
        )
    hass.states.async_set("device_tracker.device", "32.87336,-117.22943")
    assert (
        location.find_coordinates(hass, "input_select.select") == "32.87336,-117.22943")
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="107" endline="116">
def test_coordinates_function_returns_none_on_recursion(hass : HomeAssistant) -> None :
INDENT
    hass.states.async_set(
        "test.first",
        "test.second",
        )
    hass.states.async_set("test.second", "test.first")
    assert location.find_coordinates(hass, "test.first") is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="117" endline="127">
async def test_coordinates_function_returns_state_if_no_coords(
hass : HomeAssistant,
) -> None :
INDENT
    hass.states.async_set(
        "test.object",
        "abc",
        )
    assert location.find_coordinates(hass, "test.object") == "abc"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_location.py" startline="128" endline="131">
def test_coordinates_function_returns_input_if_no_coords(hass : HomeAssistant) -> None :
INDENT
    assert location.find_coordinates(hass, "test.abc") == "test.abc"
    assert location.find_coordinates(hass, "abc") == "abc"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_normalized_name_base_registry.py" startline="13" endline="17">
def registry_items() :
INDENT
    return NormalizedNameBaseRegistryItems [NormalizedNameBaseRegistryEntry]()

DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_normalized_name_base_registry.py" startline="18" endline="24">
def test_normalize_name() :
INDENT
    assert normalize_name("Hello World") == "helloworld"
    assert normalize_name("HELLO WORLD") == "helloworld"
    assert normalize_name("  Hello   World  ") == "helloworld"
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_normalized_name_base_registry.py" startline="25" endline="51">
def test_registry_items(
registry_items : NormalizedNameBaseRegistryItems [NormalizedNameBaseRegistryEntry],
) :
INDENT
    entry = NormalizedNameBaseRegistryEntry(
        name = "Hello World", normalized_name = "helloworld")
    registry_items ["key"] = entry
    assert registry_items ["key"] == entry
    assert list(registry_items.values()) == [entry]
    assert registry_items.get_by_name("Hello World") == entry
    entry2 = NormalizedNameBaseRegistryEntry(
        name = "Hello World 2", normalized_name = "helloworld2")
    registry_items ["key"] = entry2
    assert registry_items ["key"] == entry2
    assert list(registry_items.values()) == [entry2]
    assert registry_items.get_by_name("Hello World 2") == entry2
    del registry_items ["key"]
    assert "key" not in registry_items
    assert list(registry_items.values()) == []
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_normalized_name_base_registry.py" startline="52" endline="68">
def test_key_already_in_use(
registry_items : NormalizedNameBaseRegistryItems [NormalizedNameBaseRegistryEntry],
) :
INDENT
    entry = NormalizedNameBaseRegistryEntry(
        name = "Hello World", normalized_name = "helloworld")
    registry_items ["key"] = entry

    with pytest.raises(ValueError) :
    INDENT
        entry = NormalizedNameBaseRegistryEntry(
            name = "Hello World 2", normalized_name = "helloworld2")
        registry_items ["key2"] = entry
        registry_items ["key"] = entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_temperature.py" startline="17" endline="25">
def test_temperature_not_a_number(hass : HomeAssistant) -> None :
INDENT
    temp = "Temperature"
    with pytest.raises(Exception) as exception :
    INDENT
        display_temp(hass, temp, UnitOfTemperature.CELSIUS, PRECISION_HALVES)
    DEDENT
    assert f"Temperature is not a number: {temp}" in str(exception.value)
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_temperature.py" startline="26" endline="30">
def test_celsius_halves(hass : HomeAssistant) -> None :
INDENT
    assert display_temp(hass, TEMP, UnitOfTemperature.CELSIUS, PRECISION_HALVES) == 24.5
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_temperature.py" startline="31" endline="35">
def test_celsius_tenths(hass : HomeAssistant) -> None :
INDENT
    assert display_temp(hass, TEMP, UnitOfTemperature.CELSIUS, PRECISION_TENTHS) == 24.6
DEDENT
</source>
<source file="systems/Home Assistant/tests/helpers/test_temperature.py" startline="36" endline="38">
def test_fahrenheit_wholes(hass : HomeAssistant) -> None :
INDENT
    assert display_temp(hass, TEMP, UnitOfTemperature.FAHRENHEIT, PRECISION_WHOLE) == - 4
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_standalone.py" startline="6" endline="8">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_integration_platform/config_flow.py" startline="6" endline="7">
async def _async_has_devices(hass : HomeAssistant) -> bool :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_integration_platform/__init__.py" startline="8" endline="10">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_package/__init__.py" startline="8" endline="10">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_embedded/switch.py" startline="4" endline="7">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    """Find and return test switches."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_embedded/__init__.py" startline="6" endline="8">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/switch.py" startline="13" endline="27">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockToggleEntity("AC", STATE_ON),
            MockToggleEntity("AC", STATE_OFF),
            MockToggleEntity(None, STATE_OFF),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/switch.py" startline="28" endline="32">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/lock.py" startline="13" endline="36">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        {}
        if empty else {
            "support_open" : MockLock(
                name = "Support open Lock",
                is_locked = True,
                supported_features = LockEntityFeature.OPEN,
                unique_id = "unique_support_open",
                ),
            "no_support_open" : MockLock(
                name = "No support open Lock",
                is_locked = True,
                supported_features = 0,
                unique_id = "unique_no_support_open",
                ),
            })

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/lock.py" startline="37" endline="43">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(list(ENTITIES.values()))

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/lock.py" startline="48" endline="51">
def code_format(self) -> str | None :
INDENT
    return self._handle("code_format")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/lock.py" startline="53" endline="56">
def is_locked(self) :
INDENT
    return self._handle("is_locked")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/lock.py" startline="58" endline="60">
def supported_features(self) :
INDENT
    return self._handle("supported_features")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/date.py" startline="21" endline="24">
def native_value(self) :
INDENT
    return self._handle("native_value")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/date.py" startline="25" endline="29">
def set_value(self, value : date) -> None :
INDENT
    self._values ["native_value"] = value

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/date.py" startline="30" endline="46">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockDateEntity(
                name = "test",
                unique_id = UNIQUE_DATE,
                native_value = date(2020, 1, 1),
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/date.py" startline="47" endline="51">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/event.py" startline="17" endline="21">
def event_types(self) -> list [str] :
INDENT
    return self._handle("event_types")

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/event.py" startline="22" endline="38">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockEventEntity(
                name = "doorbell",
                unique_id = "unique_doorbell",
                event_types = ["short_press", "long_press"],
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/event.py" startline="39" endline="43">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/remote.py" startline="14" endline="28">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockRemote("TV", STATE_ON),
            MockRemote("DVD", STATE_OFF),
            MockRemote(None, STATE_OFF),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/remote.py" startline="29" endline="35">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/button.py" startline="22" endline="26">
def press(self) -> None :
INDENT
    _LOGGER.info("The button has been pressed")

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/button.py" startline="27" endline="42">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockButtonEntity(
                name = "button 1",
                unique_id = "unique_button_1",
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/button.py" startline="43" endline="47">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="24" endline="45">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        {}
        if empty else {
            "arm_code" : MockAlarm(
                name = "Alarm arm code",
                code_arm_required = True,
                unique_id = "unique_arm_code",
                ),
            "no_arm_code" : MockAlarm(
                name = "Alarm no arm code",
                code_arm_required = False,
                unique_id = "unique_no_arm_code",
                ),
            })

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="46" endline="52">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(list(ENTITIES.values()))

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="56" endline="61">
def __init__(self, ** values) :
INDENT
    self._state = None
    MockEntity.__init__(self, ** values)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="63" endline="66">
def code_arm_required(self) :
INDENT
    return self._handle("code_arm_required")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="68" endline="71">
def state(self) :
INDENT
    return self._state
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="73" endline="82">
def supported_features(self) -> AlarmControlPanelEntityFeature :
INDENT
    return (
        AlarmControlPanelEntityFeature.ARM_HOME
        | AlarmControlPanelEntityFeature.ARM_AWAY
        | AlarmControlPanelEntityFeature.ARM_NIGHT
        | AlarmControlPanelEntityFeature.TRIGGER
        | AlarmControlPanelEntityFeature.ARM_VACATION)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="83" endline="87">
def alarm_arm_away(self, code = None) :
INDENT
    self._state = STATE_ALARM_ARMED_AWAY
    self.schedule_update_ha_state()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="88" endline="92">
def alarm_arm_home(self, code = None) :
INDENT
    self._state = STATE_ALARM_ARMED_HOME
    self.schedule_update_ha_state()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="93" endline="97">
def alarm_arm_night(self, code = None) :
INDENT
    self._state = STATE_ALARM_ARMED_NIGHT
    self.schedule_update_ha_state()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="98" endline="102">
def alarm_arm_vacation(self, code = None) :
INDENT
    self._state = STATE_ALARM_ARMED_VACATION
    self.schedule_update_ha_state()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="103" endline="108">
def alarm_disarm(self, code = None) :
INDENT
    if code == "1234" :
    INDENT
        self._state = STATE_ALARM_DISARMED
        self.schedule_update_ha_state()
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/alarm_control_panel.py" startline="109" endline="112">
def alarm_trigger(self, code = None) :
INDENT
    self._state = STATE_ALARM_TRIGGERED
    self.schedule_update_ha_state()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/datetime.py" startline="21" endline="24">
def native_value(self) :
INDENT
    return self._handle("native_value")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/datetime.py" startline="25" endline="29">
def set_value(self, value : datetime) -> None :
INDENT
    self._values ["native_value"] = value

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/datetime.py" startline="30" endline="46">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockDateTimeEntity(
                name = "test",
                unique_id = UNIQUE_DATETIME,
                native_value = datetime(2020, 1, 1, 1, 2, 3, tzinfo = UTC),
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/datetime.py" startline="47" endline="51">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="8" endline="12">
async def async_get_scanner(hass, config) :
INDENT
    return SCANNER

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="16" endline="22">
def __init__(self) :
INDENT
    self.connected = False
    self._hostname = "test.hostname.org"
    self._ip_address = "0.0.0.0"
    self._mac_address = "ad:de:ef:be:ed:fe"
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="24" endline="27">
def source_type(self) :
INDENT
    return SourceType.ROUTER
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="29" endline="35">
def battery_level(self) :
INDENT
    return 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="37" endline="40">
def ip_address(self) -> str :
INDENT
    return self._ip_address
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="42" endline="45">
def mac_address(self) -> str :
INDENT
    return self._mac_address
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="47" endline="50">
def hostname(self) -> str :
INDENT
    return self._hostname
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="52" endline="55">
def is_connected(self) :
INDENT
    return self.connected
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="56" endline="61">
def set_connected(self) :
INDENT
    self.connected = True
    self.async_schedule_update_ha_state()

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="62" endline="67">
async def async_setup_entry(hass, config_entry, async_add_entities) :
INDENT
    entity = MockScannerEntity()
    async_add_entities([entity])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="71" endline="74">
def __init__(self) :
INDENT
    self.devices_home = []
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="75" endline="78">
def come_home(self, device) :
INDENT
    self.devices_home.append(device)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="79" endline="82">
def leave_home(self, device) :
INDENT
    self.devices_home.remove(device)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="83" endline="86">
def reset(self) :
INDENT
    self.devices_home = []
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="87" endline="90">
def scan_devices(self) :
INDENT
    return list(self.devices_home)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/device_tracker.py" startline="91" endline="98">
def get_device_name(self, device) :
INDENT
    return None if device == "DEV1" else device.lower()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/time.py" startline="21" endline="24">
def native_value(self) :
INDENT
    return self._handle("native_value")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/time.py" startline="25" endline="29">
def set_value(self, value : time) -> None :
INDENT
    self._values ["native_value"] = value

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/time.py" startline="30" endline="46">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockTimeEntity(
                name = "test",
                unique_id = UNIQUE_TIME,
                native_value = time(1, 2, 3),
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/time.py" startline="47" endline="51">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="6" endline="12">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback([TestImageProcessing("camera.demo_camera", "Test")])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="16" endline="22">
def __init__(self, camera_entity, name) :
INDENT
    self._name = name
    self._camera = camera_entity
    self._count = 0
    self._image = ""
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="24" endline="27">
def should_poll(self) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="29" endline="32">
def camera_entity(self) :
INDENT
    return self._camera
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="34" endline="37">
def name(self) :
INDENT
    return self._name
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="39" endline="42">
def state(self) :
INDENT
    return self._count
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="44" endline="47">
def extra_state_attributes(self) :
INDENT
    return {"image" : self._image}
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/image_processing.py" startline="48" endline="51">
def process_image(self, image) :
INDENT
    self._image = image
    self._count += 1
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/select.py" startline="22" endline="25">
def current_option(self) :
INDENT
    return self._handle("current_option")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/select.py" startline="27" endline="30">
def options(self) -> list :
INDENT
    return self._handle("options")
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/select.py" startline="31" endline="35">
def select_option(self, option : str) -> None :
INDENT
    self._attr_current_option = option

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/select.py" startline="36" endline="58">
def init(empty = False) :
INDENT
    global ENTITIES
    ENTITIES = (
        []
        if empty else [
            MockSelectEntity(
                name = "select 1",
                unique_id = "unique_select_1",
                options = ["option 1", "option 2", "option 3"],
                current_option = "option 1",
                ),
            MockSelectEntity(
                name = "select 2",
                unique_id = "unique_select_2",
                options = ["option 1", "option 2", "option 3"],
                ),
            ])

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test/select.py" startline="59" endline="63">
async def async_setup_platform(
hass, config, async_add_entities_callback, discovery_info = None
) :
INDENT
    async_add_entities_callback(ENTITIES)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_package_loaded_loop/config_flow.py" startline="6" endline="7">
async def _async_has_devices(hass : HomeAssistant) -> bool :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_package_loaded_loop/__init__.py" startline="5" endline="7">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_integration_frame/__init__.py" startline="8" endline="12">
def call_get_integration_logger(fallback_name : str) -> logging.Logger :
INDENT
    return frame.get_integration_logger(fallback_name)

DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_integration_frame/__init__.py" startline="13" endline="15">
def call_get_integration_frame() -> frame.IntegrationFrame :
INDENT
    return frame.get_integration_frame()
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_constant_deprecation/__init__.py" startline="7" endline="9">
def import_deprecated_constant(module : ModuleType, constant_name : str) -> Any :
INDENT
    return getattr(module, constant_name)
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_package_loaded_executor/config_flow.py" startline="6" endline="7">
async def _async_has_devices(hass : HomeAssistant) -> bool :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/testing_config/custom_components/test_package_loaded_executor/__init__.py" startline="8" endline="10">
async def async_setup(hass, config) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/test_main.py" startline="10" endline="66">
def test_validate_python(mock_exit) -> None :
INDENT
    with patch("sys.version_info", new_callable = PropertyMock(return_value = (2, 7, 8))) :
    INDENT
        main.validate_python()
        assert mock_exit.called is True
    DEDENT
    mock_exit.reset_mock()
    with patch("sys.version_info", new_callable = PropertyMock(return_value = (3, 2, 0))) :
    INDENT
        main.validate_python()
        assert mock_exit.called is True
    DEDENT
    mock_exit.reset_mock()
    with patch("sys.version_info", new_callable = PropertyMock(return_value = (3, 4, 2))) :
    INDENT
        main.validate_python()
        assert mock_exit.called is True
    DEDENT
    mock_exit.reset_mock()
    with patch("sys.version_info", new_callable = PropertyMock(return_value = (3, 5, 2))) :
    INDENT
        main.validate_python()
        assert mock_exit.called is True
    DEDENT
    mock_exit.reset_mock()
    with patch(
        "sys.version_info",
        new_callable = PropertyMock(
            return_value = (REQUIRED_PYTHON_VER [0] - 1,) + REQUIRED_PYTHON_VER [1 :]),
        ) :
    INDENT
        main.validate_python()
        assert mock_exit.called is True
    DEDENT
    mock_exit.reset_mock()
    with patch(
        "sys.version_info", new_callable = PropertyMock(return_value = REQUIRED_PYTHON_VER)) :
    INDENT
        main.validate_python()
        assert mock_exit.called is False
    DEDENT
    mock_exit.reset_mock()
    with patch(
        "sys.version_info",
        new_callable = PropertyMock(
            return_value = (REQUIRED_PYTHON_VER [: 2]) + (REQUIRED_PYTHON_VER [2] + 1,)),
        ) :
    INDENT
        main.validate_python()
        assert mock_exit.called is False
    DEDENT
    mock_exit.reset_mock()

DEDENT
</source>
<source file="systems/Home Assistant/tests/test_main.py" startline="68" endline="88">
def test_skip_pip_mutually_exclusive(mock_exit) -> None :
INDENT
    def parse_args(* args) :
    INDENT
        with patch("sys.argv", ["python"] + list(args)) :
        INDENT
            return main.get_arguments()
        DEDENT
    DEDENT
    args = parse_args("--skip-pip")
    assert args.skip_pip is True
    args = parse_args("--skip-pip-packages", "foo")
    assert args.skip_pip is False
    assert args.skip_pip_packages == ["foo"]
    args = parse_args("--skip-pip-packages", "foo-asd,bar-xyz")
    assert args.skip_pip is False
    assert args.skip_pip_packages == ["foo-asd", "bar-xyz"]
    assert mock_exit.called is False
    args = parse_args("--skip-pip", "--skip-pip-packages", "foo")
    assert mock_exit.called is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/test_main.py" startline="71" endline="74">
def parse_args(* args) :
INDENT
    with patch("sys.argv", ["python"] + list(args)) :
    INDENT
        return main.get_arguments()
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/patch_time.py" startline="12" endline="16">
def _utcnow() -> datetime.datetime :
INDENT
    return datetime.datetime.now(datetime.UTC)

DEDENT
</source>
<source file="systems/Home Assistant/tests/patch_time.py" startline="17" endline="21">
def _monotonic() -> float :
INDENT
    return time.monotonic()

DEDENT
</source>
<source file="systems/Home Assistant/tests/test_exceptions.py" startline="15" endline="53">
def test_conditionerror_format() -> None :
INDENT
    error1 = ConditionErrorMessage("test", "A test error")
    assert str(error1) == "In 'test' condition: A test error"
    error2 = ConditionErrorMessage("test", "Another error")
    assert str(error2) == "In 'test' condition: Another error"
    error_pos1 = ConditionErrorIndex("box", index = 0, total = 2, error = error1)
    assert (
        str(error_pos1)
        == """In 'box' (item 1 of 2):
  In 'test' condition: A test error""")
    error_pos2 = ConditionErrorIndex("box", index = 1, total = 2, error = error2)
    assert (
        str(error_pos2)
        == """In 'box' (item 2 of 2):
  In 'test' condition: Another error""")
    error_container1 = ConditionErrorContainer("box", errors = [error_pos1, error_pos2])
    assert (
        str(error_container1)
        == """In 'box' (item 1 of 2):
  In 'test' condition: A test error
In 'box' (item 2 of 2):
  In 'test' condition: Another error""")
    error_pos3 = ConditionErrorIndex("box", index = 0, total = 1, error = error1)
    assert (
        str(error_pos3)
        == """In 'box':
  In 'test' condition: A test error""")
DEDENT
</source>
<source file="systems/Home Assistant/tests/test_exceptions.py" startline="61" endline="64">
def test_template_message(arg : str | Exception, expected : str) -> None :
INDENT
    template_error = TemplateError(arg)
    assert str(template_error) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_sorted_platforms.py" startline="45" endline="58">
def test_enforce_sorted_platforms(
linter : UnittestLinter,
enforce_sorted_platforms_checker : BaseChecker,
code : str,
) -> None :
INDENT
    root_node = astroid.parse(code, "homeassistant.components.pylint_test")
    walker = ASTWalker(linter)
    walker.add_checker(enforce_sorted_platforms_checker)
    with assert_no_messages(linter) :
    INDENT
        walker.walk(root_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_sorted_platforms.py" startline="59" endline="86">
def test_enforce_sorted_platforms_bad(
linter : UnittestLinter,
enforce_sorted_platforms_checker : BaseChecker,
) -> None :
INDENT
    assign_node = astroid.extract_node(
        """
    PLATFORMS = [Platform.SENSOR, Platform.BINARY_SENSOR, Platform.BUTTON]
    """,
        "homeassistant.components.pylint_test",
        )
    with assert_adds_messages(
        linter,
        MessageTest(
            msg_id = "hass-enforce-sorted-platforms",
            line = 2,
            node = assign_node,
            args = None,
            confidence = UNDEFINED,
            col_offset = 0,
            end_line = 2,
            end_col_offset = 70,
            ),
        ) :
    INDENT
        enforce_sorted_platforms_checker.visit_assign(assign_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_sorted_platforms.py" startline="87" endline="112">
def test_enforce_sorted_platforms_bad_typed(
linter : UnittestLinter,
enforce_sorted_platforms_checker : BaseChecker,
) -> None :
INDENT
    assign_node = astroid.extract_node(
        """
    PLATFORMS: list[str] = [Platform.SENSOR, Platform.BINARY_SENSOR, Platform.BUTTON]
    """,
        "homeassistant.components.pylint_test",
        )
    with assert_adds_messages(
        linter,
        MessageTest(
            msg_id = "hass-enforce-sorted-platforms",
            line = 2,
            node = assign_node,
            args = None,
            confidence = UNDEFINED,
            col_offset = 0,
            end_line = 2,
            end_col_offset = 81,
            ),
        ) :
    INDENT
        enforce_sorted_platforms_checker.visit_annassign(assign_node)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_coordinator_module.py" startline="44" endline="55">
def test_enforce_coordinator_module_good(
linter : UnittestLinter, enforce_coordinator_module_checker : BaseChecker, code : str
) -> None :
INDENT
    root_node = astroid.parse(code, "homeassistant.components.pylint_test.coordinator")
    walker = ASTWalker(linter)
    walker.add_checker(enforce_coordinator_module_checker)
    with assert_no_messages(linter) :
    INDENT
        walker.walk(root_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_coordinator_module.py" startline="56" endline="89">
def test_enforce_coordinator_module_bad_simple(
linter : UnittestLinter,
enforce_coordinator_module_checker : BaseChecker,
) -> None :
INDENT
    root_node = astroid.parse(
        """
    class DataUpdateCoordinator:
        pass

    class TestCoordinator(DataUpdateCoordinator):
        pass
    """,
        "homeassistant.components.pylint_test",
        )
    walker = ASTWalker(linter)
    walker.add_checker(enforce_coordinator_module_checker)
    with assert_adds_messages(
        linter,
        MessageTest(
            msg_id = "hass-enforce-coordinator-module",
            line = 5,
            node = root_node.body [1],
            args = None,
            confidence = UNDEFINED,
            col_offset = 0,
            end_line = 5,
            end_col_offset = 21,
            ),
        ) :
    INDENT
        walker.walk(root_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_enforce_coordinator_module.py" startline="90" endline="134">
def test_enforce_coordinator_module_bad_nested(
linter : UnittestLinter,
enforce_coordinator_module_checker : BaseChecker,
) -> None :
INDENT
    root_node = astroid.parse(
        """
    class DataUpdateCoordinator:
        pass

    class TestCoordinator(DataUpdateCoordinator):
        pass

    class NopeCoordinator(TestCoordinator):
        pass
    """,
        "homeassistant.components.pylint_test",
        )
    walker = ASTWalker(linter)
    walker.add_checker(enforce_coordinator_module_checker)
    with assert_adds_messages(
        linter,
        MessageTest(
            msg_id = "hass-enforce-coordinator-module",
            line = 5,
            node = root_node.body [1],
            args = None,
            confidence = UNDEFINED,
            col_offset = 0,
            end_line = 5,
            end_col_offset = 21,
            ),
        MessageTest(
            msg_id = "hass-enforce-coordinator-module",
            line = 8,
            node = root_node.body [2],
            args = None,
            confidence = UNDEFINED,
            col_offset = 0,
            end_line = 8,
            end_col_offset = 21,
            ),
        ) :
    INDENT
        walker.walk(root_node)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_imports.py" startline="41" endline="59">
def test_good_import(
linter : UnittestLinter,
imports_checker : BaseChecker,
module_name : str,
import_from : str,
import_what : str,
) -> None :
INDENT
    import_node = astroid.extract_node(
        f"from {import_from} import {import_what} #@",
        module_name,
        )
    imports_checker.visit_module(import_node.parent)
    with assert_no_messages(linter) :
    INDENT
        imports_checker.visit_importfrom(import_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_imports.py" startline="119" endline="149">
def test_bad_import(
linter : UnittestLinter,
imports_checker : BaseChecker,
module_name : str,
import_from : str,
import_what : str,
error_code : str,
) -> None :
INDENT
    import_node = astroid.extract_node(
        f"from {import_from} import {import_what} #@",
        module_name,
        )
    imports_checker.visit_module(import_node.parent)
    with assert_adds_messages(
        linter,
        pylint.testutils.MessageTest(
            msg_id = error_code,
            node = import_node,
            args = None,
            line = 1,
            col_offset = 0,
            end_line = 1,
            end_col_offset = len(import_from) + len(import_what) + 13,
            ),
        ) :
    INDENT
        imports_checker.visit_importfrom(import_node)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_imports.py" startline="175" endline="195">
def test_good_root_import(
linter : UnittestLinter,
imports_checker : BaseChecker,
import_node : str,
module_name : str,
) -> None :
INDENT
    node = astroid.extract_node(
        f"{import_node} #@",
        module_name,
        )
    imports_checker.visit_module(node.parent)
    with assert_no_messages(linter) :
    INDENT
        if import_node.startswith("import") :
        INDENT
            imports_checker.visit_import(node)
        DEDENT
        if import_node.startswith("from") :
        INDENT
            imports_checker.visit_importfrom(node)

        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/test_imports.py" startline="225" endline="254">
def test_bad_root_import(
linter : UnittestLinter,
imports_checker : BaseChecker,
import_node : str,
module_name : str,
) -> None :
INDENT
    node = astroid.extract_node(
        f"{import_node} #@",
        module_name,
        )
    imports_checker.visit_module(node.parent)
    with assert_adds_messages(
        linter,
        pylint.testutils.MessageTest(
            msg_id = "hass-component-root-import",
            node = node,
            args = None,
            line = 1,
            col_offset = 0,
            end_line = 1,
            end_col_offset = len(import_node),
            ),
        ) :
    INDENT
        if import_node.startswith("import") :
        INDENT
            imports_checker.visit_import(node)
        DEDENT
        if import_node.startswith("from") :
        INDENT
            imports_checker.visit_importfrom(node)
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="15" endline="28">
def _load_plugin_from_file(module_name : str, file : str) -> ModuleType :
INDENT
    spec = spec_from_file_location(
        module_name,
        str(BASE_PATH.joinpath(file)),
        )
    assert spec and spec.loader
    module = module_from_spec(spec)
    sys.modules [module_name] = module
    spec.loader.exec_module(module)
    return module

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="30" endline="37">
def hass_enforce_type_hints_fixture() -> ModuleType :
INDENT
    return _load_plugin_from_file(
        "hass_enforce_type_hints",
        "pylint/plugins/hass_enforce_type_hints.py",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="39" endline="43">
def linter_fixture() -> UnittestLinter :
INDENT
    return UnittestLinter()

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="45" endline="51">
def type_hint_checker_fixture(hass_enforce_type_hints, linter) -> BaseChecker :
INDENT
    type_hint_checker = hass_enforce_type_hints.HassTypeHintChecker(linter)
    type_hint_checker.module = "homeassistant.components.pylint_test"
    return type_hint_checker

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="53" endline="60">
def hass_imports_fixture() -> ModuleType :
INDENT
    return _load_plugin_from_file(
        "hass_imports",
        "pylint/plugins/hass_imports.py",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="62" endline="68">
def imports_checker_fixture(hass_imports, linter) -> BaseChecker :
INDENT
    type_hint_checker = hass_imports.HassImportsFormatChecker(linter)
    type_hint_checker.module = "homeassistant.components.pylint_test"
    return type_hint_checker

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="70" endline="77">
def hass_enforce_super_call_fixture() -> ModuleType :
INDENT
    return _load_plugin_from_file(
        "hass_enforce_super_call",
        "pylint/plugins/hass_enforce_super_call.py",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="79" endline="85">
def super_call_checker_fixture(hass_enforce_super_call, linter) -> BaseChecker :
INDENT
    super_call_checker = hass_enforce_super_call.HassEnforceSuperCallChecker(linter)
    super_call_checker.module = "homeassistant.components.pylint_test"
    return super_call_checker

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="87" endline="94">
def hass_enforce_sorted_platforms_fixture() -> ModuleType :
INDENT
    return _load_plugin_from_file(
        "hass_enforce_sorted_platforms",
        "pylint/plugins/hass_enforce_sorted_platforms.py",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="96" endline="106">
def enforce_sorted_platforms_checker_fixture(
hass_enforce_sorted_platforms, linter
) -> BaseChecker :
INDENT
    enforce_sorted_platforms_checker = (
        hass_enforce_sorted_platforms.HassEnforceSortedPlatformsChecker(linter))
    enforce_sorted_platforms_checker.module = "homeassistant.components.pylint_test"
    return enforce_sorted_platforms_checker

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="108" endline="115">
def hass_enforce_coordinator_module_fixture() -> ModuleType :
INDENT
    return _load_plugin_from_file(
        "hass_enforce_coordinator_module",
        "pylint/plugins/hass_enforce_coordinator_module.py",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/conftest.py" startline="117" endline="125">
def enforce_coordinator_module_fixture(
hass_enforce_coordinator_module, linter
) -> BaseChecker :
INDENT
    enforce_coordinator_module_checker = (
        hass_enforce_coordinator_module.HassEnforceCoordinatorModule(linter))
    enforce_coordinator_module_checker.module = "homeassistant.components.pylint_test"
    return enforce_coordinator_module_checker
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/__init__.py" startline="9" endline="14">
def assert_no_messages(linter : UnittestLinter) :
INDENT
    with assert_adds_messages(linter) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/pylint/__init__.py" startline="16" endline="32">
def assert_adds_messages(linter : UnittestLinter, * messages) :
INDENT
    yield
    got = linter.release_messages()
    no_msg = "No message."
    expected = "\n".join(repr(m) for m in messages) or no_msg
    got_str = "\n".join(repr(m) for m in got) or no_msg
    msg = (
        "Expected messages did not match actual.\n"
        f"\nExpected:\n{expected}\n\nGot:\n{got_str}\n")
    assert got == list(messages), msg
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="69" endline="87">
def config_entry_hub() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_255",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/255/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/255/#",
            CONF_DEVICE_DESC : "Hub",
            CONF_DEVICE_ID : 255,
            CONF_DEVICE_NAME : "Hub DROP-1_C0FFEE",
            CONF_DEVICE_TYPE : "hub",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="88" endline="106">
def config_entry_salt() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_8",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/8/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/8/#",
            CONF_DEVICE_DESC : "Salt Sensor",
            CONF_DEVICE_ID : 8,
            CONF_DEVICE_NAME : "Salt Sensor",
            CONF_DEVICE_TYPE : "salt",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="107" endline="125">
def config_entry_leak() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_20",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/20/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/20/#",
            CONF_DEVICE_DESC : "Leak Detector",
            CONF_DEVICE_ID : 20,
            CONF_DEVICE_NAME : "Leak Detector",
            CONF_DEVICE_TYPE : "leak",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="126" endline="144">
def config_entry_softener() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_0",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/0/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/0/#",
            CONF_DEVICE_DESC : "Softener",
            CONF_DEVICE_ID : 0,
            CONF_DEVICE_NAME : "Softener",
            CONF_DEVICE_TYPE : "soft",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="145" endline="163">
def config_entry_filter() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_4",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/4/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/4/#",
            CONF_DEVICE_DESC : "Filter",
            CONF_DEVICE_ID : 4,
            CONF_DEVICE_NAME : "Filter",
            CONF_DEVICE_TYPE : "filt",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="164" endline="182">
def config_entry_protection_valve() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_78",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/78/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/78/#",
            CONF_DEVICE_DESC : "Protection Valve",
            CONF_DEVICE_ID : 78,
            CONF_DEVICE_NAME : "Protection Valve",
            CONF_DEVICE_TYPE : "pv",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="183" endline="201">
def config_entry_pump_controller() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_83",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/83/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/83/#",
            CONF_DEVICE_DESC : "Pump Controller",
            CONF_DEVICE_ID : 83,
            CONF_DEVICE_NAME : "Pump Controller",
            CONF_DEVICE_TYPE : "pc",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/drop_connect/common.py" startline="202" endline="218">
def config_entry_ro_filter() -> ConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "DROP-1_C0FFEE_255",
        data = {
            CONF_COMMAND_TOPIC : "drop_connect/DROP-1_C0FFEE/95/cmd",
            CONF_DATA_TOPIC : "drop_connect/DROP-1_C0FFEE/95/#",
            CONF_DEVICE_DESC : "RO Filter",
            CONF_DEVICE_ID : 95,
            CONF_DEVICE_NAME : "RO Filter",
            CONF_DEVICE_TYPE : "ro",
            CONF_HUB_ID : "DROP-1_C0FFEE",
            CONF_DEVICE_OWNER_ID : "DROP-1_C0FFEE_255",
            },
        version = 1,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/trace/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/motionmount/conftest.py" startline="17" endline="26">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = ZEROCONF_NAME,
        domain = DOMAIN,
        data = {CONF_HOST : HOST, CONF_PORT : PORT},
        unique_id = ZEROCONF_MAC,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/motionmount/conftest.py" startline="28" endline="35">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.motionmount.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/motionmount/conftest.py" startline="37" endline="45">
def mock_motionmount_config_flow() -> Generator [None, MagicMock, None] :
INDENT
    with patch(
        "homeassistant.components.motionmount.config_flow.motionmount.MotionMount",
        autospec = True,
        ) as motionmount_mock :
    INDENT
        client = motionmount_mock.return_value
        yield client
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/brunt/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.brunt.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/leaone/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/jvc_projector/test_binary_sensor.py" startline="13" endline="22">
async def test_entity_state(
hass : HomeAssistant,
entity_registry : er.EntityRegistry,
mock_device : MagicMock,
mock_integration : MockConfigEntry,
) -> None :
INDENT
    entity = hass.states.get(ENTITY_ID)
    assert entity
    assert entity_registry.async_get(entity.entity_id)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/duotecno/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.duotecno.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/hko/conftest.py" startline="12" endline="18">
def hko_config_flow_connect() :
INDENT
    with patch(
        "homeassistant.components.hko.config_flow.HKO.weather",
        return_value = json.loads(load_fixture("hko/rhrread.json")),
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/qbittorrent/conftest.py" startline="11" endline="18">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.qbittorrent.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/qbittorrent/conftest.py" startline="20" endline="26">
def mock_api() -> Generator [requests_mock.Mocker, None, None] :
INDENT
    with requests_mock.Mocker() as mocker :
    INDENT
        mocker.get("http://localhost:8080/api/v2/app/preferences", status_code = 403)
        mocker.get("http://localhost:8080/api/v2/transfer/speedLimitsMode")
        mocker.post("http://localhost:8080/api/v2/auth/login", text = "Ok.")
        yield mocker
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="13" endline="18">
def facebook() :
INDENT
    access_token = "page-access-token"
    return fb.FacebookNotificationService(access_token)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="19" endline="42">
async def test_send_simple_message(hass : HomeAssistant, facebook) -> None :
INDENT
    with requests_mock.Mocker() as mock :
    INDENT
        mock.register_uri(requests_mock.POST, fb.BASE_URL, status_code = HTTPStatus.OK)
        message = "This is just a test"
        target = ["+15555551234"]
        facebook.send_message(message = message, target = target)
        assert mock.called
        assert mock.call_count == 1
        expected_body = {
            "recipient" : {"phone_number" : target [0]},
            "message" : {"text" : message},
            "messaging_type" : "MESSAGE_TAG",
            "tag" : "ACCOUNT_UPDATE",
            }
        assert mock.last_request.json() == expected_body
        expected_params = {"access_token" : ["page-access-token"]}
        assert mock.last_request.qs == expected_params
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="43" endline="68">
async def test_send_multiple_message(hass : HomeAssistant, facebook) -> None :
INDENT
    with requests_mock.Mocker() as mock :
    INDENT
        mock.register_uri(requests_mock.POST, fb.BASE_URL, status_code = HTTPStatus.OK)
        message = "This is just a test"
        targets = ["+15555551234", "+15555551235"]
        facebook.send_message(message = message, target = targets)
        assert mock.called
        assert mock.call_count == 2
        for idx, target in enumerate(targets) :
        INDENT
            request = mock.request_history [idx]
            expected_body = {
                "recipient" : {"phone_number" : target},
                "message" : {"text" : message},
                "messaging_type" : "MESSAGE_TAG",
                "tag" : "ACCOUNT_UPDATE",
                }
            assert request.json() == expected_body
            expected_params = {"access_token" : ["page-access-token"]}
            assert request.qs == expected_params
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="69" endline="126">
async def test_send_message_attachment(hass : HomeAssistant, facebook) -> None :
INDENT
    with requests_mock.Mocker() as mock :
    INDENT
        mock.register_uri(requests_mock.POST, fb.BASE_URL, status_code = HTTPStatus.OK)
        message = "This will be thrown away."
        data = {
            "attachment" : {
                "type" : "image",
                "payload" : {"url" : "http://www.example.com/image.jpg"},
                }}
        target = ["+15555551234"]
        facebook.send_message(message = message, data = data, target = target)
        assert mock.called
        assert mock.call_count == 1
        expected_body = {
            "recipient" : {"phone_number" : target [0]},
            "message" : data,
            "messaging_type" : "MESSAGE_TAG",
            "tag" : "ACCOUNT_UPDATE",
            }
        assert mock.last_request.json() == expected_body
        expected_params = {"access_token" : ["page-access-token"]}
        assert mock.last_request.qs == expected_params
    DEDENT
    async def test_send_targetless_message(hass, facebook) :
    INDENT
        with requests_mock.Mocker() as mock :
        INDENT
            mock.register_uri(
                requests_mock.POST, fb.BASE_URL, status_code = HTTPStatus.OK)
            facebook.send_message(message = "going nowhere")
            assert not mock.called
        DEDENT
    DEDENT
    async def test_send_message_with_400(hass, facebook) :
    INDENT
        with requests_mock.Mocker() as mock :
        INDENT
            mock.register_uri(
                requests_mock.POST,
                fb.BASE_URL,
                status_code = HTTPStatus.BAD_REQUEST,
                json = {
                    "error" : {
                        "message" : "Invalid OAuth access token.",
                        "type" : "OAuthException",
                        "code" : 190,
                        "fbtrace_id" : "G4Da2pFp2Dp",
                        }},
                )
            facebook.send_message(message = "nope!", target = ["+15555551234"])
            assert mock.called
            assert mock.call_count == 1
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="98" endline="107">
async def test_send_targetless_message(hass, facebook) :
INDENT
    with requests_mock.Mocker() as mock :
    INDENT
        mock.register_uri(
            requests_mock.POST, fb.BASE_URL, status_code = HTTPStatus.OK)
        facebook.send_message(message = "going nowhere")
        assert not mock.called
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/facebook/test_notify.py" startline="108" endline="126">
async def test_send_message_with_400(hass, facebook) :
INDENT
    with requests_mock.Mocker() as mock :
    INDENT
        mock.register_uri(
            requests_mock.POST,
            fb.BASE_URL,
            status_code = HTTPStatus.BAD_REQUEST,
            json = {
                "error" : {
                    "message" : "Invalid OAuth access token.",
                    "type" : "OAuthException",
                    "code" : 190,
                    "fbtrace_id" : "G4Da2pFp2Dp",
                    }},
            )
        facebook.send_message(message = "nope!", target = ["+15555551234"])
        assert mock.called
        assert mock.call_count == 1
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/file_upload/conftest.py" startline="9" endline="14">
def large_file_io() -> StringIO :
INDENT
    return StringIO(
        2
        * "Home Assistant is awesome. Open source home automation that puts local control and privacy first.")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/intellifire/conftest.py" startline="11" endline="18">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.intellifire.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/intellifire/conftest.py" startline="20" endline="29">
def mock_fireplace_finder_none() -> Generator [None, MagicMock, None] :
INDENT
    mock_found_fireplaces = Mock()
    mock_found_fireplaces.ips = []
    with patch(
        "homeassistant.components.intellifire.config_flow.AsyncUDPFireplaceFinder.search_fireplace") :
    INDENT
        yield mock_found_fireplaces

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/intellifire/conftest.py" startline="31" endline="40">
def mock_fireplace_finder_single() -> Generator [None, MagicMock, None] :
INDENT
    mock_found_fireplaces = Mock()
    mock_found_fireplaces.ips = ["192.168.1.69"]
    with patch(
        "homeassistant.components.intellifire.config_flow.AsyncUDPFireplaceFinder.search_fireplace") :
    INDENT
        yield mock_found_fireplaces

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/intellifire/conftest.py" startline="42" endline="55">
def mock_intellifire_config_flow() -> Generator [None, MagicMock, None] :
INDENT
    data_mock = Mock()
    data_mock.serial = "12345"
    with patch(
        "homeassistant.components.intellifire.config_flow.IntellifireAPILocal",
        autospec = True,
        ) as intellifire_mock :
    INDENT
        intellifire = intellifire_mock.return_value
        intellifire.data = data_mock
        yield intellifire

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/intellifire/conftest.py" startline="56" endline="60">
def mock_api_connection_error() -> ConnectionError :
INDENT
    ret = ConnectionError()
    ret.args = [ConnectionKey("iftapi.net", 443, False, None, None, None, None)]
    return ret
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/buienradar/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.buienradar.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blebox/test_helpers.py" startline="9" endline="14">
async def test_get_maybe_authenticated_session_none(hass : HomeAssistant) :
INDENT
    session = get_maybe_authenticated_session(hass = hass, username = "", password = "")
    assert session.auth is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blebox/test_helpers.py" startline="15" endline="20">
async def test_get_maybe_authenticated_session_auth(hass : HomeAssistant) :
INDENT
    session = get_maybe_authenticated_session(
        hass = hass, username = "user", password = "password")
    assert isinstance(session.auth, BasicAuth)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/advantage_air/conftest.py" startline="11" endline="16">
def mock_get() :
INDENT
    with patch_get() as mock_get :
    INDENT
        yield mock_get

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/advantage_air/conftest.py" startline="18" endline="21">
def mock_update() :
INDENT
    with patch_update() as mock_get :
    INDENT
        yield mock_get
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sunweg/conftest.py" startline="11" endline="15">
def string_fixture() -> String :
INDENT
    return String("STR1", 450.3, 23.4, 0)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sunweg/conftest.py" startline="17" endline="23">
def mppt_fixture(string_fixture) -> MPPT :
INDENT
    mppt = MPPT("mppt")
    mppt.strings.append(string_fixture)
    return mppt

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sunweg/conftest.py" startline="25" endline="29">
def phase_fixture() -> Phase :
INDENT
    return Phase("PhaseA", 120.0, 3.2, 0, 0)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sunweg/conftest.py" startline="31" endline="52">
def inverter_fixture(phase_fixture, mppt_fixture) -> Inverter :
INDENT
    inverter = Inverter(
        21255,
        "INVERSOR01",
        "J63T233018RE074",
        23.2,
        0.0,
        0.0,
        "MWh",
        0,
        "kWh",
        0.0,
        1,
        0,
        "kW",
        )
    inverter.phases.append(phase_fixture)
    inverter.mppts.append(mppt_fixture)
    return inverter

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sunweg/conftest.py" startline="54" endline="70">
def plant_fixture(inverter_fixture) -> Plant :
INDENT
    plant = Plant(
        123456,
        "Plant #123",
        29.5,
        0.5,
        0,
        12.786912,
        24.0,
        "kWh",
        332.2,
        0.012296,
        datetime(2023, 2, 16, 14, 22, 37),
        )
    plant.inverters.append(inverter_fixture)
    return plant
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/signal_messenger/conftest.py" startline="21" endline="29">
def signal_notification_service(hass : HomeAssistant) -> SignalNotificationService :
INDENT
    hass.config.allowlist_external_urls.add(URL_ATTACHMENT)
    recipients = ["+435565656565"]
    number = "+43443434343"
    client = SignalCliRestApi("http://127.0.0.1:8080", number)
    return SignalNotificationService(hass, recipients, client)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/signal_messenger/conftest.py" startline="31" endline="72">
def signal_requests_mock_factory(requests_mock : Mocker) -> Mocker :
INDENT
    def _signal_requests_mock_factory(
    success_send_result : bool = True, content_length_header : str = None) -> Mocker :
    INDENT
        requests_mock.register_uri(
            "GET",
            "http://127.0.0.1:8080/v1/about",
            status_code = HTTPStatus.OK,
            json = {"versions" : ["v1", "v2"]},
            )
        if success_send_result :
        INDENT
            requests_mock.register_uri(
                "POST",
                "http://127.0.0.1:8080" + SIGNAL_SEND_PATH_SUFIX,
                status_code = HTTPStatus.CREATED,
                )
        DEDENT
        else :
        INDENT
            requests_mock.register_uri(
                "POST",
                "http://127.0.0.1:8080" + SIGNAL_SEND_PATH_SUFIX,
                status_code = HTTPStatus.BAD_REQUEST,
                )
        DEDENT
        if content_length_header is not None :
        INDENT
            requests_mock.register_uri(
                "GET",
                URL_ATTACHMENT,
                status_code = HTTPStatus.OK,
                content = CONTENT,
                headers = {"Content-Length" : content_length_header},
                )
        DEDENT
        else :
        INDENT
            requests_mock.register_uri(
                "GET",
                URL_ATTACHMENT,
                status_code = HTTPStatus.OK,
                content = CONTENT,
                )
        DEDENT
        return requests_mock
    DEDENT
    return _signal_requests_mock_factory
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/signal_messenger/conftest.py" startline="34" endline="71">
def _signal_requests_mock_factory(
success_send_result : bool = True, content_length_header : str = None
) -> Mocker :
INDENT
    requests_mock.register_uri(
        "GET",
        "http://127.0.0.1:8080/v1/about",
        status_code = HTTPStatus.OK,
        json = {"versions" : ["v1", "v2"]},
        )
    if success_send_result :
    INDENT
        requests_mock.register_uri(
            "POST",
            "http://127.0.0.1:8080" + SIGNAL_SEND_PATH_SUFIX,
            status_code = HTTPStatus.CREATED,
            )
    DEDENT
    else :
    INDENT
        requests_mock.register_uri(
            "POST",
            "http://127.0.0.1:8080" + SIGNAL_SEND_PATH_SUFIX,
            status_code = HTTPStatus.BAD_REQUEST,
            )
    DEDENT
    if content_length_header is not None :
    INDENT
        requests_mock.register_uri(
            "GET",
            URL_ATTACHMENT,
            status_code = HTTPStatus.OK,
            content = CONTENT,
            headers = {"Content-Length" : content_length_header},
            )
    DEDENT
    else :
    INDENT
        requests_mock.register_uri(
            "GET",
            URL_ATTACHMENT,
            status_code = HTTPStatus.OK,
            content = CONTENT,
            )
    DEDENT
    return requests_mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="27" endline="30">
def __init__(self, * args, ** kwargs) -> None :
INDENT
    self.available = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="31" endline="34">
async def close(self) :
INDENT
    self.available = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="35" endline="38">
async def connect(self, * args, ** kwargs) :
INDENT
    raise NotImplementedError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="39" endline="43">
async def shell(self, cmd, * args, ** kwargs) :
INDENT
    return None

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="47" endline="50">
def __init__(self, host = ADB_SERVER_HOST, port = DEFAULT_ADB_SERVER_PORT) -> None :
INDENT
    self._devices = []
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="51" endline="57">
async def device(self, serial) :
INDENT
    device = DeviceAsyncFake(serial)
    self._devices.append(device)
    return device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="61" endline="64">
def __init__(self, host = ADB_SERVER_HOST, port = DEFAULT_ADB_SERVER_PORT) -> None :
INDENT
    self._devices = []
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="65" endline="70">
async def device(self, serial) :
INDENT
    self._devices = []
    return None

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="74" endline="77">
def __init__(self, host) -> None :
INDENT
    self.host = host
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="78" endline="82">
async def shell(self, cmd) :
INDENT
    raise NotImplementedError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="83" endline="114">
def patch_connect(success) :
INDENT
    async def connect_success_python(self, * args, ** kwargs) :
    INDENT
        self.available = True
    DEDENT
    async def connect_fail_python(self, * args, ** kwargs) :
    INDENT
        raise OSError
    DEDENT
    if success :
    INDENT
        return {
            KEY_PYTHON : patch(
                f"{__name__}.{ADB_DEVICE_TCP_ASYNC_FAKE}.connect",
                connect_success_python,
                ),
            KEY_SERVER : patch(
                "androidtv.adb_manager.adb_manager_async.ClientAsync",
                ClientAsyncFakeSuccess,
                ),
            }
    DEDENT
    return {
        KEY_PYTHON : patch(
            f"{__name__}.{ADB_DEVICE_TCP_ASYNC_FAKE}.connect", connect_fail_python),
        KEY_SERVER : patch(
            "androidtv.adb_manager.adb_manager_async.ClientAsync", ClientAsyncFakeFail),
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="86" endline="89">
async def connect_success_python(self, * args, ** kwargs) :
INDENT
    self.available = True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="90" endline="93">
async def connect_fail_python(self, * args, ** kwargs) :
INDENT
    raise OSError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="115" endline="153">
def patch_shell(response = None, error = False, mac_eth = False, exc = None) :
INDENT
    async def shell_success(self, cmd, * args, ** kwargs) :
    INDENT
        self.shell_cmd = cmd
        if cmd == CMD_DEVICE_PROPERTIES :
        INDENT
            return PROPS_DEV_INFO
        DEDENT
        if cmd == CMD_MAC_WLAN0 :
        INDENT
            return PROPS_DEV_MAC
        DEDENT
        if cmd == CMD_MAC_ETH0 :
        INDENT
            return PROPS_DEV_MAC if mac_eth else None
        DEDENT
        return response
    DEDENT
    async def shell_fail_python(self, cmd, * args, ** kwargs) :
    INDENT
        self.shell_cmd = cmd
        raise exc or ValueError
    DEDENT
    async def shell_fail_server(self, cmd) :
    INDENT
        self.shell_cmd = cmd
        raise ConnectionResetError
    DEDENT
    if not error :
    INDENT
        return {
            KEY_PYTHON : patch(
                f"{__name__}.{ADB_DEVICE_TCP_ASYNC_FAKE}.shell", shell_success),
            KEY_SERVER : patch(f"{__name__}.{DEVICE_ASYNC_FAKE}.shell", shell_success),
            }
    DEDENT
    return {
        KEY_PYTHON : patch(
            f"{__name__}.{ADB_DEVICE_TCP_ASYNC_FAKE}.shell", shell_fail_python),
        KEY_SERVER : patch(f"{__name__}.{DEVICE_ASYNC_FAKE}.shell", shell_fail_server),
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="118" endline="128">
async def shell_success(self, cmd, * args, ** kwargs) :
INDENT
    self.shell_cmd = cmd
    if cmd == CMD_DEVICE_PROPERTIES :
    INDENT
        return PROPS_DEV_INFO
    DEDENT
    if cmd == CMD_MAC_WLAN0 :
    INDENT
        return PROPS_DEV_MAC
    DEDENT
    if cmd == CMD_MAC_ETH0 :
    INDENT
        return PROPS_DEV_MAC if mac_eth else None
    DEDENT
    return response
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="129" endline="133">
async def shell_fail_python(self, cmd, * args, ** kwargs) :
INDENT
    self.shell_cmd = cmd
    raise exc or ValueError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="134" endline="138">
async def shell_fail_server(self, cmd) :
INDENT
    self.shell_cmd = cmd
    raise ConnectionResetError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="154" endline="183">
def patch_androidtv_update(
state,
current_app,
running_apps,
device,
is_volume_muted,
volume_level,
hdmi_input,
) :
INDENT
    return {
        DEVICE_ANDROIDTV : patch(
            "androidtv.androidtv.androidtv_async.AndroidTVAsync.update",
            return_value = (
                state,
                current_app,
                running_apps,
                device,
                is_volume_muted,
                volume_level,
                hdmi_input,
                ),
            ),
        DEVICE_FIRETV : patch(
            "androidtv.firetv.firetv_async.FireTVAsync.update",
            return_value = (state, current_app, running_apps, hdmi_input),
            ),
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/androidtv/patchers.py" startline="184" endline="188">
def isfile(filepath) :
INDENT
    return filepath.endswith("adbkey")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bmw_connected_drive/conftest.py" startline="13" endline="38">
def bmw_fixture(
request : pytest.FixtureRequest, monkeypatch : pytest.MonkeyPatch
) -> Generator [respx.MockRouter, None, None] :
INDENT
    router = MyBMWMockRouter(
        vehicles_to_load = [
            "WBA00000000DEMO01",
            "WBA00000000DEMO02",
            "WBA00000000DEMO03",
            "WBY00000000REXI01",
            ],
        states = ALL_STATES,
        charging_settings = ALL_CHARGING_SETTINGS,
        )

    monkeypatch.setattr(
        remote_services,
        "_POLLING_CYCLE",
        0,
        )
    with router :
    INDENT
        yield router
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/swiss_public_transport/conftest.py" startline="10" endline="16">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.swiss_public_transport.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gpsd/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.gpsd.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/conftest.py" startline="20" endline="27">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.onewire.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/conftest.py" startline="29" endline="33">
def get_device_id(request : pytest.FixtureRequest) -> str :
INDENT
    return request.param

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/conftest.py" startline="35" endline="55">
def get_config_entry(hass : HomeAssistant) -> ConfigEntry :
INDENT
    config_entry = MockConfigEntry(
        domain = DOMAIN,
        source = SOURCE_USER,
        data = {
            CONF_HOST : "1.2.3.4",
            CONF_PORT : 1234,
            },
        options = {
            "device_options" : {
                "28.222222222222" : {"precision" : "temperature9"},
                "28.222222222223" : {"precision" : "temperature5"},
                }},
        entry_id = "2",
        )
    config_entry.add_to_hass(hass)
    return config_entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/conftest.py" startline="57" endline="62">
def get_owproxy() -> MagicMock :
INDENT
    with patch("homeassistant.components.onewire.onewirehub.protocol.proxy") as owproxy :
    INDENT
        yield owproxy

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/conftest.py" startline="64" endline="70">
def get_owproxy_with_connerror() -> MagicMock :
INDENT
    with patch(
        "homeassistant.components.onewire.onewirehub.protocol.proxy",
        side_effect = ConnError,
        ) as owproxy :
    INDENT
        yield owproxy
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/__init__.py" startline="15" endline="44">
def setup_owproxy_mock_devices(
owproxy : MagicMock, platform : Platform, device_ids : list [str]
) -> None :
INDENT
    main_dir_return_value = []
    sub_dir_side_effect = []
    main_read_side_effect = []
    sub_read_side_effect = []
    for device_id in device_ids :
    INDENT
        _setup_owproxy_mock_device(
            main_dir_return_value,
            sub_dir_side_effect,
            main_read_side_effect,
            sub_read_side_effect,
            device_id,
            platform,
            )

    DEDENT
    dir_side_effect = [main_dir_return_value] + sub_dir_side_effect
    read_side_effect = (
        main_read_side_effect
        + sub_read_side_effect
        + [ProtocolError("Missing injected value")] * 20)
    owproxy.return_value.dir.side_effect = dir_side_effect
    owproxy.return_value.read.side_effect = read_side_effect

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/__init__.py" startline="45" endline="87">
def _setup_owproxy_mock_device(
main_dir_return_value : list,
sub_dir_side_effect : list,
main_read_side_effect : list,
sub_read_side_effect : list,
device_id : str,
platform : Platform,
) -> None :
INDENT
    mock_device = MOCK_OWPROXY_DEVICES [device_id]

    main_dir_return_value += [f"/{device_id}/"]
    if "branches" in mock_device :
    INDENT
        for branch, branch_details in mock_device ["branches"].items() :
        INDENT
            sub_dir_side_effect.append(
                [
                    f"/{device_id}/{branch}/{sub_device_id}/" for sub_device_id in branch_details
                    ])
        DEDENT
    DEDENT
    _setup_owproxy_mock_device_reads(
        main_read_side_effect,
        sub_read_side_effect,
        mock_device,
        device_id,
        platform,
        )
    if "branches" in mock_device :
    INDENT
        for branch_details in mock_device ["branches"].values() :
        INDENT
            for sub_device_id, sub_device in branch_details.items() :
            INDENT
                _setup_owproxy_mock_device_reads(
                    main_read_side_effect,
                    sub_read_side_effect,
                    sub_device,
                    sub_device_id,
                    platform,
                    )

            DEDENT
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onewire/__init__.py" startline="88" endline="108">
def _setup_owproxy_mock_device_reads(
main_read_side_effect : list,
sub_read_side_effect : list,
mock_device : Any,
device_id : str,
platform : Platform,
) -> None :
INDENT
    main_read_side_effect += [device_id [0 : 2].encode()]
    if ATTR_INJECT_READS in mock_device :
    INDENT
        main_read_side_effect += mock_device [ATTR_INJECT_READS]

    DEDENT
    device_sensors = mock_device.get(platform, [])
    if platform is Platform.SENSOR and device_id.startswith("12") :
    INDENT
        for expected_sensor in device_sensors :
        INDENT
            sub_read_side_effect.append(expected_sensor [ATTR_INJECT_READS])
        DEDENT
    DEDENT
    for expected_sensor in device_sensors :
    INDENT
        sub_read_side_effect.append(expected_sensor [ATTR_INJECT_READS])
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sabnzbd/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.sabnzbd.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/suez_water/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.suez_water.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/august/conftest.py" startline="9" endline="14">
def mock_discovery_fixture() :
INDENT
    with patch(
        "homeassistant.components.august.discovery_flow.async_create_flow") as mock_discovery :
    INDENT
        yield mock_discovery
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sensorpush/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sensor/test_significant_change.py" startline="59" endline="68">
async def test_significant_change_temperature(
old_state, new_state, attrs, result
) -> None :
INDENT
    assert (
        significant_change.async_check_significant_change(
            None, old_state, attrs, new_state, attrs)
        is result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sensor/test_helpers.py" startline="9" endline="41">
def test_async_parse_datetime(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    entity_id = "sensor.timestamp"
    device_class = SensorDeviceClass.TIMESTAMP
    assert (
        async_parse_date_datetime(
            "2021-12-12 12:12Z", entity_id, device_class).isoformat()
        == "2021-12-12T12:12:00+00:00")
    assert not caplog.text
    assert (
        async_parse_date_datetime("2021-12-12 12:12", entity_id, device_class) is None)
    assert "sensor.timestamp rendered timestamp without timezone" in caplog.text
    assert async_parse_date_datetime("12 past 12", entity_id, device_class) is None
    assert "sensor.timestamp rendered invalid timestamp: 12 past 12" in caplog.text
    device_class = SensorDeviceClass.DATE
    caplog.clear()
    assert (
        async_parse_date_datetime("2021-12-12", entity_id, device_class).isoformat()
        == "2021-12-12")
    assert not caplog.text
    assert async_parse_date_datetime("December 12th", entity_id, device_class) is None
    assert "sensor.timestamp rendered invalid date December 12th" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="25" endline="36">
def device1_config() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = DEVICE_1_ID,
        data = {
            CONF_HOST : DEVICE_1_IP,
            CONF_NAME : "",
            },
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="38" endline="49">
def device2_config() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = DEVICE_2_ID,
        data = {
            CONF_HOST : DEVICE_2_IP,
            CONF_NAME : "",
            },
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="51" endline="55">
def device1_info() -> str :
INDENT
    return load_fixture("soundtouch/device1_info.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="57" endline="61">
def device1_now_playing_aux() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_aux.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="63" endline="67">
def device1_now_playing_bluetooth() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_bluetooth.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="69" endline="73">
def device1_now_playing_radio() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_radio.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="75" endline="79">
def device1_now_playing_standby() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_standby.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="81" endline="85">
def device1_now_playing_upnp() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_upnp.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="87" endline="91">
def device1_now_playing_upnp_paused() -> str :
INDENT
    return load_fixture("soundtouch/device1_now_playing_upnp_paused.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="93" endline="97">
def device1_presets() -> str :
INDENT
    return load_fixture("soundtouch/device1_presets.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="99" endline="103">
def device1_volume() -> str :
INDENT
    return load_fixture("soundtouch/device1_volume.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="105" endline="109">
def device1_volume_muted() -> str :
INDENT
    return load_fixture("soundtouch/device1_volume_muted.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="111" endline="115">
def device1_zone_master() -> str :
INDENT
    return load_fixture("soundtouch/device1_getZone_master.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="117" endline="121">
def device2_info() -> str :
INDENT
    return load_fixture("soundtouch/device2_info.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="123" endline="127">
def device2_volume() -> str :
INDENT
    return load_fixture("soundtouch/device2_volume.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="129" endline="133">
def device2_now_playing_standby() -> str :
INDENT
    return load_fixture("soundtouch/device2_now_playing_standby.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="135" endline="139">
def device2_zone_slave() -> str :
INDENT
    return load_fixture("soundtouch/device2_getZone_slave.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="141" endline="145">
def zone_empty() -> str :
INDENT
    return load_fixture("soundtouch/getZone_empty.xml")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="147" endline="161">
def device1_requests_mock(
requests_mock : Mocker,
device1_info : str,
device1_volume : str,
device1_presets : str,
device1_zone_master : str,
) -> Mocker :
INDENT
    requests_mock.get(f"{DEVICE_1_URL}/info", text = device1_info)
    requests_mock.get(f"{DEVICE_1_URL}/volume", text = device1_volume)
    requests_mock.get(f"{DEVICE_1_URL}/presets", text = device1_presets)
    requests_mock.get(f"{DEVICE_1_URL}/getZone", text = device1_zone_master)
    return requests_mock

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="163" endline="172">
def device1_requests_mock_standby(
device1_requests_mock : Mocker,
device1_now_playing_standby : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_standby)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="174" endline="183">
def device1_requests_mock_aux(
device1_requests_mock : Mocker,
device1_now_playing_aux : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_aux)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="185" endline="194">
def device1_requests_mock_bluetooth(
device1_requests_mock : Mocker,
device1_now_playing_bluetooth : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_bluetooth)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="196" endline="205">
def device1_requests_mock_radio(
device1_requests_mock : Mocker,
device1_now_playing_radio : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_radio)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="207" endline="216">
def device1_requests_mock_upnp(
device1_requests_mock : Mocker,
device1_now_playing_upnp : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_upnp)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="218" endline="227">
def device1_requests_mock_upnp_paused(
device1_requests_mock : Mocker,
device1_now_playing_upnp_paused : str,
) :
INDENT
    device1_requests_mock.get(
        f"{DEVICE_1_URL}/now_playing", text = device1_now_playing_upnp_paused)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="229" endline="235">
def device1_requests_mock_key(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/key")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="237" endline="243">
def device1_requests_mock_volume(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/volume")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="245" endline="251">
def device1_requests_mock_select(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/select")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="253" endline="259">
def device1_requests_mock_set_zone(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/setZone")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="261" endline="267">
def device1_requests_mock_add_zone_slave(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/addZoneSlave")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="269" endline="275">
def device1_requests_mock_remove_zone_slave(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"{DEVICE_1_URL}/removeZoneSlave")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="277" endline="283">
def device1_requests_mock_dlna(
device1_requests_mock : Mocker,
) :
INDENT
    return device1_requests_mock.post(f"http://{DEVICE_1_IP}:8091/AVTransport/Control")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/soundtouch/conftest.py" startline="285" endline="298">
def device2_requests_mock_standby(
requests_mock : Mocker,
device2_info : str,
device2_volume : str,
device2_now_playing_standby : str,
device2_zone_slave : str,
) -> Mocker :
INDENT
    requests_mock.get(f"{DEVICE_2_URL}/info", text = device2_info)
    requests_mock.get(f"{DEVICE_2_URL}/volume", text = device2_volume)
    requests_mock.get(f"{DEVICE_2_URL}/now_playing", text = device2_now_playing_standby)
    requests_mock.get(f"{DEVICE_2_URL}/getZone", text = device2_zone_slave)
    return requests_mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/screenlogic/conftest.py" startline="14" endline="28">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = MOCK_ADAPTER_NAME,
        domain = DOMAIN,
        data = {
            CONF_IP_ADDRESS : MOCK_ADAPTER_IP,
            CONF_PORT : MOCK_ADAPTER_PORT,
            },
        options = {
            CONF_SCAN_INTERVAL : 30,
            },
        unique_id = MOCK_ADAPTER_MAC,
        entry_id = "screenlogictest",
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/screenlogic/__init__.py" startline="19" endline="35">
def num_key_string_to_int(data : dict) -> None :
INDENT
    rpl = []
    for key, value in data.items() :
    INDENT
        if isinstance(value, dict) :
        INDENT
            num_key_string_to_int(value)
            if isinstance(key, str) and key.isnumeric() :
            INDENT
                rpl.append(key)
            DEDENT
        DEDENT
    DEDENT
    for k in rpl :
    INDENT
        data [int(k)] = data.pop(k)
    DEDENT
    return data

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/screenlogic/__init__.py" startline="56" endline="77">
async def stub_async_connect(
data,
self,
ip = None,
port = None,
gtype = None,
gsubtype = None,
name = MOCK_ADAPTER_NAME,
connection_closed_callback : Callable = None,
) -> bool :
INDENT
    self._ip = ip
    self._port = port
    self._type = gtype
    self._subtype = gsubtype
    self._name = name
    self._custom_connection_closed_callback = connection_closed_callback
    self._mac = MOCK_ADAPTER_MAC
    self._data = data
    _LOGGER.debug("Gateway mock connected")
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/surepetcare/test_sensor.py" startline="18" endline="31">
async def test_sensors(
hass : HomeAssistant, surepetcare, mock_config_entry_setup : MockConfigEntry
) -> None :
INDENT
    entity_registry = er.async_get(hass)
    state_entity_ids = hass.states.async_entity_ids()
    for entity_id, unique_id in EXPECTED_ENTITY_IDS.items() :
    INDENT
        assert entity_id in state_entity_ids
        state = hass.states.get(entity_id)
        assert state
        assert state.state == "100"
        entity = entity_registry.async_get(entity_id)
        assert entity.unique_id == unique_id
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/surepetcare/test_binary_sensor.py" startline="19" endline="32">
async def test_binary_sensors(
hass : HomeAssistant, surepetcare, mock_config_entry_setup : MockConfigEntry
) -> None :
INDENT
    entity_registry = er.async_get(hass)
    state_entity_ids = hass.states.async_entity_ids()
    for entity_id, unique_id in EXPECTED_ENTITY_IDS.items() :
    INDENT
        assert entity_id in state_entity_ids
        state = hass.states.get(entity_id)
        assert state
        assert state.state == "on"
        entity = entity_registry.async_get(entity_id)
        assert entity.unique_id == unique_id
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="24" endline="34">
def config_entry_fixture(hass : HomeAssistant, config) -> ConfigEntry :
INDENT
    entry = MockConfigEntry(
        title = "VeSync",
        domain = DOMAIN,
        data = config [DOMAIN],
        )
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="36" endline="40">
def config_fixture() -> ConfigType :
INDENT
    return {DOMAIN : {CONF_USERNAME : "user", CONF_PASSWORD : "pass"}}

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="42" endline="70">
def manager_fixture() -> VeSync :
INDENT
    outlets = []
    switches = []
    fans = []
    bulbs = []
    mock_vesync = Mock(VeSync)
    mock_vesync.login = Mock(return_value = True)
    mock_vesync.update = Mock()
    mock_vesync.outlets = outlets
    mock_vesync.switches = switches
    mock_vesync.fans = fans
    mock_vesync.bulbs = bulbs
    mock_vesync._dev_list = {
        "fans" : fans,
        "outlets" : outlets,
        "switches" : switches,
        "bulbs" : bulbs,
        }
    mock_vesync.account_id = "account_id"
    mock_vesync.time_zone = "America/New_York"
    mock = Mock(return_value = mock_vesync)
    with patch("homeassistant.components.vesync.VeSync", new = mock) :
    INDENT
        yield mock_vesync

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="72" endline="77">
def fan_fixture() :
INDENT
    mock_fixture = Mock(VeSyncAirBypass)
    return mock_fixture

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="79" endline="84">
def bulb_fixture() :
INDENT
    mock_fixture = Mock(VeSyncBulb)
    return mock_fixture

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="86" endline="92">
def switch_fixture() :
INDENT
    mock_fixture = Mock(VeSyncSwitch)
    mock_fixture.is_dimmable = Mock(return_value = False)
    return mock_fixture

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="94" endline="100">
def dimmable_switch_fixture() :
INDENT
    mock_fixture = Mock(VeSyncSwitch)
    mock_fixture.is_dimmable = Mock(return_value = True)
    return mock_fixture

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vesync/conftest.py" startline="102" endline="105">
def outlet_fixture() :
INDENT
    mock_fixture = Mock(VeSyncOutlet)
    return mock_fixture
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iotawatt/conftest.py" startline="13" endline="19">
def entry(hass) :
INDENT
    entry = MockConfigEntry(domain = DOMAIN, data = {"host" : "1.2.3.4"})
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iotawatt/conftest.py" startline="21" endline="28">
def mock_iotawatt(entry) :
INDENT
    with patch("homeassistant.components.iotawatt.coordinator.Iotawatt") as mock :
    INDENT
        instance = mock.return_value
        instance.connect = AsyncMock(return_value = True)
        instance.update = AsyncMock()
        instance.getSensors.return_value = {"sensors" : {}}
        yield instance
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blink/conftest.py" startline="37" endline="53">
def camera() -> MagicMock :
INDENT
    mock_blink_camera = create_autospec(blinkpy.camera.BlinkCamera, instance = True)
    mock_blink_camera.sync = AsyncMock(return_value = True)
    mock_blink_camera.name = "Camera 1"
    mock_blink_camera.camera_id = "111111"
    mock_blink_camera.serial = "12345"
    mock_blink_camera.motion_enabled = True
    mock_blink_camera.temperature = 25.1
    mock_blink_camera.motion_detected = False
    mock_blink_camera.wifi_strength = 2.1
    mock_blink_camera.camera_type = "lotus"
    mock_blink_camera.version = "123"
    mock_blink_camera.attributes = CAMERA_ATTRIBUTES
    return mock_blink_camera

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blink/conftest.py" startline="55" endline="68">
def blink_api_fixture(camera) -> MagicMock :
INDENT
    mock_blink_api = create_autospec(blinkpy.blinkpy.Blink, instance = True)
    mock_blink_api.available = True
    mock_blink_api.start = AsyncMock(return_value = True)
    mock_blink_api.refresh = AsyncMock(return_value = True)
    mock_blink_api.sync = MagicMock(return_value = True)
    mock_blink_api.cameras = {camera.name : camera}
    with patch("homeassistant.components.blink.Blink") as class_mock :
    INDENT
        class_mock.return_value = mock_blink_api
        yield mock_blink_api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blink/conftest.py" startline="70" endline="80">
def blink_auth_api_fixture() -> MagicMock :
INDENT
    mock_blink_auth_api = create_autospec(blinkpy.auth.Auth, instance = True)
    mock_blink_auth_api.check_key_required.return_value = False
    mock_blink_auth_api.send_auth_key = AsyncMock(return_value = True)
    with patch("homeassistant.components.blink.Auth", autospec = True) as class_mock :
    INDENT
        class_mock.return_value = mock_blink_auth_api
        yield mock_blink_auth_api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blink/conftest.py" startline="82" endline="100">
def mock_config_fixture() :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_USERNAME : "test_user",
            CONF_PASSWORD : "Password",
            "device_id" : "Home Assistant",
            "uid" : "BlinkCamera_e1233333e2-0909-09cd-777a-123456789012",
            "token" : "A_token",
            "unique_id" : "an_email@email.com",
            "host" : "u034.immedia-semi.com",
            "region_id" : "u034",
            "client_id" : 123456,
            "account_id" : 654321,
            },
        entry_id = str(uuid4()),
        version = 3,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/govee_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="54" endline="63">
def get_kodi_connection(
host, port, ws_port, username, password, ssl = False, timeout = 5, session = None
) :
INDENT
    if ws_port is None :
    INDENT
        return MockConnection()
    DEDENT
    else :
    INDENT
        return MockWSConnection()

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="67" endline="70">
def __init__(self, connected = True) :
INDENT
    self._connected = connected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="71" endline="73">
async def connect(self) :
INDENT
    """Mock connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="75" endline="78">
def connected(self) :
INDENT
    return self._connected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="80" endline="83">
def can_subscribe(self) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="84" endline="86">
async def close(self) :
INDENT
    """Mock close."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="88" endline="92">
def server(self) :
INDENT
    return None

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="96" endline="99">
def __init__(self, connected = True) :
INDENT
    self._connected = connected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="100" endline="102">
async def connect(self) :
INDENT
    """Mock connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="104" endline="107">
def connected(self) :
INDENT
    return self._connected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="109" endline="112">
def can_subscribe(self) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="113" endline="115">
async def close(self) :
INDENT
    """Mock close."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kodi/util.py" startline="117" endline="119">
def server(self) :
INDENT
    return None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/openexchangerates/conftest.py" startline="14" endline="20">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN, data = {"api_key" : "test-api-key", "base" : "USD"})

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/openexchangerates/conftest.py" startline="22" endline="30">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.openexchangerates.async_setup_entry",
        return_value = True,
        ) as mock_setup :
    INDENT
        yield mock_setup

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/openexchangerates/conftest.py" startline="32" endline="40">
def mock_latest_rates_config_flow(
request : pytest.FixtureRequest,
) -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.openexchangerates.config_flow.Client.get_latest",
        ) as mock_latest :
    INDENT
        mock_latest.return_value = {"EUR" : 1.0}
        yield mock_latest
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geocaching/conftest.py" startline="17" endline="29">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "1234AB 1",
        domain = DOMAIN,
        data = {
            "id" : "mock_user",
            "auth_implementation" : DOMAIN,
            },
        unique_id = "mock_user",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geocaching/conftest.py" startline="31" endline="38">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.geocaching.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geocaching/conftest.py" startline="40" endline="51">
def mock_geocaching_config_flow() -> Generator [None, MagicMock, None] :
INDENT
    mock_status = GeocachingStatus()
    mock_status.user.username = "mock_user"
    with patch(
        "homeassistant.components.geocaching.config_flow.GeocachingApi", autospec = True) as geocaching_mock :
    INDENT
        geocachingapi = geocaching_mock.return_value
        geocachingapi.update.return_value = mock_status
        yield geocachingapi
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vera/conftest.py" startline="13" endline="16">
def vera_component_factory() :
INDENT
    with patch("pyvera.VeraController") as vera_controller_class_mock :
    INDENT
        yield ComponentFactory(vera_controller_class_mock)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cloudflare/test_helpers.py" startline="6" endline="14">
def test_get_zone_id() :
INDENT
    zones = [
        {"id" : "1", "name" : "example.com"},
        {"id" : "2", "name" : "example.org"},
        ]
    assert get_zone_id("example.com", zones) == "1"
    assert get_zone_id("example.org", zones) == "2"
    assert get_zone_id("example.net", zones) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cloudflare/conftest.py" startline="11" endline="20">
def cfupdate(hass) :
INDENT
    mock_cfupdate = _get_mock_client()
    with patch(
        "homeassistant.components.cloudflare.pycfdns.Client",
        return_value = mock_cfupdate,
        ) as mock_api :
    INDENT
        yield mock_api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cloudflare/conftest.py" startline="22" endline="29">
def cfupdate_flow(hass) :
INDENT
    mock_cfupdate = _get_mock_client()
    with patch(
        "homeassistant.components.cloudflare.pycfdns.Client",
        return_value = mock_cfupdate,
        ) as mock_api :
    INDENT
        yield mock_api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/scene/common.py" startline="13" endline="20">
def activate(hass, entity_id = ENTITY_MATCH_ALL) :
INDENT
    data = {}
    if entity_id :
    INDENT
        data [ATTR_ENTITY_ID] = entity_id
    DEDENT
    hass.services.call(DOMAIN, SERVICE_TURN_ON, data)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/risco/util.py" startline="9" endline="13">
def zone_mock() :
INDENT
    return MagicMock(
        triggered = False, bypassed = False, bypass = AsyncMock(return_value = True))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lock/test_significant_change.py" startline="8" endline="24">
async def test_significant_change() -> None :
INDENT
    old_attrs = {"attr_1" : "a"}
    new_attrs = {"attr_1" : "b"}
    assert (
        async_check_significant_change(None, "locked", old_attrs, "locked", old_attrs)
        is False)
    assert (
        async_check_significant_change(None, "locked", old_attrs, "locked", new_attrs)
        is False)
    assert (
        async_check_significant_change(None, "locked", old_attrs, "unlocked", old_attrs)
        is True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waze_travel_time/conftest.py" startline="10" endline="18">
def mock_update_fixture() :
INDENT
    with patch(
        "pywaze.route_calculator.WazeRouteCalculator.calc_all_routes_info",
        return_value = {"My route" : (150, 300)},
        ) as mock_wrc :
    INDENT
        yield mock_wrc

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waze_travel_time/conftest.py" startline="20" endline="25">
def validate_config_entry_fixture(mock_update) :
INDENT
    mock_update.return_value = None
    return mock_update

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waze_travel_time/conftest.py" startline="27" endline="32">
def invalidate_config_entry_fixture(validate_config_entry) :
INDENT
    validate_config_entry.side_effect = WRCError("test")
    return validate_config_entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waze_travel_time/conftest.py" startline="34" endline="42">
def bypass_platform_setup_fixture() :
INDENT
    with patch(
        "homeassistant.components.waze_travel_time.sensor.async_setup_entry",
        return_value = True,
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waze_travel_time/conftest.py" startline="44" endline="50">
def bypass_setup_fixture() :
INDENT
    with patch(
        "homeassistant.components.waze_travel_time.async_setup_entry",
        return_value = True,
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/trafikverket_train/test_util.py" startline="14" endline="26">
async def test_sensor_next(
freezer : FrozenDateTimeFactory,
) -> None :
INDENT
    assert next_departuredate(WEEKDAYS) == dt_util.now().date()
    freezer.move_to(datetime(2023, 12, 22))
    assert (
        next_departuredate(["mon", "tue", "wed", "thu"])
        == datetime(2023, 12, 25).date())
    freezer.move_to(datetime(2023, 12, 25))
    assert next_departuredate(["fri", "sat", "sun"]) == datetime(2023, 12, 29).date()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/humidifier/test_significant_change.py" startline="16" endline="22">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/humidifier/test_significant_change.py" startline="47" endline="54">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="9" endline="33">
def __init__(
self,
addr,
timeout,
user = None,
password = None,
pin = None,
proto = "http",
SSLCert = False,
) :
INDENT
    self.status = {}
    self.model = "COLORTOUCH"
    self._api_ver = 7
    self._firmware_ver = tuple(5, 28)
    self.name = "TestVenstar"
    self._info = {}
    self._sensors = {}
    self.alerts = {}
    self.MODE_OFF = 0
    self.MODE_HEAT = 1
    self.MODE_COOL = 2
    self.MODE_AUTO = 3
    self._type = "residential"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="34" endline="37">
def login(self) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="38" endline="41">
def _request(self, path, data = None) :
INDENT
    self.status = {}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="42" endline="45">
def update(self) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="46" endline="50">
def update_info(self) :
INDENT
    self.name = "username"
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="51" endline="54">
def broken_update_info(self) :
INDENT
    raise RequestException
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="55" endline="58">
def update_sensors(self) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="59" endline="62">
def update_runtimes(self) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="63" endline="66">
def update_alerts(self) :
INDENT
    return True
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/venstar/__init__.py" startline="67" endline="69">
def get_runtimes(self) :
INDENT
    return {}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/permobil/conftest.py" startline="13" endline="20">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.permobil.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/permobil/conftest.py" startline="22" endline="28">
def my_permobil() -> Mock :
INDENT
    mock = Mock(spec = MyPermobil)
    mock.request_region_names.return_value = {MOCK_REGION_NAME : MOCK_URL}
    mock.request_application_token.return_value = MOCK_TOKEN
    mock.region = ""
    return mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="34" endline="41">
def config_data() :
INDENT
    return {
        CONF_USERNAME : "fake",
        CONF_PASSWORD : "user",
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="43" endline="50">
def another_config_data() :
INDENT
    return {
        CONF_USERNAME : "user2",
        CONF_PASSWORD : "fake2",
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="52" endline="56">
def config_options() :
INDENT
    return {CONF_COOL_AWAY_TEMPERATURE : 12, CONF_HEAT_AWAY_TEMPERATURE : 22}

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="58" endline="66">
def config_entry(config_data, config_options) :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = config_data,
        options = config_options,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="68" endline="76">
def config_entry2(another_config_data, config_options) :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = another_config_data,
        options = config_options,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="78" endline="134">
def device() :
INDENT
    mock_device = create_autospec(aiosomecomfort.device.Device, instance = True)
    mock_device.deviceid = 1234567
    mock_device._data = {
        "canControlHumidification" : True,
        "hasFan" : True,
        }
    mock_device.system_mode = "off"
    mock_device.name = "device1"
    mock_device.current_temperature = CURRENTTEMPERATURE
    mock_device.mac_address = "macaddress1"
    mock_device.outdoor_temperature = None
    mock_device.outdoor_humidity = None
    mock_device.is_alive = True
    mock_device.fan_running = False
    mock_device.fan_mode = "auto"
    mock_device.setpoint_cool = SETPOINTCOOL
    mock_device.setpoint_heat = SETPOINTHEAT
    mock_device.hold_heat = False
    mock_device.hold_cool = False
    mock_device.current_humidity = CURRENTHUMIDITY
    mock_device.equipment_status = "off"
    mock_device.equipment_output_status = "off"
    mock_device.raw_ui_data = {
        "SwitchOffAllowed" : True,
        "SwitchAutoAllowed" : True,
        "SwitchCoolAllowed" : True,
        "SwitchHeatAllowed" : True,
        "SwitchEmergencyHeatAllowed" : True,
        "HeatUpperSetptLimit" : HEATUPPERSETPOINTLIMIT,
        "HeatLowerSetptLimit" : HEATLOWERSETPOINTLIMIT,
        "CoolUpperSetptLimit" : COOLUPPERSETPOINTLIMIT,
        "CoolLowerSetptLimit" : COOLLOWERSETPOINTLIMIT,
        "HeatNextPeriod" : NEXTHEATPERIOD,
        "CoolNextPeriod" : NEXTCOOLPERIOD,
        }
    mock_device.raw_fan_data = {
        "fanModeOnAllowed" : True,
        "fanModeAutoAllowed" : True,
        "fanModeCirculateAllowed" : True,
        }
    mock_device.set_setpoint_cool = AsyncMock()
    mock_device.set_setpoint_heat = AsyncMock()
    mock_device.set_system_mode = AsyncMock()
    mock_device.set_fan_mode = AsyncMock()
    mock_device.set_hold_heat = AsyncMock()
    mock_device.set_hold_cool = AsyncMock()
    mock_device.refresh = AsyncMock()
    mock_device.heat_away_temp = HEATAWAY
    mock_device.cool_away_temp = COOLAWAY
    mock_device.raw_dr_data = {"CoolSetpLimit" : None, "HeatSetpLimit" : None}
    return mock_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="136" endline="174">
def device_with_outdoor_sensor() :
INDENT
    mock_device = create_autospec(aiosomecomfort.device.Device, instance = True)
    mock_device.deviceid = 1234567
    mock_device._data = {
        "canControlHumidification" : False,
        "hasFan" : False,
        }
    mock_device.system_mode = "off"
    mock_device.name = "device3"
    mock_device.current_temperature = CURRENTTEMPERATURE
    mock_device.mac_address = "macaddress1"
    mock_device.temperature_unit = "C"
    mock_device.outdoor_temperature = OUTDOORTEMP
    mock_device.outdoor_humidity = OUTDOORHUMIDITY
    mock_device.raw_ui_data = {
        "SwitchOffAllowed" : True,
        "SwitchAutoAllowed" : True,
        "SwitchCoolAllowed" : True,
        "SwitchHeatAllowed" : True,
        "SwitchEmergencyHeatAllowed" : True,
        "HeatUpperSetptLimit" : HEATUPPERSETPOINTLIMIT,
        "HeatLowerSetptLimit" : HEATLOWERSETPOINTLIMIT,
        "CoolUpperSetptLimit" : COOLUPPERSETPOINTLIMIT,
        "CoolLowerSetptLimit" : COOLLOWERSETPOINTLIMIT,
        "HeatNextPeriod" : NEXTHEATPERIOD,
        "CoolNextPeriod" : NEXTCOOLPERIOD,
        }
    mock_device.raw_fan_data = {
        "fanModeOnAllowed" : True,
        "fanModeAutoAllowed" : True,
        "fanModeCirculateAllowed" : True,
        }
    mock_device.raw_dr_data = {"CoolSetpLimit" : None, "HeatSetpLimit" : None}
    return mock_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="176" endline="212">
def another_device() :
INDENT
    mock_device = create_autospec(aiosomecomfort.device.Device, instance = True)
    mock_device.deviceid = 7654321
    mock_device._data = {
        "canControlHumidification" : False,
        "hasFan" : False,
        }
    mock_device.system_mode = "off"
    mock_device.name = "device2"
    mock_device.current_temperature = CURRENTTEMPERATURE
    mock_device.mac_address = "macaddress1"
    mock_device.outdoor_temperature = None
    mock_device.outdoor_humidity = None
    mock_device.raw_ui_data = {
        "SwitchOffAllowed" : True,
        "SwitchAutoAllowed" : True,
        "SwitchCoolAllowed" : True,
        "SwitchHeatAllowed" : True,
        "SwitchEmergencyHeatAllowed" : True,
        "HeatUpperSetptLimit" : HEATUPPERSETPOINTLIMIT,
        "HeatLowerSetptLimit" : HEATLOWERSETPOINTLIMIT,
        "CoolUpperSetptLimit" : COOLUPPERSETPOINTLIMIT,
        "CoolLowerSetptLimit" : COOLLOWERSETPOINTLIMIT,
        "HeatNextPeriod" : NEXTHEATPERIOD,
        "CoolNextPeriod" : NEXTCOOLPERIOD,
        }
    mock_device.raw_fan_data = {
        "fanModeOnAllowed" : True,
        "fanModeAutoAllowed" : True,
        "fanModeCirculateAllowed" : True,
        }
    mock_device.raw_dr_data = {"CoolSetpLimit" : None, "HeatSetpLimit" : None}
    return mock_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="214" endline="221">
def location(device) :
INDENT
    mock_location = create_autospec(aiosomecomfort.location.Location, instance = True)
    mock_location.locationid.return_value = "location1"
    mock_location.devices_by_id = {device.deviceid : device}
    return mock_location

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/honeywell/conftest.py" startline="223" endline="234">
def client(location) :
INDENT
    client_mock = create_autospec(aiosomecomfort.AIOSomeComfort, instance = True)
    client_mock.locations_by_id = {location.locationid : location}
    client_mock.login = AsyncMock(return_value = True)
    client_mock.discover = AsyncMock()
    with patch(
        "homeassistant.components.honeywell.aiosomecomfort.AIOSomeComfort") as sc_class_mock :
    INDENT
        sc_class_mock.return_value = client_mock
        yield client_mock
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/brottsplatskartan/conftest.py" startline="10" endline="18">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.brottsplatskartan.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/brottsplatskartan/conftest.py" startline="20" endline="26">
def uuid_generator() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.brottsplatskartan.config_flow.uuid.getnode",
        return_value = "1234567890",
        ) as uuid_generator :
    INDENT
        yield uuid_generator
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="40" endline="51">
def create_entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        data = CONF_DATA,
        options = CONF_OPTIONS,
        unique_id = ACCOUNT_1,
        )
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="55" endline="59">
def GetPlayerSummaries(self, steamids : str) -> dict :
INDENT
    return {"response" : {"players" : {"player" : [None]}}}

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="63" endline="65">
def IPlayerService(self) -> None :
INDENT
    """Mock iplayerservice."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="66" endline="68">
def ISteamUser(self) -> None :
INDENT
    """Mock iSteamUser."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="69" endline="77">
def GetFriendList(self, steamid : str) -> dict :
INDENT
    fake_friends = [{"steamid" : ACCOUNT_2}]
    for _i in range(0, 4) :
    INDENT
        fake_friends.append(
            {"steamid" : "".join(random.choices(string.digits, k = len(ACCOUNT_1)))})
    DEDENT
    return {"friendslist" : {"friends" : fake_friends}}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="78" endline="101">
def GetPlayerSummaries(self, steamids : str | list [str]) -> dict :
INDENT
    assert len(urllib.parse.quote(str(steamids))) < = MAX_LENGTH_STEAM_IDS
    return {
        "response" : {
            "players" : {
                "player" : [
                    {
                        "steamid" : ACCOUNT_1,
                        "personaname" : ACCOUNT_NAME_1,
                        "personastate" : 1,
                        "avatarmedium" : "",
                        },
                    {
                        "steamid" : ACCOUNT_2,
                        "personaname" : ACCOUNT_NAME_2,
                        "personastate" : 2,
                        "avatarmedium" : "",
                        },
                    ]}}}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="102" endline="108">
def GetOwnedGames(self, steamid : str, include_appinfo : int) -> dict :
INDENT
    return {
        "response" : {"game_count" : 1},
        "games" : [{"appid" : 1, "img_icon_url" : "1234567890"}],
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="109" endline="113">
def GetSteamLevel(self, steamid : str) -> dict :
INDENT
    return {"response" : {"player_level" : 10}}

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="117" endline="121">
def GetFriendList(self, steamid : str) -> None :
INDENT
    raise steam.api.HTTPError
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="122" endline="126">
def patch_interface() -> MockedInterface :
INDENT
    return patch("steam.api.interface", return_value = MockedInterface())

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="127" endline="131">
def patch_interface_private() -> MockedInterfacePrivate :
INDENT
    return patch("steam.api.interface", return_value = MockedInterfacePrivate())

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/steam_online/__init__.py" startline="132" endline="134">
def patch_user_interface_null() -> MockedUserInterfaceNull :
INDENT
    return patch("steam.api.interface", return_value = MockedUserInterfaceNull())
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/moon/conftest.py" startline="16" endline="23">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "Moon",
        domain = DOMAIN,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/moon/conftest.py" startline="25" endline="28">
def mock_setup_entry() -> Generator [None, None, None] :
INDENT
    with patch("homeassistant.components.moon.async_setup_entry", return_value = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/thermobeacon/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sma/test_sensor.py" startline="15" endline="21">
async def test_sensors(hass : HomeAssistant, init_integration) -> None :
INDENT
    state = hass.states.get("sensor.sma_device_grid_power")
    assert state
    assert state.attributes.get(ATTR_UNIT_OF_MEASUREMENT) == UnitOfPower.WATT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sma/test_sensor.py" startline="22" endline="31">
async def test_sensor_entities(hass : HomeAssistant, init_integration) -> None :
INDENT
    pysma_sensor_definitions = (
        sensor_map [GENERIC_SENSORS]
        + sensor_map [OPTIMIZERS_VIA_INVERTER]
        + sensor_map [ENERGY_METER_VIA_INVERTER])
    for sensor in pysma_sensor_definitions :
    INDENT
        assert sensor.name in SENSOR_ENTITIES
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sma/__init__.py" startline="21" endline="25">
def _patch_async_setup_entry(return_value = True) :
INDENT
    return patch(
        "homeassistant.components.sma.async_setup_entry",
        return_value = return_value,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switch/test_significant_change.py" startline="8" endline="13">
async def test_significant_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert not async_check_significant_change(None, "off", attrs, "off", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth_adapters/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/voip/test_select.py" startline="8" endline="22">
async def test_pipeline_select(
hass : HomeAssistant,
config_entry : ConfigEntry,
voip_device : VoIPDevice,
) -> None :
INDENT
    state = hass.states.get("select.192_168_1_210_assist_pipeline")
    assert state is not None
    assert state.state == "preferred"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/voip/test_select.py" startline="23" endline="35">
async def test_vad_sensitivity_select(
hass : HomeAssistant,
config_entry : ConfigEntry,
voip_device : VoIPDevice,
) -> None :
INDENT
    state = hass.states.get("select.192_168_1_210_finished_speaking_detection")
    assert state is not None
    assert state.state == "default"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/voip/test_binary_sensor.py" startline="8" endline="26">
async def test_call_in_progress(
hass : HomeAssistant,
config_entry : ConfigEntry,
voip_device : VoIPDevice,
) -> None :
INDENT
    state = hass.states.get("binary_sensor.192_168_1_210_call_in_progress")
    assert state is not None
    assert state.state == "off"
    voip_device.set_is_active(True)
    state = hass.states.get("binary_sensor.192_168_1_210_call_in_progress")
    assert state.state == "on"
    voip_device.set_is_active(False)
    state = hass.states.get("binary_sensor.192_168_1_210_call_in_progress")
    assert state.state == "off"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/glances/conftest.py" startline="11" endline="17">
def mock_api() :
INDENT
    with patch("homeassistant.components.glances.Glances") as mock_api :
    INDENT
        mock_api.return_value.get_ha_sensor_data = AsyncMock(
            return_value = HA_SENSOR_DATA)
        yield mock_api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/opower/conftest.py" startline="12" endline="24">
def mock_config_entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    config_entry = MockConfigEntry(
        title = "Pacific Gas & Electric (test-username)",
        domain = DOMAIN,
        data = {
            "utility" : "Pacific Gas and Electric Company (PG&E)",
            "username" : "test-username",
            "password" : "test-password",
            },
        )
    config_entry.add_to_hass(hass)
    return config_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="19" endline="26">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.sfr_box.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="28" endline="41">
def get_config_entry(hass : HomeAssistant) -> ConfigEntry :
INDENT
    config_entry = MockConfigEntry(
        domain = DOMAIN,
        source = SOURCE_USER,
        data = {CONF_HOST : "192.168.0.1"},
        unique_id = "e4:5d:51:00:11:22",
        options = {},
        entry_id = "123456",
        )
    config_entry.add_to_hass(hass)
    return config_entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="43" endline="60">
def get_config_entry_with_auth(hass : HomeAssistant) -> ConfigEntry :
INDENT
    config_entry_with_auth = MockConfigEntry(
        domain = DOMAIN,
        source = SOURCE_USER,
        data = {
            CONF_HOST : "192.168.0.1",
            CONF_USERNAME : "admin",
            CONF_PASSWORD : "password",
            },
        unique_id = "e4:5d:51:00:11:23",
        options = {},
        entry_id = "1234567",
        )
    config_entry_with_auth.add_to_hass(hass)
    return config_entry_with_auth

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="62" endline="71">
def dsl_get_info() -> Generator [DslInfo, None, None] :
INDENT
    dsl_info = DslInfo(** json.loads(load_fixture("dsl_getInfo.json", DOMAIN)))
    with patch(
        "homeassistant.components.sfr_box.coordinator.SFRBox.dsl_get_info",
        return_value = dsl_info,
        ) :
    INDENT
        yield dsl_info

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="73" endline="82">
def ftth_get_info() -> Generator [FtthInfo, None, None] :
INDENT
    info = FtthInfo(** json.loads(load_fixture("ftth_getInfo.json", DOMAIN)))
    with patch(
        "homeassistant.components.sfr_box.coordinator.SFRBox.ftth_get_info",
        return_value = info,
        ) :
    INDENT
        yield info

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="84" endline="93">
def system_get_info() -> Generator [SystemInfo, None, None] :
INDENT
    info = SystemInfo(** json.loads(load_fixture("system_getInfo.json", DOMAIN)))
    with patch(
        "homeassistant.components.sfr_box.coordinator.SFRBox.system_get_info",
        return_value = info,
        ) :
    INDENT
        yield info

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sfr_box/conftest.py" startline="95" endline="102">
def wan_get_info() -> Generator [WanInfo, None, None] :
INDENT
    info = WanInfo(** json.loads(load_fixture("wan_getInfo.json", DOMAIN)))
    with patch(
        "homeassistant.components.sfr_box.coordinator.SFRBox.wan_get_info",
        return_value = info,
        ) :
    INDENT
        yield info
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/elmax/conftest.py" startline="32" endline="57">
def httpx_mock_cloud_fixture(requests_mock) :
INDENT
    with respx.mock(base_url = BASE_URL, assert_all_called = False) as respx_mock :
    INDENT
        login_route = respx_mock.post(f"/{ENDPOINT_LOGIN}", name = "login")
        login_route.return_value = Response(
            200, json = json.loads(load_fixture("cloud/login.json", "elmax")))

        list_devices_route = respx_mock.get(f"/{ENDPOINT_DEVICES}", name = "list_devices")
        list_devices_route.return_value = Response(
            200, json = json.loads(load_fixture("cloud/list_devices.json", "elmax")))

        get_panel_route = respx_mock.get(
            f"/{ENDPOINT_DISCOVERY}/{MOCK_PANEL_ID}/{MOCK_PANEL_PIN}", name = "get_panel")
        get_panel_route.return_value = Response(
            200, json = json.loads(load_fixture("cloud/get_panel.json", "elmax")))
        yield respx_mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/elmax/conftest.py" startline="59" endline="80">
def httpx_mock_direct_fixture(requests_mock) :
INDENT
    with respx.mock(
        base_url = MOCK_DIRECT_BASE_URI, assert_all_called = False) as respx_mock :
    INDENT
        login_route = respx_mock.post(f"/api/v2/{ENDPOINT_LOGIN}", name = "login")
        login_route.return_value = Response(
            200, json = json.loads(load_fixture("direct/login.json", "elmax")))

        list_devices_route = respx_mock.get(
            f"/api/v2/{ENDPOINT_DISCOVERY}", name = "discovery_panel")
        list_devices_route.return_value = Response(
            200, json = json.loads(load_fixture("direct/discovery_panel.json", "elmax")))
        yield respx_mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/elmax/conftest.py" startline="82" endline="88">
def elmax_mock_direct_cert(requests_mock) :
INDENT
    with patch(
        "elmax_api.http.GenericElmax.retrieve_server_certificate",
        return_value = load_fixture("direct/cert.pem", "elmax"),
        ) as patched_ssl_get_cert :
    INDENT
        yield patched_ssl_get_cert
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="16" endline="23">
def test_silence() -> None :
INDENT
    segmenter = VoiceCommandSegmenter()

    assert segmenter.process(_ONE_SECOND * 3, False)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="24" endline="43">
def test_speech() -> None :
INDENT
    def is_speech(chunk) :
    INDENT
        return sum(chunk) > 0
    DEDENT
    segmenter = VoiceCommandSegmenter()

    assert segmenter.process(_ONE_SECOND, False)
    assert segmenter.process(_ONE_SECOND, True)
    assert not segmenter.process(_ONE_SECOND, False)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="27" endline="30">
def is_speech(chunk) :
INDENT
    return sum(chunk) > 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="44" endline="101">
def test_audio_buffer() -> None :
INDENT
    class DisabledVad(VoiceActivityDetector) :
    INDENT
        def is_speech(self, chunk) :
        INDENT
            return False
        DEDENT
        @ property
        def samples_per_chunk(self) :
        INDENT
            return 160
        DEDENT
    DEDENT
    vad = DisabledVad()
    bytes_per_chunk = vad.samples_per_chunk * 2
    vad_buffer = AudioBuffer(bytes_per_chunk)
    segmenter = VoiceCommandSegmenter()
    with patch.object(vad, "is_speech", return_value = False) as mock_process :
    INDENT
        half_chunk = bytes(it.islice(it.cycle(range(256)), bytes_per_chunk / / 2))
        segmenter.process_with_vad(half_chunk, vad, vad_buffer)
        assert not mock_process.called
        assert vad_buffer is not None
        assert vad_buffer.bytes() == half_chunk
        three_quarters_chunk = bytes(
            it.islice(it.cycle(range(256)), int(0.75 * bytes_per_chunk)))
        segmenter.process_with_vad(three_quarters_chunk, vad, vad_buffer)
        assert mock_process.call_count == 1
        assert (
            vad_buffer.bytes()
            == three_quarters_chunk [
                len(three_quarters_chunk) - (bytes_per_chunk / / 4) :])
        assert (
            mock_process.call_args [0] [0]
            == half_chunk + three_quarters_chunk [: bytes_per_chunk / / 2])
        segmenter.reset()
        vad_buffer.clear()
        assert len(vad_buffer) == 0
        mock_process.reset_mock()
        two_chunks = bytes(it.islice(it.cycle(range(256)), bytes_per_chunk * 2))
        segmenter.process_with_vad(two_chunks, vad, vad_buffer)
        assert mock_process.call_count == 2
        assert len(vad_buffer) == 0
        assert mock_process.call_args_list [0] [0] [0] == two_chunks [: bytes_per_chunk]
        assert mock_process.call_args_list [1] [0] [0] == two_chunks [bytes_per_chunk :]
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="48" endline="50">
def is_speech(self, chunk) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="52" endline="54">
def samples_per_chunk(self) :
INDENT
    return 160
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="102" endline="112">
def test_partial_chunk() -> None :
INDENT
    bytes_per_chunk = 5
    samples = bytes([1, 2, 3])
    leftover_chunk_buffer = AudioBuffer(bytes_per_chunk)
    chunks = list(chunk_samples(samples, bytes_per_chunk, leftover_chunk_buffer))
    assert len(chunks) == 0
    assert leftover_chunk_buffer.bytes() == samples
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="113" endline="129">
def test_chunk_samples_leftover() -> None :
INDENT
    bytes_per_chunk = 5
    samples = bytes([1, 2, 3, 4, 5, 6])
    leftover_chunk_buffer = AudioBuffer(bytes_per_chunk)
    chunks = list(chunk_samples(samples, bytes_per_chunk, leftover_chunk_buffer))
    assert len(chunks) == 1
    assert leftover_chunk_buffer.bytes() == bytes([6])
    chunks = list(chunk_samples(samples, bytes_per_chunk, leftover_chunk_buffer))
    assert len(chunks) == 1
    assert leftover_chunk_buffer.bytes() == bytes([5, 6])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="130" endline="167">
def test_vad_no_chunking() -> None :
INDENT
    class VadNoChunk(VoiceActivityDetector) :
    INDENT
        def is_speech(self, chunk : bytes) -> bool :
        INDENT
            return sum(chunk) > 0
        DEDENT
        @ property
        def samples_per_chunk(self) -> int | None :
        INDENT
            return None
        DEDENT
    DEDENT
    vad = VadNoChunk()
    segmenter = VoiceCommandSegmenter(
        speech_seconds = 1.0, silence_seconds = 1.0, reset_seconds = 0.5)
    silence = bytes([0] * 16000)
    speech = bytes([255] * (16000 / / 2))

    assert vad.is_speech(speech)
    assert not vad.is_speech(silence)
    assert segmenter.process_with_vad(silence, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(silence, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(speech, vad, None)
    assert segmenter.process_with_vad(silence, vad, None)
    assert not segmenter.process_with_vad(silence, vad, None)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="134" endline="136">
def is_speech(self, chunk : bytes) -> bool :
INDENT
    return sum(chunk) > 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_vad.py" startline="138" endline="140">
def samples_per_chunk(self) -> int | None :
INDENT
    return None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_ring_buffer.py" startline="6" endline="13">
def test_ring_buffer_empty() -> None :
INDENT
    rb = RingBuffer(10)
    assert rb.maxlen == 10
    assert rb.pos == 0
    assert rb.getvalue() == b""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_ring_buffer.py" startline="14" endline="22">
def test_ring_buffer_put_1() -> None :
INDENT
    rb = RingBuffer(10)
    rb.put(bytes([1, 2, 3, 4, 5]))
    assert len(rb) == 5
    assert rb.pos == 5
    assert rb.getvalue() == bytes([1, 2, 3, 4, 5])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_ring_buffer.py" startline="23" endline="32">
def test_ring_buffer_put_2() -> None :
INDENT
    rb = RingBuffer(10)
    rb.put(bytes([1, 2, 3, 4, 5]))
    rb.put(bytes([6, 7, 8, 9, 10, 11, 12]))
    assert len(rb) == 10
    assert rb.pos == 2
    assert rb.getvalue() == bytes([3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/assist_pipeline/test_ring_buffer.py" startline="33" endline="39">
def test_ring_buffer_put_too_large() -> None :
INDENT
    rb = RingBuffer(10)
    rb.put(bytes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))
    assert len(rb) == 10
    assert rb.pos == 2
    assert rb.getvalue() == bytes([3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/coolmaster/test_sensor.py" startline="9" endline="15">
async def test_sensor(
hass : HomeAssistant,
load_int : ConfigEntry,
) -> None :
INDENT
    assert hass.states.get("sensor.l1_100_error_code").state == "OK"
    assert hass.states.get("sensor.l1_101_error_code").state == "Err1"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/coolmaster/test_binary_sensor.py" startline="9" endline="15">
async def test_binary_sensor(
hass : HomeAssistant,
load_int : ConfigEntry,
) -> None :
INDENT
    assert hass.states.get("binary_sensor.l1_100_clean_filter").state == "off"
    assert hass.states.get("binary_sensor.l1_101_clean_filter").state == "on"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="35" endline="81">
def domain_data_mock(hass : HomeAssistant) -> Iterable [Mock] :
INDENT
    domain_data = create_autospec(DlnaDmrData, instance = True)
    domain_data.upnp_factory = create_autospec(
        UpnpFactory, spec_set = True, instance = True)
    upnp_device = create_autospec(UpnpDevice, instance = True)
    upnp_device.name = MOCK_DEVICE_NAME
    upnp_device.udn = MOCK_DEVICE_UDN
    upnp_device.device_url = MOCK_DEVICE_LOCATION
    upnp_device.device_type = "urn:schemas-upnp-org:device:MediaRenderer:1"
    upnp_device.available = True
    upnp_device.parent_device = None
    upnp_device.root_device = upnp_device
    upnp_device.all_devices = [upnp_device]
    upnp_device.services = {
        "urn:schemas-upnp-org:service:AVTransport:1" : create_autospec(
            UpnpService,
            instance = True,
            service_type = "urn:schemas-upnp-org:service:AVTransport:1",
            service_id = "urn:upnp-org:serviceId:AVTransport",
            ),
        "urn:schemas-upnp-org:service:ConnectionManager:1" : create_autospec(
            UpnpService,
            instance = True,
            service_type = "urn:schemas-upnp-org:service:ConnectionManager:1",
            service_id = "urn:upnp-org:serviceId:ConnectionManager",
            ),
        "urn:schemas-upnp-org:service:RenderingControl:1" : create_autospec(
            UpnpService,
            instance = True,
            service_type = "urn:schemas-upnp-org:service:RenderingControl:1",
            service_id = "urn:upnp-org:serviceId:RenderingControl",
            ),
        }
    seal(upnp_device)
    domain_data.upnp_factory.async_create_device.return_value = upnp_device
    hass.data [DLNA_DOMAIN] = domain_data
    return domain_data

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="83" endline="99">
def config_entry_mock() -> MockConfigEntry :
INDENT
    mock_entry = MockConfigEntry(
        unique_id = MOCK_DEVICE_UDN,
        domain = DLNA_DOMAIN,
        data = {
            CONF_URL : MOCK_DEVICE_LOCATION,
            CONF_DEVICE_ID : MOCK_DEVICE_UDN,
            CONF_TYPE : MOCK_DEVICE_TYPE,
            CONF_MAC : MOCK_MAC_ADDRESS,
            },
        title = MOCK_DEVICE_NAME,
        options = {},
        )
    return mock_entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="101" endline="116">
def config_entry_mock_no_mac() -> MockConfigEntry :
INDENT
    mock_entry = MockConfigEntry(
        unique_id = MOCK_DEVICE_UDN,
        domain = DLNA_DOMAIN,
        data = {
            CONF_URL : MOCK_DEVICE_LOCATION,
            CONF_DEVICE_ID : MOCK_DEVICE_UDN,
            CONF_TYPE : MOCK_DEVICE_TYPE,
            },
        title = MOCK_DEVICE_NAME,
        options = {},
        )
    return mock_entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="118" endline="137">
def dmr_device_mock(domain_data_mock : Mock) -> Iterable [Mock] :
INDENT
    with patch(
        "homeassistant.components.dlna_dmr.media_player.DmrDevice", autospec = True) as constructor :
    INDENT
        device = constructor.return_value
        device.on_event = None
        device.profile_device = (
            domain_data_mock.upnp_factory.async_create_device.return_value)
        device.media_image_url = "http://198.51.100.20:8200/AlbumArt/2624-17620.jpg"
        device.udn = "device_udn"
        device.manufacturer = "device_manufacturer"
        device.model_name = "device_model_name"
        device.name = "device_name"
        device.preset_names = ["preset1", "preset2"]
        yield device

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="139" endline="146">
def ssdp_scanner_mock() -> Iterable [Mock] :
INDENT
    with patch("homeassistant.components.ssdp.Scanner", autospec = True) as mock_scanner :
    INDENT
        reg_callback = mock_scanner.return_value.async_register_callback
        reg_callback.return_value = Mock(return_value = None)
        yield mock_scanner.return_value

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="148" endline="153">
def ssdp_server_mock() -> Iterable [Mock] :
INDENT
    with patch("homeassistant.components.ssdp.Server", autospec = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="155" endline="164">
def async_get_local_ip_mock() -> Iterable [Mock] :
INDENT
    with patch(
        "homeassistant.components.dlna_dmr.media_player.async_get_local_ip",
        autospec = True,
        ) as func :
    INDENT
        func.return_value = AddressFamily.AF_INET, LOCAL_IP
        yield func

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dlna_dmr/conftest.py" startline="166" endline="167">
def dlna_dmr_mock_get_source_ip(mock_get_source_ip) :
INDENT
    """Mock network util's async_get_source_ip."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="20" endline="35">
def assert_sensor_state(
hass : HomeAssistant,
entity_id : str,
expected_state : str,
attributes : dict [str, Any] = {},
) -> None :
INDENT
    state = hass.states.get(entity_id)
    assert state
    actual_state = state.state
    assert actual_state == expected_state
    for key, value in attributes.items() :
    INDENT
        assert key in state.attributes
        assert state.attributes [key] == value
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="36" endline="46">
def assert_temperature_sensor_registered(
hass : HomeAssistant,
serial_number : int,
number : int,
name : str,
) :
INDENT
    sensor = assert_sensor_registered(hass, serial_number, "temp", number, name)
    assert sensor.original_device_class is SensorDeviceClass.TEMPERATURE
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="47" endline="59">
def assert_pulse_counter_registered(
hass : HomeAssistant,
serial_number : int,
number : int,
name : str,
quantity : str,
per_time : str,
) :
INDENT
    sensor = assert_sensor_registered(hass, serial_number, "pulse", number, name)
    assert sensor.unit_of_measurement == f"{quantity}/{per_time}"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="60" endline="68">
def assert_power_sensor_registered(
hass : HomeAssistant, serial_number : int, number : int, name : str
) -> None :
INDENT
    sensor = assert_sensor_registered(hass, serial_number, "current", number, name)
    assert sensor.unit_of_measurement == UnitOfPower.WATT
    assert sensor.original_device_class is SensorDeviceClass.POWER
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="69" endline="77">
def assert_voltage_sensor_registered(
hass : HomeAssistant, serial_number : int, number : int, name : str
) -> None :
INDENT
    sensor = assert_sensor_registered(hass, serial_number, "volts", number, name)
    assert sensor.unit_of_measurement == UnitOfElectricPotential.VOLT
    assert sensor.original_device_class is SensorDeviceClass.VOLTAGE
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="78" endline="99">
def assert_sensor_registered(
hass : HomeAssistant,
serial_number : int,
sensor_type : str,
number : int,
name : str,
) -> RegistryEntry :
INDENT
    registry = get_entity_registry(hass)
    unique_id = f"{serial_number}-{sensor_type}-{number}"
    entity_id = registry.async_get_entity_id("sensor", DOMAIN, unique_id)
    assert entity_id is not None
    sensor = registry.async_get(entity_id)
    assert sensor
    assert sensor.unique_id == unique_id
    assert sensor.original_name == name
    return sensor

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="101" endline="114">
def monitors() -> AsyncMock :
INDENT
    with patch("greeneye.Monitors", new = AsyncMock) as mock_monitors :
    INDENT
        add_listeners(mock_monitors)
        mock_monitors.monitors = {}
        def add_monitor(monitor : MagicMock) -> None :
        INDENT
            serial_number = monitor.serial_number
            mock_monitors.monitors [serial_number] = monitor
            mock_monitors.notify_all_listeners(monitor)
        DEDENT
        mock_monitors.add_monitor = add_monitor
        yield mock_monitors
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/greeneye_monitor/conftest.py" startline="107" endline="112">
def add_monitor(monitor : MagicMock) -> None :
INDENT
    serial_number = monitor.serial_number
    mock_monitors.monitors [serial_number] = monitor
    mock_monitors.notify_all_listeners(monitor)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/google_translate/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.google_translate.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nws/conftest.py" startline="11" endline="26">
def mock_simple_nws() :
INDENT
    with patch("homeassistant.components.nws.SimpleNWS") as mock_nws :
    INDENT
        instance = mock_nws.return_value
        instance.set_station = AsyncMock(return_value = None)
        instance.update_observation = AsyncMock(return_value = None)
        instance.update_forecast = AsyncMock(return_value = None)
        instance.update_forecast_hourly = AsyncMock(return_value = None)
        instance.station = "ABC"
        instance.stations = ["ABC"]
        instance.observation = DEFAULT_OBSERVATION
        instance.forecast = DEFAULT_FORECAST
        instance.forecast_hourly = DEFAULT_FORECAST
        yield mock_nws

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nws/conftest.py" startline="28" endline="37">
def mock_simple_nws_config() :
INDENT
    with patch("homeassistant.components.nws.config_flow.SimpleNWS") as mock_nws :
    INDENT
        instance = mock_nws.return_value
        instance.set_station = AsyncMock(return_value = None)
        instance.station = "ABC"
        instance.stations = ["ABC"]
        yield mock_nws

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nws/conftest.py" startline="39" endline="46">
def no_sensor() :
INDENT
    with patch(
        "homeassistant.components.nws.sensor.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nws/conftest.py" startline="48" endline="53">
def no_weather() :
INDENT
    with patch(
        "homeassistant.components.nws.weather.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/verisure/conftest.py" startline="17" endline="30">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "12345",
        data = {
            CONF_EMAIL : "verisure_my_pages@example.com",
            CONF_GIID : "12345",
            CONF_PASSWORD : "SuperS3cr3t!",
            },
        version = 2,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/verisure/conftest.py" startline="32" endline="39">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.verisure.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/verisure/conftest.py" startline="41" endline="66">
def mock_verisure_config_flow() -> Generator [None, MagicMock, None] :
INDENT
    with patch(
        "homeassistant.components.verisure.config_flow.Verisure", autospec = True) as verisure_mock :
    INDENT
        verisure = verisure_mock.return_value
        verisure.login.return_value = True
        verisure.get_installations.return_value = {
            "data" : {
                "account" : {
                    "installations" : [
                        {
                            "giid" : "12345",
                            "alias" : "ascending",
                            "address" : {"street" : "12345th street"},
                            },
                        {
                            "giid" : "54321",
                            "alias" : "descending",
                            "address" : {"street" : "54321th street"},
                            },
                        ]}}}
        yield verisure
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit_controller/test_utils.py" startline="6" endline="16">
def test_unique_id_to_iids() :
INDENT
    assert unique_id_to_iids("pairingid_1_2_3") == (1, 2, 3)
    assert unique_id_to_iids("pairingid_1_2") == (1, 2, None)
    assert unique_id_to_iids("pairingid_1") == (1, None, None)
    assert unique_id_to_iids("pairingid") is None
    assert unique_id_to_iids("pairingid_1_2_3_4") is None
    assert unique_id_to_iids("pairingid_a") is None
    assert unique_id_to_iids("pairingid_1_a") is None
    assert unique_id_to_iids("pairingid_1_2_a") is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit_controller/conftest.py" startline="18" endline="25">
def freeze_time_in_future(request) :
INDENT
    now = dt_util.utcnow()
    start_dt = datetime.datetime(now.year + 1, 1, 1, 0, 0, 0, tzinfo = now.tzinfo)
    with freeze_time(start_dt) as frozen_time :
    INDENT
        yield frozen_time

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit_controller/conftest.py" startline="27" endline="36">
def controller(hass) :
INDENT
    instance = FakeController()
    with unittest.mock.patch(
        "homeassistant.components.homekit_controller.utils.Controller",
        return_value = instance,
        ) :
    INDENT
        yield instance

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit_controller/conftest.py" startline="38" endline="41">
def hk_mock_async_zeroconf(mock_async_zeroconf) :
INDENT
    """Auto mock zeroconf."""

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit_controller/conftest.py" startline="43" endline="44">
def auto_mock_bluetooth(mock_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/rainforest_raven/__init__.py" startline="20" endline="35">
def create_mock_device() :
INDENT
    device = AsyncMock()
    device.__aenter__.return_value = device
    device.get_current_price.return_value = PRICE_CLUSTER
    device.get_current_summation_delivered.return_value = SUMMATION
    device.get_device_info.return_value = DEVICE_INFO
    device.get_instantaneous_demand.return_value = DEMAND
    device.get_meter_list.return_value = METER_LIST
    device.get_meter_info.side_effect = lambda meter : METER_INFO.get(meter)
    device.get_network_info.return_value = NETWORK_INFO
    return device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/rainforest_raven/__init__.py" startline="36" endline="44">
def create_mock_entry(no_meters = False) :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_DEVICE : DISCOVERY_INFO.device,
            CONF_MAC : [] if no_meters else [METER_INFO [None].meter_mac_id.hex()],
            },
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dremel_3d_printer/conftest.py" startline="19" endline="25">
def create_entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    entry = MockConfigEntry(domain = DOMAIN, data = CONF_DATA, unique_id = "123456789")
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dremel_3d_printer/conftest.py" startline="27" endline="31">
def config_entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    return create_entry(hass)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dremel_3d_printer/conftest.py" startline="33" endline="53">
def connection() -> None :
INDENT
    mock = requests_mock.Mocker()
    mock.post(
        f"http://{HOST}:80/command",
        response_list = [
            {"text" : load_fixture("dremel_3d_printer/command_1.json")},
            {"text" : load_fixture("dremel_3d_printer/command_2.json")},
            {"text" : load_fixture("dremel_3d_printer/command_1.json")},
            {"text" : load_fixture("dremel_3d_printer/command_2.json")},
            ],
        )
    mock.post(
        f"https://{HOST}:11134/getHomeMessage",
        text = load_fixture("dremel_3d_printer/get_home_message.json"),
        status_code = HTTPStatus.OK,
        )
    mock.start()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dremel_3d_printer/conftest.py" startline="54" endline="59">
def patch_async_setup_entry() :
INDENT
    return patch(
        "homeassistant.components.dremel_3d_printer.async_setup_entry",
        return_value = True,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logger/conftest.py" startline="9" endline="13">
def restore_logging_class() :
INDENT
    klass = logging.getLoggerClass()
    yield
    logging.setLoggerClass(klass)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/frontier_silicon/conftest.py" startline="15" endline="23">
def config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "mock_radio_id",
        data = {CONF_WEBFSAPI_URL : "http://1.1.1.1:80/webfsapi", CONF_PIN : "1234"},
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/frontier_silicon/conftest.py" startline="25" endline="33">
def mock_valid_device_url() -> Generator [None, None, None] :
INDENT
    with patch(
        "afsapi.AFSAPI.get_webfsapi_endpoint",
        return_value = "http://1.1.1.1:80/webfsapi",
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/frontier_silicon/conftest.py" startline="35" endline="43">
def mock_valid_pin() -> Generator [None, None, None] :
INDENT
    with patch(
        "afsapi.AFSAPI.get_friendly_name",
        return_value = "Name of the device",
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/frontier_silicon/conftest.py" startline="45" endline="50">
def mock_radio_id() -> Generator [None, None, None] :
INDENT
    with patch("afsapi.AFSAPI.get_radio_id", return_value = "mock_radio_id") :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/frontier_silicon/conftest.py" startline="52" endline="57">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.frontier_silicon.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cover/test_significant_change.py" startline="14" endline="20">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cover/test_significant_change.py" startline="59" endline="66">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/default_config/conftest.py" startline="7" endline="8">
def default_config_mock_async_zeroconf(mock_async_zeroconf) :
INDENT
    """Auto mock zeroconf."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/meteo_france/conftest.py" startline="9" endline="14">
def patch_requests() :
INDENT
    patch_client = patch("homeassistant.components.meteo_france.MeteoFranceClient")
    with patch_client :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vicare/test_binary_sensor.py" startline="19" endline="26">
async def test_binary_sensors(
hass : HomeAssistant,
mock_vicare_gas_boiler : MagicMock,
snapshot : SnapshotAssertion,
entity_id : str,
) -> None :
INDENT
    assert hass.states.get(f"binary_sensor.model0_{entity_id}") == snapshot
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/binary_sensor/test_significant_change.py" startline="8" endline="21">
async def test_significant_change() -> None :
INDENT
    old_attrs = {"attr_1" : "value_1"}
    new_attrs = {"attr_1" : "value_2"}
    assert (
        async_check_significant_change(None, "on", old_attrs, "on", old_attrs) is False)
    assert (
        async_check_significant_change(None, "on", old_attrs, "on", new_attrs) is False)
    assert (
        async_check_significant_change(None, "on", old_attrs, "off", old_attrs) is True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geo_json_events/conftest.py" startline="17" endline="31">
def config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_URL : URL,
            CONF_LATITUDE : - 41.2,
            CONF_LONGITUDE : 174.7,
            CONF_RADIUS : 25.0,
            },
        title = f"{URL}, -41.2, 174.7",
        unique_id = f"{URL}, -41.2, 174.7",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geo_json_events/conftest.py" startline="33" endline="38">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.geo_json_events.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geo_json_events/__init__.py" startline="7" endline="21">
def _generate_mock_feed_entry(
external_id : str,
title : str,
distance_to_home : float,
coordinates : tuple [float, float],
properties : dict [str, Any] | None = None,
) -> MagicMock :
INDENT
    feed_entry = MagicMock()
    feed_entry.external_id = external_id
    feed_entry.title = title
    feed_entry.distance_to_home = distance_to_home
    feed_entry.coordinates = coordinates
    feed_entry.properties = properties
    return feed_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="11" endline="15">
def get_characteristic(self, key : str) -> str :
INDENT
    return key

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="21" endline="23">
def __init__(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="24" endline="27">
async def __aenter__(self, * args, ** kwargs) :
INDENT
    return self
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="28" endline="30">
async def __aexit__(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.__aexit__."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="31" endline="33">
async def connect(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="34" endline="37">
async def disconnect(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.disconnect."""

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="41" endline="45">
async def read_gatt_char(self, * args, ** kwargs) -> bytes :
INDENT
    return b"\x31\x00"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/oralb/conftest.py" startline="47" endline="53">
def mock_bluetooth(enable_bluetooth) :
INDENT
    with mock.patch(
        "oralb_ble.parser.BleakClientWithServiceCache", MockBleakClientBattery49) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/history/conftest.py" startline="11" endline="31">
def hass_history(hass_recorder) :
INDENT
    hass = hass_recorder()
    config = history.CONFIG_SCHEMA(
        {
            history.DOMAIN : {
                CONF_INCLUDE : {
                    CONF_DOMAINS : ["media_player"],
                    CONF_ENTITIES : ["thermostat.test"],
                    },
                CONF_EXCLUDE : {
                    CONF_DOMAINS : ["thermostat"],
                    CONF_ENTITIES : ["media_player.test"],
                    },
                }})
    assert setup_component(hass, history.DOMAIN, config)
    return hass
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tessie/conftest.py" startline="17" endline="25">
def mock_get_state() :
INDENT
    with patch(
        "homeassistant.components.tessie.coordinator.get_state",
        return_value = TEST_VEHICLE_STATE_ONLINE,
        ) as mock_get_state :
    INDENT
        yield mock_get_state

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tessie/conftest.py" startline="27" endline="35">
def mock_get_status() :
INDENT
    with patch(
        "homeassistant.components.tessie.coordinator.get_status",
        return_value = TEST_VEHICLE_STATUS_AWAKE,
        ) as mock_get_status :
    INDENT
        yield mock_get_status

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tessie/conftest.py" startline="37" endline="43">
def mock_get_state_of_all_vehicles() :
INDENT
    with patch(
        "homeassistant.components.tessie.config_flow.get_state_of_all_vehicles",
        return_value = TEST_STATE_OF_ALL_VEHICLES,
        ) as mock_get_state_of_all_vehicles :
    INDENT
        yield mock_get_state_of_all_vehicles
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/speedtestdotnet/conftest.py" startline="11" endline="15">
def mock_api() :
INDENT
    with patch("speedtest.Speedtest") as mock_api :
    INDENT
        mock_api.return_value.get_servers.return_value = MOCK_SERVERS
        yield mock_api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/minecraft_server/conftest.py" startline="15" endline="29">
def java_mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = None,
        entry_id = TEST_CONFIG_ENTRY_ID,
        data = {
            CONF_NAME : DEFAULT_NAME,
            CONF_ADDRESS : TEST_ADDRESS,
            CONF_TYPE : MinecraftServerType.JAVA_EDITION,
            },
        version = 3,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/minecraft_server/conftest.py" startline="31" endline="43">
def bedrock_mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = None,
        entry_id = TEST_CONFIG_ENTRY_ID,
        data = {
            CONF_NAME : DEFAULT_NAME,
            CONF_ADDRESS : TEST_ADDRESS,
            CONF_TYPE : MinecraftServerType.BEDROCK_EDITION,
            },
        version = 3,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_usage.py" startline="25" endline="40">
async def test_multiple_bleak_scanner_instances(hass : HomeAssistant) -> None :
INDENT
    install_multiple_bleak_catcher()
    instance = bleak.BleakScanner()
    assert isinstance(instance, HaBleakScannerWrapper)
    uninstall_multiple_bleak_catcher()
    with patch("bleak.get_platform_scanner_backend_type") :
    INDENT
        instance = bleak.BleakScanner()
    DEDENT
    assert not isinstance(instance, HaBleakScannerWrapper)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_usage.py" startline="41" endline="55">
async def test_wrapping_bleak_client(
hass : HomeAssistant, enable_bluetooth : None
) -> None :
INDENT
    install_multiple_bleak_catcher()
    instance = bleak.BleakClient(MOCK_BLE_DEVICE)
    assert isinstance(instance, HaBleakClientWrapper)
    uninstall_multiple_bleak_catcher()
    instance = bleak.BleakClient(MOCK_BLE_DEVICE)
    assert not isinstance(instance, HaBleakClientWrapper)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="27" endline="37">
async def test_scanner_by_source(hass : HomeAssistant, enable_bluetooth : None) -> None :
INDENT
    hci2_scanner = FakeScanner("hci2", "hci2")
    cancel_hci2 = bluetooth.async_register_scanner(hass, hci2_scanner)
    assert async_scanner_by_source(hass, "hci2") is hci2_scanner
    cancel_hci2()
    assert async_scanner_by_source(hass, "hci2") is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="38" endline="42">
async def test_monotonic_time() -> None :
INDENT
    assert MONOTONIC_TIME() == pytest.approx(time.monotonic(), abs = 0.1)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="43" endline="50">
async def test_async_get_advertisement_callback(
hass : HomeAssistant, enable_bluetooth : None
) -> None :
INDENT
    callback = bluetooth.async_get_advertisement_callback(hass)
    assert callback is not None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="51" endline="107">
async def test_async_scanner_devices_by_address_connectable(
hass : HomeAssistant, enable_bluetooth : None
) -> None :
INDENT
    manager = _get_manager()
    class FakeInjectableScanner(BaseHaRemoteScanner) :
    INDENT
        def inject_advertisement(
        self, device : BLEDevice, advertisement_data : AdvertisementData) -> None :
        INDENT
            self._async_on_advertisement(
                device.address,
                advertisement_data.rssi,
                device.name,
                advertisement_data.service_uuids,
                advertisement_data.service_data,
                advertisement_data.manufacturer_data,
                advertisement_data.tx_power,
                {"scanner_specific_data" : "test"},
                MONOTONIC_TIME(),
                )
        DEDENT
    DEDENT
    connector = (
        HaBluetoothConnector(MockBleakClient, "mock_bleak_client", lambda : False),
        )
    scanner = FakeInjectableScanner("esp32", "esp32", connector, True)
    unsetup = scanner.async_setup()
    cancel = manager.async_register_scanner(scanner)
    switchbot_device = generate_ble_device(
        "44:44:33:11:23:45",
        "wohand",
        {},
        rssi = - 100,
        )
    switchbot_device_adv = generate_advertisement_data(
        local_name = "wohand",
        service_uuids = ["050a021a-0000-1000-8000-00805f9b34fb"],
        service_data = {"050a021a-0000-1000-8000-00805f9b34fb" : b"\n\xff"},
        manufacturer_data = {1 : b"\x01"},
        rssi = - 100,
        )
    scanner.inject_advertisement(switchbot_device, switchbot_device_adv)
    assert async_scanner_devices_by_address(
        hass, switchbot_device.address, connectable = True) == async_scanner_devices_by_address(hass, "44:44:33:11:23:45", connectable = False)
    devices = async_scanner_devices_by_address(
        hass, switchbot_device.address, connectable = False)
    assert len(devices) == 1
    assert devices [0].scanner == scanner
    assert devices [0].ble_device.name == switchbot_device.name
    assert devices [0].advertisement.local_name == switchbot_device_adv.local_name
    unsetup()
    cancel()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="58" endline="73">
def inject_advertisement(
self, device : BLEDevice, advertisement_data : AdvertisementData
) -> None :
INDENT
    self._async_on_advertisement(
        device.address,
        advertisement_data.rssi,
        device.name,
        advertisement_data.service_uuids,
        advertisement_data.service_data,
        advertisement_data.manufacturer_data,
        advertisement_data.tx_power,
        {"scanner_specific_data" : "test"},
        MONOTONIC_TIME(),
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="108" endline="163">
async def test_async_scanner_devices_by_address_non_connectable(
hass : HomeAssistant, enable_bluetooth : None
) -> None :
INDENT
    manager = _get_manager()
    switchbot_device = generate_ble_device(
        "44:44:33:11:23:45",
        "wohand",
        {},
        rssi = - 100,
        )
    switchbot_device_adv = generate_advertisement_data(
        local_name = "wohand",
        service_uuids = ["050a021a-0000-1000-8000-00805f9b34fb"],
        service_data = {"050a021a-0000-1000-8000-00805f9b34fb" : b"\n\xff"},
        manufacturer_data = {1 : b"\x01"},
        rssi = - 100,
        )
    class FakeStaticScanner(FakeScanner) :
    INDENT
        @ property
        def discovered_devices(self) -> list [BLEDevice] :
        INDENT
            return [switchbot_device]
        DEDENT
        @ property
        def discovered_devices_and_advertisement_data(
        self,
        ) -> dict [str, tuple [BLEDevice, AdvertisementData]] :
        INDENT
            return {switchbot_device.address : (switchbot_device, switchbot_device_adv)}
        DEDENT
    DEDENT
    connector = (
        HaBluetoothConnector(MockBleakClient, "mock_bleak_client", lambda : False),
        )
    scanner = FakeStaticScanner("esp32", "esp32", connector)
    cancel = manager.async_register_scanner(scanner)
    assert scanner.discovered_devices_and_advertisement_data == {
        switchbot_device.address : (switchbot_device, switchbot_device_adv)}
    assert (
        async_scanner_devices_by_address(
            hass, switchbot_device.address, connectable = True)
        == [])
    devices = async_scanner_devices_by_address(
        hass, switchbot_device.address, connectable = False)
    assert len(devices) == 1
    assert devices [0].scanner == scanner
    assert devices [0].ble_device.name == switchbot_device.name
    assert devices [0].advertisement.local_name == switchbot_device_adv.local_name
    cancel()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="129" endline="132">
def discovered_devices(self) -> list [BLEDevice] :
INDENT
    return [switchbot_device]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth/test_api.py" startline="134" endline="139">
def discovered_devices_and_advertisement_data(
self,
) -> dict [str, tuple [BLEDevice, AdvertisementData]] :
INDENT
    return {switchbot_device.address : (switchbot_device, switchbot_device_adv)}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ruuvi_gateway/utils.py" startline="13" endline="24">
def patch_gateway_ok() -> _patch :
INDENT
    return patch(
        GET_GATEWAY_HISTORY_DATA,
        return_value = HistoryResponse(
            timestamp = int(time.time()),
            gw_mac = GATEWAY_MAC,
            tags = [],
            ),
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ruuvi_gateway/utils.py" startline="25" endline="27">
def patch_setup_entry_ok() -> _patch :
INDENT
    return patch(ASYNC_SETUP_ENTRY, return_value = True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ruuvi_gateway/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/radio_browser/conftest.py" startline="16" endline="24">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "My Radios",
        domain = DOMAIN,
        data = {},
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/radio_browser/conftest.py" startline="26" endline="31">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.radio_browser.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/edl21/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.edl21.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lookin/__init__.py" startline="33" endline="37">
def _mocked_climate() -> Climate :
INDENT
    climate = MagicMock(auto_spec = Climate)
    return climate

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lookin/__init__.py" startline="38" endline="42">
def _mocked_remote() -> Remote :
INDENT
    remote = MagicMock(auto_spec = Remote)
    return remote

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lookin/__init__.py" startline="43" endline="49">
def _mocked_device() -> Device :
INDENT
    device = MagicMock(auto_spec = Device)
    device.name = DEVICE_NAME
    device.id = DEVICE_ID
    return device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lookin/__init__.py" startline="50" endline="56">
def _patch_get_info(device = None, exception = None) :
INDENT
    async def _get_info(* args, ** kwargs) :
    INDENT
        if exception :
        INDENT
            raise exception
        DEDENT
        return device if device else _mocked_device()
    DEDENT
    return patch(f"{MODULE_CONFIG_FLOW}.LookInHttpProtocol.get_info", new = _get_info)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lookin/__init__.py" startline="51" endline="55">
async def _get_info(* args, ** kwargs) :
INDENT
    if exception :
    INDENT
        raise exception
    DEDENT
    return device if device else _mocked_device()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dormakaba_dkey/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="25" endline="32">
def patch_async_setup_entry(return_value = True) :
INDENT
    return patch(
        "homeassistant.components.keymitt_ble.async_setup_entry",
        return_value = return_value,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="55" endline="57">
def __init__(self, device, token) :
INDENT
    """Mock init."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="58" endline="60">
async def connect(self, init) :
INDENT
    """Mock connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="61" endline="63">
async def disconnect(self) :
INDENT
    """Mock disconnect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="64" endline="68">
def is_connected(self) :
INDENT
    return True

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="72" endline="74">
def __init__(self, device, token) :
INDENT
    """Mock init."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="75" endline="77">
async def connect(self, init) :
INDENT
    """Mock connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="78" endline="80">
async def disconnect(self) :
INDENT
    """Mock disconnect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/keymitt_ble/__init__.py" startline="81" endline="83">
async def is_connected(self) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/remote/test_significant_change.py" startline="9" endline="63">
async def test_significant_change() -> None :
INDENT
    attrs = {
        ATTR_CURRENT_ACTIVITY : "playing",
        ATTR_ACTIVITY_LIST : ["playing", "paused"],
        }
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
    attrs = {
        "old" : {
            ATTR_CURRENT_ACTIVITY : "playing",
            ATTR_ACTIVITY_LIST : ["playing", "paused"],
            },
        "new" : {
            ATTR_CURRENT_ACTIVITY : "paused",
            ATTR_ACTIVITY_LIST : ["playing", "paused"],
            },
        }
    assert async_check_significant_change(None, "on", attrs ["old"], "on", attrs ["new"])
    attrs = {
        "old" : {
            ATTR_CURRENT_ACTIVITY : "playing",
            ATTR_ACTIVITY_LIST : ["playing", "paused"],
            },
        "new" : {
            ATTR_CURRENT_ACTIVITY : "playing",
            ATTR_ACTIVITY_LIST : ["playing"],
            },
        }
    assert not async_check_significant_change(
        None, "on", attrs ["old"], "on", attrs ["new"])
    attrs = {
        "old" : {
            ATTR_CURRENT_ACTIVITY : "playing",
            ATTR_ACTIVITY_LIST : ["playing", "paused"],
            },
        "new" : {
            ATTR_CURRENT_ACTIVITY : "playing",
            ATTR_ACTIVITY_LIST : ["playing", "paused"],
            "not_official" : "changed",
            },
        }
    assert not async_check_significant_change(
        None, "on", attrs ["old"], "on", attrs ["new"])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yardian/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.yardian.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sensorpro/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/owntracks/test_helper.py" startline="11" endline="16">
def mock_nacl_imported() :
INDENT
    with patch("homeassistant.components.owntracks.helper.nacl") :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/owntracks/test_helper.py" startline="18" endline="23">
def mock_nacl_not_imported() :
INDENT
    with patch("homeassistant.components.owntracks.helper.nacl", new = None) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/owntracks/test_helper.py" startline="24" endline="28">
def test_supports_encryption(nacl_imported) -> None :
INDENT
    assert helper.supports_encryption()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/owntracks/test_helper.py" startline="29" endline="31">
def test_supports_encryption_failed(nacl_not_imported) -> None :
INDENT
    assert not helper.supports_encryption()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weather/test_significant_change.py" startline="29" endline="36">
async def test_significant_state_change() -> None :
INDENT
    assert not async_check_significant_change(
        None, "clear-night", {}, "clear-night", {})
    assert async_check_significant_change(None, "clear-night", {}, "cloudy", {})
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weather/test_significant_change.py" startline="293" endline="302">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weather/test_significant_change.py" startline="340" endline="347">
async def test_invalid_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weather/conftest.py" startline="18" endline="23">
def config_flow_fixture(hass : HomeAssistant) -> Generator [None, None, None] :
INDENT
    mock_platform(hass, "test.config_flow")
    with mock_config_flow("test", MockFlow) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sonos/test_helpers.py" startline="10" endline="16">
async def test_uid_to_hostname() -> None :
INDENT
    assert hostname_to_uid("Sonos-347E5C0CF1E3.local.") == "RINCON_347E5C0CF1E301400"
    assert hostname_to_uid("sonos5CAAFDE47AC8.local.") == "RINCON_5CAAFDE47AC801400"
    with pytest.raises(ValueError) :
    INDENT
        assert hostname_to_uid("notsonos5CAAFDE47AC8.local.")
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ourgroceries/__init__.py" startline="4" endline="6">
def items_to_shopping_list(items : list, version_id : str = "1") -> dict [dict [list]] :
INDENT
    return {"list" : {"versionId" : version_id, "items" : items}}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/script/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/streamlabswater/conftest.py" startline="16" endline="23">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.streamlabswater.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/streamlabswater/conftest.py" startline="25" endline="33">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        title = "StreamLabs",
        data = {CONF_API_KEY : "abc"},
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/streamlabswater/conftest.py" startline="35" endline="50">
def mock_streamlabswater() -> Generator [AsyncMock, None, None] :
INDENT
    locations = load_json_object_fixture("streamlabswater/get_locations.json")
    water_usage = load_json_object_fixture("streamlabswater/water_usage.json")
    mock = AsyncMock(spec = StreamlabsClient)
    mock.get_locations.return_value = locations
    mock.get_water_usage_summary.return_value = water_usage
    with patch(
        "homeassistant.components.streamlabswater.StreamlabsClient",
        return_value = mock,
        ) as mock_client :
    INDENT
        yield mock_client
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/plex/mock_classes.py" startline="70" endline="74">
def __init__(self, disabled = False) :
INDENT
    self.entries = []
    self.disabled = disabled
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/plex/mock_classes.py" startline="75" endline="83">
def scan(self, scan_for_clients = False) :
INDENT
    if self.disabled :
    INDENT
        return
    DEDENT
    if scan_for_clients :
    INDENT
        self.entries = GDM_CLIENT_PAYLOAD
    DEDENT
    else :
    INDENT
        self.entries = GDM_SERVER_PAYLOAD
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homematicip_cloud/test_helpers.py" startline="8" endline="18">
async def test_is_error_response() -> None :
INDENT
    assert not is_error_response("True")
    assert not is_error_response(True)
    assert not is_error_response("")
    assert is_error_response(
        json.loads(
            '{"errorCode": "INVALID_NUMBER_PARAMETER_VALUE", "minValue": 0.0, "maxValue": 1.01}'))
    assert not is_error_response(json.loads('{"errorCode": ""}'))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weatherflow_cloud/conftest.py" startline="11" endline="19">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.weatherflow_cloud.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weatherflow_cloud/conftest.py" startline="21" endline="33">
def mock_get_stations() -> Generator [AsyncMock, None, None] :
INDENT
    side_effects = [
        True,
        ]
    with patch(
        "weatherflow4py.api.WeatherFlowRestAPI.async_get_stations",
        side_effect = side_effects,
        ) as mock_get_stations :
    INDENT
        yield mock_get_stations

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weatherflow_cloud/conftest.py" startline="35" endline="48">
def mock_get_stations_500_error() -> Generator [AsyncMock, None, None] :
INDENT
    side_effects = [
        ClientResponseError(Mock(), (), status = 500),
        True,
        ]
    with patch(
        "weatherflow4py.api.WeatherFlowRestAPI.async_get_stations",
        side_effect = side_effects,
        ) as mock_get_stations :
    INDENT
        yield mock_get_stations

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weatherflow_cloud/conftest.py" startline="50" endline="58">
def mock_get_stations_401_error() -> Generator [AsyncMock, None, None] :
INDENT
    side_effects = [ClientResponseError(Mock(), (), status = 401), True, True, True]
    with patch(
        "weatherflow4py.api.WeatherFlowRestAPI.async_get_stations",
        side_effect = side_effects,
        ) as mock_get_stations :
    INDENT
        yield mock_get_stations
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zha/test_base.py" startline="12" endline="16">
def test_parse_and_log_command(poll_control_ch) :
INDENT
    assert parse_and_log_command(poll_control_ch, 0x00, 0x01, []) == "fast_poll_stop"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zha/test_base.py" startline="17" endline="19">
def test_parse_and_log_command_unknown(poll_control_ch) :
INDENT
    assert parse_and_log_command(poll_control_ch, 0x00, 0xAB, []) == "0xAB"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/person/test_significant_change.py" startline="8" endline="17">
async def test_significant_change() -> None :
INDENT
    old_attrs = {"source" : "device_tracker.wifi_device"}
    new_attrs = {"source" : "device_tracker.gps_device"}
    assert not async_check_significant_change(
        None, "home", old_attrs, "home", new_attrs)
    assert async_check_significant_change(
        None, "home", new_attrs, "not_home", new_attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/person/conftest.py" startline="17" endline="28">
def storage_collection(hass) :
INDENT
    id_manager = collection.IDManager()
    return person.PersonStorageCollection(
        person.PersonStore(hass, person.STORAGE_VERSION, person.STORAGE_KEY),
        id_manager,
        collection.YamlCollection(
            logging.getLogger(f"{person.__name__}.yaml_collection"), id_manager),
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/person/conftest.py" startline="30" endline="46">
def storage_setup(hass, hass_storage, hass_admin_user) :
INDENT
    hass_storage [DOMAIN] = {
        "key" : DOMAIN,
        "version" : 1,
        "data" : {
            "persons" : [
                {
                    "id" : "1234",
                    "name" : "tracked person",
                    "user_id" : hass_admin_user.id,
                    "device_trackers" : [DEVICE_TRACKER],
                    }]},
        }
    assert hass.loop.run_until_complete(async_setup_component(hass, DOMAIN, {}))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/slimproto/conftest.py" startline="16" endline="24">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "My Radios",
        domain = DOMAIN,
        data = {},
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/slimproto/conftest.py" startline="26" endline="32">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.slimproto.async_setup_entry",
        return_value = True,
        ) as mock_setup :
    INDENT
        yield mock_setup
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tradfri/test_util.py" startline="17" endline="21">
def test_from_fan_speed(fan_speed, expected_result) -> None :
INDENT
    assert _from_fan_speed(fan_speed) == expected_result
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tradfri/test_util.py" startline="30" endline="32">
def test_from_percentage(percentage, expected_result) -> None :
INDENT
    assert _from_fan_percentage(percentage) == expected_result
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/opensky/__init__.py" startline="10" endline="16">
def patch_setup_entry() -> bool :
INDENT
    return patch(
        "homeassistant.components.opensky.async_setup_entry", return_value = True)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/opensky/__init__.py" startline="17" endline="20">
def get_states_response_fixture(fixture : str) -> StatesResponse :
INDENT
    states_json = load_json_object_fixture(fixture)
    return StatesResponse.from_api(states_json)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/flo/conftest.py" startline="18" endline="26">
def config_entry(hass) :
INDENT
    return MockConfigEntry(
        domain = FLO_DOMAIN,
        data = {CONF_USERNAME : TEST_USER_ID, CONF_PASSWORD : TEST_PASSWORD},
        version = 1,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/flo/conftest.py" startline="28" endline="149">
def aioclient_mock_fixture(aioclient_mock) :
INDENT
    now = round(time.time())
    aioclient_mock.post(
        "https://api.meetflo.com/api/v1/users/auth",
        text = json.dumps(
            {
                "token" : TEST_TOKEN,
                "tokenPayload" : {
                    "user" : {"user_id" : TEST_USER_ID, "email" : TEST_EMAIL_ADDRESS},
                    "timestamp" : now,
                    },
                "tokenExpiration" : 86400,
                "timeNow" : now,
                }),
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        status = HTTPStatus.OK,
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/presence/me",
        text = load_fixture("flo/ping_response.json"),
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        status = HTTPStatus.OK,
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/devices/98765",
        text = load_fixture("flo/device_info_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/devices/32839",
        text = load_fixture("flo/device_info_response_detector.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/water/consumption",
        text = load_fixture("flo/water_consumption_info_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/locations/mmnnoopp",
        text = load_fixture("flo/location_info_expand_devices_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/users/12345abcde",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        params = {"expand" : "locations"},
        )
    aioclient_mock.get(
        "https://api-gw.meetflo.com/api/v2/users/12345abcde",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/devices/98765",
        text = load_fixture("flo/device_info_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        json = {"valve" : {"target" : "open"}},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/devices/98765",
        text = load_fixture("flo/device_info_response_closed.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        json = {"valve" : {"target" : "closed"}},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/devices/98765/healthTest/run",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/locations/mmnnoopp/systemMode",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        json = {"systemMode" : {"target" : "home"}},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/locations/mmnnoopp/systemMode",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        json = {"systemMode" : {"target" : "away"}},
        )
    aioclient_mock.post(
        "https://api-gw.meetflo.com/api/v2/locations/mmnnoopp/systemMode",
        text = load_fixture("flo/user_info_expand_locations_response.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        json = {
            "systemMode" : {
                "target" : "sleep",
                "revertMinutes" : 120,
                "revertMode" : "home",
                }},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yalexs_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aemet/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.aemet.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/emulated_hue/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lutron/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.lutron.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gdacs/conftest.py" startline="18" endline="32">
def config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_LATITUDE : - 41.2,
            CONF_LONGITUDE : 174.7,
            CONF_RADIUS : 25,
            CONF_UNIT_SYSTEM : "metric",
            CONF_SCAN_INTERVAL : 300.0,
            CONF_CATEGORIES : [],
            },
        title = "-41.2, 174.7",
        unique_id = "-41.2, 174.7",
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gdacs/__init__.py" startline="6" endline="42">
def _generate_mock_feed_entry(
external_id,
title,
distance_to_home,
coordinates,
attribution = None,
alert_level = None,
country = None,
duration_in_week = None,
event_name = None,
event_type_short = None,
event_type = None,
from_date = None,
to_date = None,
population = None,
severity = None,
vulnerability = None,
) :
INDENT
    feed_entry = MagicMock()
    feed_entry.external_id = external_id
    feed_entry.title = title
    feed_entry.distance_to_home = distance_to_home
    feed_entry.coordinates = coordinates
    feed_entry.attribution = attribution
    feed_entry.alert_level = alert_level
    feed_entry.country = country
    feed_entry.duration_in_week = duration_in_week
    feed_entry.event_name = event_name
    feed_entry.event_type_short = event_type_short
    feed_entry.event_type = event_type
    feed_entry.from_date = from_date
    feed_entry.to_date = to_date
    feed_entry.population = population
    feed_entry.severity = severity
    feed_entry.vulnerability = vulnerability
    return feed_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/image_processing/common.py" startline="14" endline="18">
def scan(hass, entity_id = ENTITY_MATCH_ALL) :
INDENT
    hass.add_job(async_scan, hass, entity_id)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/image_processing/common.py" startline="21" endline="24">
def async_scan(hass, entity_id = ENTITY_MATCH_ALL) :
INDENT
    data = {ATTR_ENTITY_ID : entity_id} if entity_id else None
    hass.async_add_job(hass.services.async_call(DOMAIN, SERVICE_SCAN, data))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nfandroidtv/__init__.py" startline="21" endline="26">
async def _create_mocked_tv(raise_exception = False) :
INDENT
    mocked_tv = AsyncMock()
    mocked_tv.get_state = AsyncMock()
    return mocked_tv

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nfandroidtv/__init__.py" startline="27" endline="31">
def _patch_config_flow_tv(mocked_tv) :
INDENT
    return patch(
        "homeassistant.components.nfandroidtv.config_flow.Notifications",
        return_value = mocked_tv,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/led_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/command_line/__init__.py" startline="9" endline="30">
def mock_asyncio_subprocess_run(
response : bytes = b"", returncode : int = 0, exception : Exception = None
) :
INDENT
    class MockProcess(asyncio.subprocess.Process) :
    INDENT
        @ property
        def returncode(self) :
        INDENT
            return returncode
        DEDENT
        async def communicate(self) :
        INDENT
            if exception :
            INDENT
                raise exception
            DEDENT
            return response, b""
        DEDENT
    DEDENT
    mock_process = MockProcess(MagicMock(), MagicMock(), MagicMock())
    with patch(
        "homeassistant.components.command_line.utils.asyncio.create_subprocess_shell",
        return_value = mock_process,
        ) as mock :
    INDENT
        yield mock
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/command_line/__init__.py" startline="16" endline="18">
def returncode(self) :
INDENT
    return returncode
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/command_line/__init__.py" startline="19" endline="23">
async def communicate(self) :
INDENT
    if exception :
    INDENT
        raise exception
    DEDENT
    return response, b""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/obihai/conftest.py" startline="11" endline="19">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.obihai.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/obihai/conftest.py" startline="21" endline="28">
def mock_gaierror() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.obihai.config_flow.gethostbyname",
        side_effect = gaierror(),
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/obihai/__init__.py" startline="22" endline="27">
def get_device_mac(self) :
INDENT
    return DHCP_SERVICE_INFO.macaddress

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/obihai/__init__.py" startline="28" endline="34">
def get_schema_suggestion(schema, key) :
INDENT
    for k in schema :
    INDENT
        if k == key :
        INDENT
            if k.description is None or "suggested_value" not in k.description :
            INDENT
                return None
            DEDENT
            return k.description ["suggested_value"]
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nzbget/conftest.py" startline="11" endline="22">
def nzbget_api(hass) :
INDENT
    with patch("homeassistant.components.nzbget.coordinator.NZBGetAPI") as mock_api :
    INDENT
        instance = mock_api.return_value
        instance.history = MagicMock(return_value = list(MOCK_HISTORY))
        instance.pausedownload = MagicMock(return_value = True)
        instance.resumedownload = MagicMock(return_value = True)
        instance.status = MagicMock(return_value = MOCK_STATUS.copy())
        instance.version = MagicMock(return_value = MOCK_VERSION)
        yield mock_api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/fjaraskupan/conftest.py" startline="9" endline="10">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/airq/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.airq.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/metoffice/conftest.py" startline="10" endline="23">
def mock_simple_manager_fail() :
INDENT
    with patch("datapoint.Manager") as mock_manager :
    INDENT
        instance = mock_manager.return_value
        instance.get_nearest_forecast_site.side_effect = APIException()
        instance.get_forecast_for_site.side_effect = APIException()
        instance.latitude = None
        instance.longitude = None
        instance.site = None
        instance.site_id = None
        instance.site_name = None
        instance.now = None
        yield mock_manager
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geonetnz_quakes/conftest.py" startline="22" endline="37">
def config_entry() :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_LATITUDE : - 41.2,
            CONF_LONGITUDE : 174.7,
            CONF_RADIUS : 25,
            CONF_UNIT_SYSTEM : "metric",
            CONF_SCAN_INTERVAL : 300.0,
            CONF_MMI : 4,
            CONF_MINIMUM_MAGNITUDE : 0.0,
            },
        title = "-41.2, 174.7",
        unique_id = "-41.2, 174.7",
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geonetnz_quakes/__init__.py" startline="6" endline="32">
def _generate_mock_feed_entry(
external_id,
title,
distance_to_home,
coordinates,
attribution = None,
depth = None,
magnitude = None,
mmi = None,
locality = None,
quality = None,
time = None,
) :
INDENT
    feed_entry = MagicMock()
    feed_entry.external_id = external_id
    feed_entry.title = title
    feed_entry.distance_to_home = distance_to_home
    feed_entry.coordinates = coordinates
    feed_entry.attribution = attribution
    feed_entry.depth = depth
    feed_entry.magnitude = magnitude
    feed_entry.mmi = mmi
    feed_entry.locality = locality
    feed_entry.quality = quality
    feed_entry.time = time
    return feed_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/fan/test_significant_change.py" startline="17" endline="23">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/fan/test_significant_change.py" startline="45" endline="52">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pi_hole/__init__.py" startline="106" endline="126">
def _create_mocked_hole(raise_exception = False, has_versions = True, has_data = True) :
INDENT
    mocked_hole = MagicMock()
    type(mocked_hole).get_data = AsyncMock(
        side_effect = HoleError("") if raise_exception else None)
    type(mocked_hole).get_versions = AsyncMock(
        side_effect = HoleError("") if raise_exception else None)
    type(mocked_hole).enable = AsyncMock()
    type(mocked_hole).disable = AsyncMock()
    if has_data :
    INDENT
        mocked_hole.data = ZERO_DATA
    DEDENT
    else :
    INDENT
        mocked_hole.data = []
    DEDENT
    if has_versions :
    INDENT
        mocked_hole.versions = SAMPLE_VERSIONS
    DEDENT
    else :
    INDENT
        mocked_hole.versions = None
    DEDENT
    return mocked_hole

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pi_hole/__init__.py" startline="127" endline="130">
def _patch_init_hole(mocked_hole) :
INDENT
    return patch("homeassistant.components.pi_hole.Hole", return_value = mocked_hole)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pi_hole/__init__.py" startline="131" endline="136">
def _patch_config_flow_hole(mocked_hole) :
INDENT
    return patch(
        "homeassistant.components.pi_hole.config_flow.Hole", return_value = mocked_hole)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pi_hole/__init__.py" startline="137" endline="140">
def _patch_setup_hole() :
INDENT
    return patch(
        "homeassistant.components.pi_hole.async_setup_entry", return_value = True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="11" endline="14">
def __init__(self) :
INDENT
    self.devices = {}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="18" endline="24">
def __init__(self, device) :
INDENT
    self.device = device
    self.callbacks = {}
    self.ports = set()
    self.values = {}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="25" endline="29">
def setup(self, port, direction) :
INDENT
    self.ports.add(port)
    self.values [port] = None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="30" endline="33">
def write(self, port, value) :
INDENT
    self.values [port] = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="34" endline="37">
def read(self, port) :
INDENT
    return 1
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="38" endline="41">
def adc_read(self, port) :
INDENT
    return 1023
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="42" endline="45">
def add_event_detect(self, port, callback, direction) :
INDENT
    self.callbacks [port] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="46" endline="48">
def notify(self, enable) :
INDENT
    """Mockup for notify."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="49" endline="52">
def mockup_inject_notification(self, port, value) :
INDENT
    self.callbacks [port](port, value)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="60" endline="66">
def discover(self, _ = None) :
INDENT
    self.devices [0] = NumatoModuleMock.NumatoDeviceMock("/dev/ttyACM0")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/numato_mock.py" startline="67" endline="69">
def cleanup(self) :
INDENT
    self.devices.clear()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/common.py" startline="42" endline="46">
def mockup_raise(* args, ** kwargs) :
INDENT
    raise NumatoGpioError("Error mockup")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/common.py" startline="47" endline="49">
def mockup_return(* args, ** kwargs) :
INDENT
    return False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/conftest.py" startline="14" endline="22">
def config() :
INDENT
    return deepcopy(NUMATO_CFG)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/numato/conftest.py" startline="24" endline="28">
def numato_fixture(monkeypatch) :
INDENT
    module_mock = numato_mock.NumatoModuleMock()
    monkeypatch.setattr(numato, "gpio", module_mock)
    return module_mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/rflink/test_utils.py" startline="10" endline="35">
async def test_utils(hass : HomeAssistant, monkeypatch) -> None :
INDENT
    assert brightness_to_rflink(0) == 0
    assert brightness_to_rflink(17) == 1
    assert brightness_to_rflink(34) == 2
    assert brightness_to_rflink(85) == 5
    assert brightness_to_rflink(170) == 10
    assert brightness_to_rflink(255) == 15
    assert brightness_to_rflink(10) == 0
    assert brightness_to_rflink(20) == 1
    assert brightness_to_rflink(30) == 1
    assert brightness_to_rflink(40) == 2
    assert brightness_to_rflink(50) == 2
    assert brightness_to_rflink(60) == 3
    assert brightness_to_rflink(70) == 4
    assert brightness_to_rflink(80) == 4
    assert rflink_to_brightness(0) == 0
    assert rflink_to_brightness(1) == 17
    assert rflink_to_brightness(5) == 85
    assert rflink_to_brightness(10) == 170
    assert rflink_to_brightness(12) == 204
    assert rflink_to_brightness(15) == 255
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/number/test_significant_change.py" startline="88" endline="95">
async def test_significant_change_temperature(
old_state, new_state, attrs, result
) -> None :
INDENT
    assert (
        async_check_significant_change(None, old_state, attrs, new_state, attrs)
        is result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/number/test_const.py" startline="10" endline="14">
def test_all() -> None :
INDENT
    help_test_all(const)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/number/test_const.py" startline="16" endline="21">
def test_deprecated_constants(
caplog : pytest.LogCaptureFixture,
enum : const.NumberMode,
) -> None :
INDENT
    import_and_test_deprecated_constant_enum(caplog, const, enum, "MODE_", "2025.1")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="21" endline="25">
def async_returns(x) :
INDENT
    return AsyncMock(return_value = x)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="26" endline="30">
def async_raises(x) :
INDENT
    return AsyncMock(side_effect = x)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="32" endline="36">
def client_fixture() :
INDENT
    return AqualinkClient(username = MOCK_USERNAME, password = MOCK_PASSWORD)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="37" endline="50">
def get_aqualink_system(aqualink, cls = None, data = None) :
INDENT
    if cls is None :
    INDENT
        cls = AqualinkSystem
    DEDENT
    if data is None :
    INDENT
        data = {}
    DEDENT
    num = random.randint(0, 99999)
    data ["serial_number"] = f"SN{num:05}"
    return cls(aqualink = aqualink, data = data)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="51" endline="78">
def get_aqualink_device(system, name, cls = None, data = None) :
INDENT
    if cls is None :
    INDENT
        cls = AqualinkDevice

        attrs = {
            "name" : name,
            "manufacturer" : "Jandy",
            "model" : "Device",
            "label" : name.upper(),
            }
        for k, v in attrs.items() :
        INDENT
            patcher = patch.object(cls, k, new_callable = PropertyMock)
            mock = patcher.start()
            mock.return_value = v
        DEDENT
    DEDENT
    if data is None :
    INDENT
        data = {}
    DEDENT
    data ["name"] = name
    return cls(system = system, data = data)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="80" endline="84">
def config_data_fixture() :
INDENT
    return MOCK_DATA

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="86" endline="90">
def config_fixture() :
INDENT
    return {DOMAIN : MOCK_DATA}

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/iaqualink/conftest.py" startline="92" endline="97">
def config_entry_fixture() :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = MOCK_DATA,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sql/test_util.py" startline="8" endline="18">
async def test_resolve_db_url_when_none_configured(
recorder_mock : Recorder,
hass : HomeAssistant,
) -> None :
INDENT
    db_url = None
    resolved_url = resolve_db_url(hass, db_url)
    assert resolved_url == get_instance(hass).db_url
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sql/test_util.py" startline="19" endline="24">
async def test_resolve_db_url_when_configured(hass : HomeAssistant) -> None :
INDENT
    db_url = "mssql://"
    resolved_url = resolve_db_url(hass, db_url)
    assert resolved_url == db_url
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_significant_change.py" startline="15" endline="21">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_significant_change.py" startline="45" endline="52">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_init.py" startline="16" endline="20">
def test_all(module : ModuleType) -> None :
INDENT
    help_test_all(module)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_init.py" startline="29" endline="39">
def test_deprecated_constant_code_format(
caplog : pytest.LogCaptureFixture,
code_format : alarm_control_panel.CodeFormat,
module : ModuleType,
) -> None :
INDENT
    import_and_test_deprecated_constant_enum(
        caplog, module, code_format, "FORMAT_", "2025.1")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_init.py" startline="48" endline="58">
def test_deprecated_support_alarm_constants(
caplog : pytest.LogCaptureFixture,
entity_feature : alarm_control_panel.AlarmControlPanelEntityFeature,
module : ModuleType,
) -> None :
INDENT
    import_and_test_deprecated_constant_enum(
        caplog, module, entity_feature, "SUPPORT_ALARM_", "2025.1")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/alarm_control_panel/test_init.py" startline="59" endline="79">
def test_deprecated_supported_features_ints(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    class MockAlarmControlPanelEntity(alarm_control_panel.AlarmControlPanelEntity) :
    INDENT
        _attr_supported_features = 1
    DEDENT
    entity = MockAlarmControlPanelEntity()
    assert (
        entity.supported_features
        is alarm_control_panel.AlarmControlPanelEntityFeature(1))
    assert "MockAlarmControlPanelEntity" in caplog.text
    assert "is using deprecated supported features values" in caplog.text
    assert "Instead it should use" in caplog.text
    assert "AlarmControlPanelEntityFeature.ARM_HOME" in caplog.text
    caplog.clear()
    assert (
        entity.supported_features
        is alarm_control_panel.AlarmControlPanelEntityFeature(1))
    assert "is using deprecated supported features values" not in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/wake_on_lan/conftest.py" startline="12" endline="17">
def mock_send_magic_packet() -> AsyncMock :
INDENT
    with patch("wakeonlan.send_magic_packet") as mock_send :
    INDENT
        yield mock_send

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/wake_on_lan/conftest.py" startline="19" endline="23">
def subprocess_call_return_value() -> int | None :
INDENT
    return 1

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/wake_on_lan/conftest.py" startline="25" endline="31">
def mock_subprocess_call(
subprocess_call_return_value : int,
) -> Generator [None, None, MagicMock] :
INDENT
    with patch("homeassistant.components.wake_on_lan.switch.sp.call") as mock_sp :
    INDENT
        mock_sp.return_value = subprocess_call_return_value
        yield mock_sp
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nexia/test_util.py" startline="8" endline="15">
async def test_is_invalid_auth_code() -> None :
INDENT
    assert util.is_invalid_auth_code(HTTPStatus.UNAUTHORIZED) is True
    assert util.is_invalid_auth_code(HTTPStatus.FORBIDDEN) is True
    assert util.is_invalid_auth_code(HTTPStatus.NOT_FOUND) is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nexia/test_util.py" startline="16" endline="20">
async def test_percent_conv() -> None :
INDENT
    assert util.percent_conv(0.12) == 12.0
    assert util.percent_conv(0.123) == 12.3
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/insteon/mock_connection.py" startline="4" endline="8">
async def mock_successful_connection(* args, ** kwargs) :
INDENT
    return True

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/insteon/mock_connection.py" startline="9" endline="11">
async def mock_failed_connection(* args, ** kwargs) :
INDENT
    raise ConnectionError("Connection failed")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/forked_daapd/conftest.py" startline="13" endline="28">
def config_entry_fixture() :
INDENT
    data = {
        CONF_HOST : "192.168.1.1",
        CONF_PORT : "2345",
        CONF_PASSWORD : "",
        }
    return MockConfigEntry(
        version = 1,
        domain = DOMAIN,
        title = "",
        data = data,
        options = {CONF_TTS_PAUSE_TIME : 0},
        source = SOURCE_USER,
        entry_id = 1,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/filesize/conftest.py" startline="20" endline="30">
def mock_config_entry(tmp_path : Path) -> MockConfigEntry :
INDENT
    test_file = str(tmp_path.joinpath(TEST_FILE_NAME))
    return MockConfigEntry(
        title = TEST_FILE_NAME,
        domain = DOMAIN,
        data = {CONF_FILE_PATH : test_file},
        unique_id = test_file,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/filesize/conftest.py" startline="32" endline="37">
def mock_setup_entry() -> Generator [None, None, None] :
INDENT
    with patch(
        "homeassistant.components.filesize.async_setup_entry", return_value = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="14" endline="21">
def mock_products() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.Teslemetry.products", return_value = PRODUCTS) as mock_products :
    INDENT
        yield mock_products

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="23" endline="31">
def mock_vehicle_data() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.VehicleSpecific.vehicle_data",
        return_value = VEHICLE_DATA,
        ) as mock_vehicle_data :
    INDENT
        yield mock_vehicle_data

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="33" endline="41">
def mock_wake_up() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.VehicleSpecific.wake_up",
        return_value = WAKE_UP_ONLINE,
        ) as mock_wake_up :
    INDENT
        yield mock_wake_up

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="43" endline="51">
def mock_vehicle() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.VehicleSpecific.vehicle",
        return_value = WAKE_UP_ONLINE,
        ) as mock_vehicle :
    INDENT
        yield mock_vehicle

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="53" endline="61">
def mock_request() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.Teslemetry._request",
        return_value = RESPONSE_OK,
        ) as mock_request :
    INDENT
        yield mock_request

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/teslemetry/conftest.py" startline="63" endline="69">
def mock_live_status() :
INDENT
    with patch(
        "homeassistant.components.teslemetry.EnergySpecific.live_status",
        side_effect = lambda : deepcopy(LIVE_STATUS),
        ) as mock_live_status :
    INDENT
        yield mock_live_status
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/everlights/test_light.py" startline="6" endline="12">
def test_color_rgb_to_int() -> None :
INDENT
    assert everlights.color_rgb_to_int(0x00, 0x00, 0x00) == 0x000000
    assert everlights.color_rgb_to_int(0xFF, 0xFF, 0xFF) == 0xFFFFFF
    assert everlights.color_rgb_to_int(0x12, 0x34, 0x56) == 0x123456
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/everlights/test_light.py" startline="13" endline="17">
def test_int_to_rgb() -> None :
INDENT
    assert everlights.color_int_to_rgb(0x000000) == (0x00, 0x00, 0x00)
    assert everlights.color_int_to_rgb(0xFFFFFF) == (0xFF, 0xFF, 0xFF)
    assert everlights.color_int_to_rgb(0x123456) == (0x12, 0x34, 0x56)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tibber/test_common.py" startline="43" endline="60">
def mock_get_homes(only_active = True) :
INDENT
    tibber_home = AsyncMock()
    tibber_home.name = "Name"
    tibber_home.home_id = "home_id"
    tibber_home.currency = "NOK"
    tibber_home.has_active_subscription = True
    tibber_home.has_real_time_consumption = False
    tibber_home.country = "NO"
    tibber_home.last_cons_data_timestamp = dt.datetime(2016, 1, 1, 12, 44, 57)
    tibber_home.last_data_timestamp = dt.datetime(2016, 1, 1, 12, 48, 57)
    def get_historic_data(n_data, resolution = "HOURLY", production = False) :
    INDENT
        return PRODUCTION_DATA_1 if production else CONSUMPTION_DATA_1
    DEDENT
    tibber_home.get_historic_data.side_effect = get_historic_data
    return [tibber_home]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tibber/test_common.py" startline="55" endline="57">
def get_historic_data(n_data, resolution = "HOURLY", production = False) :
INDENT
    return PRODUCTION_DATA_1 if production else CONSUMPTION_DATA_1
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tibber/conftest.py" startline="12" endline="20">
def config_entry(hass) :
INDENT
    config_entry = MockConfigEntry(
        domain = DOMAIN,
        data = {CONF_ACCESS_TOKEN : "token"},
        unique_id = "tibber",
        )
    config_entry.add_to_hass(hass)
    return config_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/livisi/__init__.py" startline="18" endline="24">
def mocked_livisi_login() :
INDENT
    return patch(
        "homeassistant.components.livisi.config_flow.AioLivisi.async_set_token")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/livisi/__init__.py" startline="25" endline="32">
def mocked_livisi_controller() :
INDENT
    return patch(
        "homeassistant.components.livisi.config_flow.AioLivisi.async_get_controller",
        return_value = DEVICE_CONFIG,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/livisi/__init__.py" startline="33" endline="38">
def mocked_livisi_setup_entry() :
INDENT
    return patch(
        "homeassistant.components.livisi.async_setup_entry",
        return_value = True,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/thermopro/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/eafm/conftest.py" startline="9" endline="14">
def mock_get_stations() :
INDENT
    with patch("homeassistant.components.eafm.config_flow.get_stations") as patched :
    INDENT
        yield patched

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/eafm/conftest.py" startline="16" endline="19">
def mock_get_station() :
INDENT
    with patch("homeassistant.components.eafm.get_station") as patched :
    INDENT
        yield patched
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/moat/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ping/test_sensor.py" startline="21" endline="33">
async def test_setup_and_update(
hass : HomeAssistant,
entity_registry : er.EntityRegistry,
snapshot : SnapshotAssertion,
sensor_name : str,
) -> None :
INDENT
    entry = entity_registry.async_get(f"sensor.10_10_10_10_{sensor_name}")
    assert entry == snapshot(exclude = props("unique_id"))
    state = hass.states.get(f"sensor.10_10_10_10_{sensor_name}")
    assert state == snapshot
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/abode/conftest.py" startline="14" endline="21">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.abode.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/abode/conftest.py" startline="23" endline="36">
def requests_mock_fixture(requests_mock) -> None :
INDENT
    requests_mock.post(URL.LOGIN, text = load_fixture("login.json", "abode"))
    requests_mock.post(URL.LOGOUT, text = load_fixture("logout.json", "abode"))
    requests_mock.get(URL.OAUTH_TOKEN, text = load_fixture("oauth_claims.json", "abode"))
    requests_mock.get(URL.PANEL, text = load_fixture("panel.json", "abode"))
    requests_mock.get(URL.AUTOMATION, text = load_fixture("automation.json", "abode"))
    requests_mock.get(URL.DEVICES, text = load_fixture("devices.json", "abode"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kira/test_sensor.py" startline="15" endline="20">
def add_entities(devices) :
INDENT
    for device in devices :
    INDENT
        DEVICES.append(device)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kira/test_sensor.py" startline="22" endline="46">
def test_kira_sensor_callback(
mock_schedule_update_ha_state, hass : HomeAssistant
) -> None :
INDENT
    mock_kira = MagicMock()
    hass.data [kira.DOMAIN] = {kira.CONF_SENSOR : {}}
    hass.data [kira.DOMAIN] [kira.CONF_SENSOR] ["kira"] = mock_kira
    kira.setup_platform(hass, TEST_CONFIG, add_entities, DISCOVERY_INFO)
    assert len(DEVICES) == 1
    sensor = DEVICES [0]
    assert sensor.name == "kira"
    sensor.hass = hass
    codeName = "FAKE_CODE"
    deviceName = "FAKE_DEVICE"
    codeTuple = (codeName, deviceName)
    sensor._update_callback(codeTuple)
    mock_schedule_update_ha_state.assert_called
    assert sensor.state == codeName
    assert sensor.extra_state_attributes == {kira.CONF_DEVICE : deviceName}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kira/test_remote.py" startline="17" endline="22">
def add_entities(devices) :
INDENT
    for device in devices :
    INDENT
        DEVICES.append(device)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kira/test_remote.py" startline="23" endline="40">
def test_service_call(hass : HomeAssistant) -> None :
INDENT
    mock_kira = MagicMock()
    hass.data [kira.DOMAIN] = {kira.CONF_REMOTE : {}}
    hass.data [kira.DOMAIN] [kira.CONF_REMOTE] ["kira"] = mock_kira
    kira.setup_platform(hass, TEST_CONFIG, add_entities, DISCOVERY_INFO)
    assert len(DEVICES) == 1
    remote = DEVICES [0]
    assert remote.name == "kira"
    command = ["FAKE_COMMAND"]
    device = "FAKE_DEVICE"
    commandTuple = (command [0], device)
    remote.send_command(device = device, command = command)
    mock_kira.sendCode.assert_called_with(commandTuple)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/eufylife_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switcher_kis/conftest.py" startline="9" endline="39">
def mock_bridge(request) :
INDENT
    with patch(
        "homeassistant.components.switcher_kis.utils.SwitcherBridge", autospec = True) as bridge_mock :
    INDENT
        bridge = bridge_mock.return_value
        bridge.devices = []
        if hasattr(request, "param") and request.param :
        INDENT
            bridge.devices = request.param
        DEDENT
        async def start() :
        INDENT
            bridge.is_running = True
            for device in bridge.devices :
            INDENT
                bridge_mock.call_args [0] [0](device)
            DEDENT
        DEDENT
        def mock_callbacks(devices) :
        INDENT
            for device in devices :
            INDENT
                bridge_mock.call_args [0] [0](device)
            DEDENT
        DEDENT
        async def stop() :
        INDENT
            bridge.is_running = False
        DEDENT
        bridge.start = AsyncMock(side_effect = start)
        bridge.mock_callbacks = Mock(side_effect = mock_callbacks)
        bridge.stop = AsyncMock(side_effect = stop)
        yield bridge

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switcher_kis/conftest.py" startline="20" endline="25">
async def start() :
INDENT
    bridge.is_running = True
    for device in bridge.devices :
    INDENT
        bridge_mock.call_args [0] [0](device)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switcher_kis/conftest.py" startline="26" endline="29">
def mock_callbacks(devices) :
INDENT
    for device in devices :
    INDENT
        bridge_mock.call_args [0] [0](device)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switcher_kis/conftest.py" startline="30" endline="32">
async def stop() :
INDENT
    bridge.is_running = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switcher_kis/conftest.py" startline="41" endline="70">
def mock_api() :
INDENT
    api_mock = AsyncMock()
    patchers = [
        patch(
            "homeassistant.components.switcher_kis.switch.SwitcherType1Api.connect",
            new = api_mock,
            ),
        patch(
            "homeassistant.components.switcher_kis.switch.SwitcherType1Api.disconnect",
            new = api_mock,
            ),
        patch(
            "homeassistant.components.switcher_kis.climate.SwitcherType2Api.connect",
            new = api_mock,
            ),
        patch(
            "homeassistant.components.switcher_kis.climate.SwitcherType2Api.disconnect",
            new = api_mock,
            ),
        ]
    for patcher in patchers :
    INDENT
        patcher.start()
    DEDENT
    yield api_mock
    for patcher in patchers :
    INDENT
        patcher.stop()
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/broadlink/test_helpers.py" startline="10" endline="16">
async def test_padding(hass : HomeAssistant) -> None :
INDENT
    assert data_packet("Jg") == b"&"
    assert data_packet("Jg=") == b"&"
    assert data_packet("Jg==") == b"&"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/broadlink/test_helpers.py" startline="17" endline="34">
async def test_valid_mac_address(hass : HomeAssistant) -> None :
INDENT
    valid = [
        "A1B2C3D4E5F6",
        "a1b2c3d4e5f6",
        "A1B2-C3D4-E5F6",
        "a1b2-c3d4-e5f6",
        "A1B2.C3D4.E5F6",
        "a1b2.c3d4.e5f6",
        "A1-B2-C3-D4-E5-F6",
        "a1-b2-c3-d4-e5-f6",
        "A1:B2:C3:D4:E5:F6",
        "a1:b2:c3:d4:e5:f6",
        ]
    for mac in valid :
    INDENT
        assert mac_address(mac) == b"\xa1\xb2\xc3\xd4\xe5\xf6"
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/broadlink/test_helpers.py" startline="35" endline="56">
async def test_invalid_mac_address(hass : HomeAssistant) -> None :
INDENT
    invalid = [
        None,
        123,
        ["a", "b", "c"],
        {"abc" : "def"},
        "a1b2c3d4e5f",
        "a1b2.c3d4.e5f",
        "a1-b2-c3-d4-e5-f",
        "a1b2c3d4e5f66",
        "a1b2.c3d4.e5f66",
        "a1-b2-c3-d4-e5-f66",
        "a1b2c3d4e5fg",
        "a1b2.c3d4.e5fg",
        "a1-b2-c3-d4-e5-fg",
        "a1b.2c3d4.e5fg",
        "a1b-2-c3-d4-e5-fg",
        ]
    for mac in invalid :
    INDENT
        with pytest.raises((ValueError, vol.Invalid)) :
        INDENT
            mac_address(mac)
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/broadlink/conftest.py" startline="9" endline="12">
def mock_heartbeat() :
INDENT
    with patch("homeassistant.components.broadlink.heartbeat.blk.ping") :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bosch_shc/conftest.py" startline="7" endline="8">
def bosch_shc_mock_async_zeroconf(mock_async_zeroconf) :
INDENT
    """Auto mock zeroconf."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/modem_callerid/__init__.py" startline="9" endline="15">
def patch_init_modem() :
INDENT
    return patch(
        "homeassistant.components.modem_callerid.PhoneModem.initialize",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/modem_callerid/__init__.py" startline="16" endline="22">
def patch_config_flow_modem() :
INDENT
    return patch(
        "homeassistant.components.modem_callerid.config_flow.PhoneModem.test",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/modem_callerid/__init__.py" startline="23" endline="31">
def com_port() :
INDENT
    port = ListPortInfo(DEFAULT_PORT)
    port.serial_number = "1234"
    port.manufacturer = "Virtual serial port"
    port.device = DEFAULT_PORT
    port.description = "Some serial port"
    return port
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/songpal/__init__.py" startline="26" endline="104">
def _create_mocked_device(throw_exception = False, wired_mac = MAC, wireless_mac = None) :
INDENT
    mocked_device = MagicMock()
    type(mocked_device).get_supported_methods = AsyncMock(
        side_effect = SongpalException("Unable to do POST request: ")
        if throw_exception else None)
    interface_info = MagicMock()
    interface_info.modelName = MODEL
    type(mocked_device).get_interface_information = AsyncMock(
        return_value = interface_info)
    sys_info = Sysinfo(
        bdAddr = None,
        macAddr = wired_mac,
        wirelessMacAddr = wireless_mac,
        bssid = None,
        ssid = None,
        bleID = None,
        serialNumber = None,
        generation = None,
        model = None,
        version = SW_VERSION,
        )
    type(mocked_device).get_system_info = AsyncMock(return_value = sys_info)
    volume1 = MagicMock()
    volume1.maxVolume = 100
    volume1.minVolume = 0
    volume1.volume = 50
    volume1.is_muted = False
    volume1.set_volume = AsyncMock()
    volume1.set_mute = AsyncMock()
    volume2 = MagicMock()
    volume2.maxVolume = 100
    volume2.minVolume = 0
    volume2.volume = 20
    volume2.is_muted = True
    mocked_device.volume1 = volume1
    type(mocked_device).get_volume_information = AsyncMock(
        return_value = [volume1, volume2])
    power = MagicMock()
    power.status = True
    type(mocked_device).get_power = AsyncMock(return_value = power)
    input1 = MagicMock()
    input1.title = "title1"
    input1.uri = "uri1"
    input1.active = False
    input1.activate = AsyncMock()
    mocked_device.input1 = input1
    input2 = MagicMock()
    input2.title = "title2"
    input2.uri = "uri2"
    input2.active = True
    type(mocked_device).get_inputs = AsyncMock(return_value = [input1, input2])
    type(mocked_device).set_power = AsyncMock()
    type(mocked_device).set_sound_settings = AsyncMock()
    type(mocked_device).listen_notifications = AsyncMock()
    type(mocked_device).stop_listen_notifications = AsyncMock()
    notification_callbacks = {}
    mocked_device.notification_callbacks = notification_callbacks
    def _on_notification(name, callback) :
    INDENT
        notification_callbacks [name] = callback
    DEDENT
    type(mocked_device).on_notification = MagicMock(side_effect = _on_notification)
    type(mocked_device).clear_notification_callbacks = MagicMock()
    return mocked_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/songpal/__init__.py" startline="96" endline="98">
def _on_notification(name, callback) :
INDENT
    notification_callbacks [name] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/songpal/__init__.py" startline="105" endline="111">
def _patch_config_flow_device(mocked_device) :
INDENT
    return patch(
        "homeassistant.components.songpal.config_flow.Device",
        return_value = mocked_device,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/songpal/__init__.py" startline="112" endline="116">
def _patch_media_player_device(mocked_device) :
INDENT
    return patch(
        "homeassistant.components.songpal.media_player.Device",
        return_value = mocked_device,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/wiffi/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.wiffi.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/onboarding/__init__.py" startline="6" endline="11">
def mock_storage(hass_storage, data) :
INDENT
    hass_storage [onboarding.STORAGE_KEY] = {
        "version" : onboarding.STORAGE_VERSION,
        "data" : data,
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bthome/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bthome/__init__.py" startline="90" endline="108">
def make_bthome_v1_adv(address : str, payload : bytes) -> BluetoothServiceInfoBleak :
INDENT
    return BluetoothServiceInfoBleak(
        name = "Test Device",
        address = address,
        device = generate_ble_device(address, None),
        rssi = - 56,
        manufacturer_data = {},
        service_data = {
            "0000181c-0000-1000-8000-00805f9b34fb" : payload,
            },
        service_uuids = ["0000181c-0000-1000-8000-00805f9b34fb"],
        source = "local",
        advertisement = generate_advertisement_data(local_name = "Test Device"),
        time = 0,
        connectable = False,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bthome/__init__.py" startline="109" endline="129">
def make_encrypted_bthome_v1_adv(
address : str, payload : bytes
) -> BluetoothServiceInfoBleak :
INDENT
    return BluetoothServiceInfoBleak(
        name = "ATC 8F80A5",
        address = address,
        device = generate_ble_device(address, None),
        rssi = - 56,
        manufacturer_data = {},
        service_data = {
            "0000181e-0000-1000-8000-00805f9b34fb" : payload,
            },
        service_uuids = ["0000181e-0000-1000-8000-00805f9b34fb"],
        source = "local",
        advertisement = generate_advertisement_data(local_name = "ATC 8F80A5"),
        time = 0,
        connectable = False,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bthome/__init__.py" startline="130" endline="146">
def make_bthome_v2_adv(address : str, payload : bytes) -> BluetoothServiceInfoBleak :
INDENT
    return BluetoothServiceInfoBleak(
        name = "Test Device",
        address = address,
        device = generate_ble_device(address, None),
        rssi = - 56,
        manufacturer_data = {},
        service_data = {
            "0000fcd2-0000-1000-8000-00805f9b34fb" : payload,
            },
        service_uuids = ["0000fcd2-0000-1000-8000-00805f9b34fb"],
        source = "local",
        advertisement = generate_advertisement_data(local_name = "Test Device"),
        time = 0,
        connectable = False,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/netgear_lte/test_sensor.py" startline="11" endline="28">
async def test_sensors(
hass : HomeAssistant,
entity_registry_enabled_by_default : None,
setup_integration : None,
entity_registry : er.EntityRegistry,
snapshot : SnapshotAssertion,
) -> None :
INDENT
    entry = hass.config_entries.async_entries(DOMAIN) [0]
    entity_entries = er.async_entries_for_config_entry(entity_registry, entry.entry_id)
    assert entity_entries
    for entity_entry in entity_entries :
    INDENT
        if entity_entry.domain ! = SENSOR_DOMAIN :
        INDENT
            continue
        DEDENT
        assert hass.states.get(entity_entry.entity_id) == snapshot(
            name = entity_entry.entity_id)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/netgear_lte/test_binary_sensor.py" startline="11" endline="28">
async def test_binary_sensors(
hass : HomeAssistant,
entity_registry_enabled_by_default : None,
setup_integration : None,
entity_registry : er.EntityRegistry,
snapshot : SnapshotAssertion,
) -> None :
INDENT
    entry = hass.config_entries.async_entries(DOMAIN) [0]
    entity_entries = er.async_entries_for_config_entry(entity_registry, entry.entry_id)
    assert entity_entries
    for entity_entry in entity_entries :
    INDENT
        if entity_entry.domain ! = BINARY_SENSOR_DOMAIN :
        INDENT
            continue
        DEDENT
        assert hass.states.get(entity_entry.entity_id) == snapshot(
            name = entity_entry.entity_id)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="20" endline="23">
def _clear_turbojpeg_singleton() :
INDENT
    TurboJPEGSingleton.__instance = None

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="24" endline="27">
def _reset_turbojpeg_singleton() :
INDENT
    TurboJPEGSingleton.__instance = TurboJPEG()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="28" endline="33">
def test_turbojpeg_singleton() -> None :
INDENT
    _clear_turbojpeg_singleton()
    assert TurboJPEGSingleton.instance() == TurboJPEGSingleton.instance()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="34" endline="74">
def test_scale_jpeg_camera_image() -> None :
INDENT
    _clear_turbojpeg_singleton()
    camera_image = Image("image/jpeg", EMPTY_16_12_JPEG)
    turbo_jpeg = mock_turbo_jpeg(first_width = 16, first_height = 12)
    with patch("turbojpeg.TurboJPEG", return_value = False) :
    INDENT
        TurboJPEGSingleton()
        assert scale_jpeg_camera_image(camera_image, 16, 12) == camera_image.content
    DEDENT
    turbo_jpeg = mock_turbo_jpeg(first_width = 16, first_height = 12)
    turbo_jpeg.decode_header.side_effect = OSError
    with patch("turbojpeg.TurboJPEG", return_value = turbo_jpeg) :
    INDENT
        TurboJPEGSingleton()
        assert scale_jpeg_camera_image(camera_image, 16, 12) == camera_image.content
    DEDENT
    turbo_jpeg = mock_turbo_jpeg(first_width = 16, first_height = 12)
    with patch("turbojpeg.TurboJPEG", return_value = turbo_jpeg) :
    INDENT
        TurboJPEGSingleton()
        assert scale_jpeg_camera_image(camera_image, 16, 12) == EMPTY_16_12_JPEG
    DEDENT
    turbo_jpeg = mock_turbo_jpeg(
        first_width = 16, first_height = 12, second_width = 8, second_height = 6)
    with patch("turbojpeg.TurboJPEG", return_value = turbo_jpeg) :
    INDENT
        TurboJPEGSingleton()
        jpeg_bytes = scale_jpeg_camera_image(camera_image, 8, 6)
    DEDENT
    assert jpeg_bytes == EMPTY_8_6_JPEG
    turbo_jpeg = mock_turbo_jpeg(
        first_width = 640, first_height = 480, second_width = 640, second_height = 480)
    with patch("turbojpeg.TurboJPEG", return_value = turbo_jpeg) :
    INDENT
        TurboJPEGSingleton()
        jpeg_bytes = scale_jpeg_camera_image(camera_image, 320, 480)
    DEDENT
    assert jpeg_bytes == EMPTY_16_12_JPEG
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="75" endline="86">
def test_turbojpeg_load_failure() -> None :
INDENT
    _clear_turbojpeg_singleton()
    with patch("turbojpeg.TurboJPEG", side_effect = Exception) :
    INDENT
        TurboJPEGSingleton()
        assert TurboJPEGSingleton.instance() is False
    DEDENT
    _clear_turbojpeg_singleton()
    TurboJPEGSingleton()
    assert TurboJPEGSingleton.instance() is not None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_img_util.py" startline="109" endline="119">
def test_find_supported_scaling_factor(
image_width, image_height, input_width, input_height, scaling_factor
) -> None :
INDENT
    assert (
        find_supported_scaling_factor(
            image_width, image_height, input_width, input_height)
        == scaling_factor)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/test_significant_change.py" startline="9" endline="20">
async def test_significant_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(
        None, STATE_IDLE, attrs, STATE_IDLE, attrs)
    assert not async_check_significant_change(
        None, STATE_IDLE, attrs, STATE_IDLE, {"dummy" : "dummy"})
    assert async_check_significant_change(
        None, STATE_IDLE, attrs, STATE_RECORDING, attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/camera/common.py" startline="13" endline="24">
def mock_turbo_jpeg(
first_width = None, second_width = None, first_height = None, second_height = None
) :
INDENT
    mocked_turbo_jpeg = Mock()
    mocked_turbo_jpeg.decode_header.side_effect = [
        (first_width, first_height, 0, 0),
        (second_width, second_height, 0, 0),
        ]
    mocked_turbo_jpeg.scale_with_quality.return_value = EMPTY_8_6_JPEG
    mocked_turbo_jpeg.encode.return_value = EMPTY_8_6_JPEG
    return mocked_turbo_jpeg
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/airtouch5/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.airtouch5.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/auth/conftest.py" startline="7" endline="9">
def aiohttp_client(event_loop, aiohttp_client, socket_enabled) :
INDENT
    return aiohttp_client
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/snapcast/conftest.py" startline="10" endline="17">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.snapcast.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/snapcast/conftest.py" startline="19" endline="24">
def mock_create_server() -> Generator [AsyncMock, None, None] :
INDENT
    mock_connection = AsyncMock()
    mock_connection.start = AsyncMock(return_value = None)
    with patch("snapcast.control.create_server", return_value = mock_connection) :
    INDENT
        yield mock_connection
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pvpc_hourly_pricing/conftest.py" startline="18" endline="40">
def check_valid_state(state, tariff : str, value = None, key_attr = None) :
INDENT
    assert state
    assert (
        state.attributes [ATTR_UNIT_OF_MEASUREMENT]
        == f"{CURRENCY_EURO}/{UnitOfEnergy.KILO_WATT_HOUR}")
    try :
    INDENT
        _ = float(state.state)
        assert - 0.1 < float(state.state) < 0.5
        assert state.attributes [ATTR_TARIFF] == tariff
    DEDENT
    except ValueError :
    INDENT
        pass
    DEDENT
    if value is not None and isinstance(value, str) :
    INDENT
        assert state.state == value
    DEDENT
    elif value is not None :
    INDENT
        assert abs(float(state.state) - value) < 1e-6
    DEDENT
    if key_attr is not None :
    INDENT
        assert abs(float(state.state) - state.attributes [key_attr]) < 1e-6
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pvpc_hourly_pricing/conftest.py" startline="42" endline="88">
def pvpc_aioclient_mock(aioclient_mock : AiohttpClientMocker) :
INDENT
    mask_url_public = (
        "https://api.esios.ree.es/archives/70/download_json?locale=es&date={0}")
    mask_url_esios = (
        "https://api.esios.ree.es/indicators/{0}"
        "?start_date={1}T00:00&end_date={1}T23:59")
    example_day = "2023-01-06"
    aioclient_mock.get(
        mask_url_public.format(example_day),
        text = load_fixture(f"{DOMAIN}/{FIXTURE_JSON_PUBLIC_DATA_2023_01_06}"),
        )
    for esios_ind in _ESIOS_INDICATORS_FOR_EACH_SENSOR :
    INDENT
        aioclient_mock.get(
            mask_url_esios.format(esios_ind, example_day),
            text = load_fixture(f"{DOMAIN}/{FIXTURE_JSON_ESIOS_DATA_PVPC_2023_01_06}"),
            )

    DEDENT
    aioclient_mock.get(
        mask_url_public.format("2023-01-07"),
        status = HTTPStatus.OK,
        text = '{"message":"No values for specified archive"}',
        )
    for esios_ind in _ESIOS_INDICATORS_FOR_EACH_SENSOR :
    INDENT
        aioclient_mock.get(
            mask_url_esios.format(esios_ind, "2023-01-07"),
            status = HTTPStatus.OK,
            text = (
                '{"indicator":{"name":"Término de facturación de energía activa del '
                'PVPC 2.0TD","short_name":"PVPC T. 2.0TD","id":1001,"composited":false,'
                '"step_type":"linear","disaggregated":true,"magnitud":'
                '[{"name":"Precio","id":23}],"tiempo":[{"name":"Hora","id":4}],"geos":[],'
                '"values_updated_at":null,"values":[]}}').replace("1001", esios_ind),
            )
    DEDENT
    for esios_ind in _ESIOS_INDICATORS_FOR_EACH_SENSOR :
    INDENT
        aioclient_mock.get(
            mask_url_esios.format(esios_ind, "2023-01-08"),
            status = HTTPStatus.UNAUTHORIZED,
            text = "HTTP Token: Access denied.",
            )
    DEDENT
    return aioclient_mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pegel_online/__init__.py" startline="7" endline="19">
def __init__(
self,
nearby_stations = None,
station_details = None,
station_measurements = None,
side_effect = None,
) -> None :
INDENT
    self.nearby_stations = nearby_stations
    self.station_details = station_details
    self.station_measurements = station_measurements
    self.side_effect = side_effect
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pegel_online/__init__.py" startline="20" endline="25">
async def async_get_nearby_stations(self, * args) :
INDENT
    if self.side_effect :
    INDENT
        raise self.side_effect
    DEDENT
    return self.nearby_stations
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pegel_online/__init__.py" startline="26" endline="31">
async def async_get_station_details(self, * args) :
INDENT
    if self.side_effect :
    INDENT
        raise self.side_effect
    DEDENT
    return self.station_details
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pegel_online/__init__.py" startline="32" endline="37">
async def async_get_station_measurements(self, * args) :
INDENT
    if self.side_effect :
    INDENT
        raise self.side_effect
    DEDENT
    return self.station_measurements
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pegel_online/__init__.py" startline="38" endline="40">
def override_side_effect(self, side_effect) :
INDENT
    self.side_effect = side_effect
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aladdin_connect/test_model.py" startline="7" endline="19">
async def test_model(hass : HomeAssistant) -> None :
INDENT
    test_values = {
        "device_id" : "1",
        "door_number" : "2",
        "name" : "my door",
        "status" : "good",
        }
    result2 = DoorDevice(test_values)
    assert result2 ["device_id"] == "1"
    assert result2 ["door_number"] == "2"
    assert result2 ["name"] == "my door"
    assert result2 ["status"] == "good"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aladdin_connect/conftest.py" startline="24" endline="48">
def fixture_mock_aladdinconnect_api() :
INDENT
    with mock.patch(
        "homeassistant.components.aladdin_connect.AladdinConnectClient") as mock_opener :
    INDENT
        mock_opener.login = AsyncMock(return_value = True)
        mock_opener.close = AsyncMock(return_value = True)
        mock_opener.async_get_door_status = AsyncMock(return_value = "open")
        mock_opener.get_door_status.return_value = "open"
        mock_opener.async_get_door_link_status = AsyncMock(return_value = "connected")
        mock_opener.get_door_link_status.return_value = "connected"
        mock_opener.async_get_battery_status = AsyncMock(return_value = "99")
        mock_opener.get_battery_status.return_value = "99"
        mock_opener.async_get_rssi_status = AsyncMock(return_value = "-55")
        mock_opener.get_rssi_status.return_value = "-55"
        mock_opener.async_get_ble_strength = AsyncMock(return_value = "-45")
        mock_opener.get_ble_strength.return_value = "-45"
        mock_opener.get_doors = AsyncMock(return_value = [DEVICE_CONFIG_OPEN])
        mock_opener.doors = [DEVICE_CONFIG_OPEN]
        mock_opener.register_callback = mock.Mock(return_value = True)
        mock_opener.open_door = AsyncMock(return_value = True)
        mock_opener.close_door = AsyncMock(return_value = True)
    DEDENT
    return mock_opener
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/asuswrt/common.py" startline="62" endline="66">
def new_device(protocol, mac, ip, name) :
INDENT
    if protocol in [PROTOCOL_HTTP, PROTOCOL_HTTPS] :
    INDENT
        return HttpDevice(mac, ip, name, ROUTER_MAC_ADDR, None)
    DEDENT
    return LegacyDevice(mac, ip, name)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/workday/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.workday.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/baf/__init__.py" startline="14" endline="17">
def __init__(self, async_wait_available_side_effect = None) :
INDENT
    self._async_wait_available_side_effect = async_wait_available_side_effect
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/baf/__init__.py" startline="19" endline="22">
def dns_sd_uuid(self) :
INDENT
    return MOCK_UUID
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/baf/__init__.py" startline="24" endline="27">
def name(self) :
INDENT
    return MOCK_NAME
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/baf/__init__.py" startline="28" endline="33">
async def async_wait_available(self) :
INDENT
    if self._async_wait_available_side_effect :
    INDENT
        raise self._async_wait_available_side_effect
    DEDENT
    return
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/baf/__init__.py" startline="34" endline="36">
def async_run(self) :
INDENT
    return asyncio.Future()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kmtronic/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.kmtronic.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/websocket_api/test_connection.py" startline="66" endline="111">
async def test_exception_handling(
hass : HomeAssistant,
caplog : pytest.LogCaptureFixture,
exc : Exception,
code : str,
err : str,
log : str,
) -> None :
INDENT
    send_messages = []
    user = MockUser()
    refresh_token = Mock()
    current_request = AsyncMock()
    hass.data [DOMAIN] = {}
    def get_extra_info(key : str) -> Any :
    INDENT
        if key == "sslcontext" :
        INDENT
            return True
        DEDENT
        if key == "peername" :
        INDENT
            return ("127.0.0.42", 8123)
        DEDENT
    DEDENT
    mocked_transport = Mock()
    mocked_transport.get_extra_info = get_extra_info
    mocked_request = make_mocked_request(
        "GET",
        "/api/websocket",
        headers = {"Host" : "example.com", "User-Agent" : "Browser"},
        transport = mocked_transport,
        )
    with patch(
        "homeassistant.components.websocket_api.connection.current_request",
        ) as current_request :
    INDENT
        current_request.get.return_value = mocked_request
        conn = websocket_api.ActiveConnection(
            logging.getLogger(__name__), hass, send_messages.append, user, refresh_token)
        conn.async_handle_exception({"id" : 5}, exc)
    DEDENT
    assert len(send_messages) == 1
    assert send_messages [0] ["error"] ["code"] == code
    assert send_messages [0] ["error"] ["message"] == err
    assert log in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/websocket_api/test_connection.py" startline="81" endline="87">
def get_extra_info(key : str) -> Any :
INDENT
    if key == "sslcontext" :
    INDENT
        return True
    DEDENT
    if key == "peername" :
    INDENT
        return ("127.0.0.42", 8123)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/websocket_api/test_connection.py" startline="112" endline="133">
async def test_binary_handler_registration() -> None :
INDENT
    connection = websocket_api.ActiveConnection(
        None, Mock(data = {websocket_api.DOMAIN : None}), None, None, Mock())

    unsubs = [None]
    fake_handler = object()
    for i in range(255) :
    INDENT
        prefix, unsub = connection.async_register_binary_handler(fake_handler)
        assert prefix == i + 1
        unsubs.append(unsub)
    DEDENT
    with pytest.raises(RuntimeError) :
    INDENT
        connection.async_register_binary_handler(None)
    DEDENT
    unsubs [15]()

    prefix, unsub = connection.async_register_binary_handler(None)
    assert prefix == 15
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/elvia/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.elvia.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/refoss/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.refoss.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/test_schemas.py" startline="57" endline="65">
def test_blueprint_schema(blueprint) -> None :
INDENT
    try :
    INDENT
        schemas.BLUEPRINT_SCHEMA(blueprint)
    DEDENT
    except vol.Invalid :
    INDENT
        _LOGGER.exception("%s", blueprint)
        pytest.fail("Expected schema to be valid")

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/test_schemas.py" startline="99" endline="104">
def test_blueprint_schema_invalid(blueprint) -> None :
INDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        schemas.BLUEPRINT_SCHEMA(blueprint)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/test_schemas.py" startline="113" endline="115">
def test_blueprint_instance_fields(bp_instance) -> None :
INDENT
    schemas.BLUEPRINT_INSTANCE_FIELDS({"use_blueprint" : bp_instance})
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/common.py" startline="8" endline="13">
def stub_blueprint_populate_fixture_helper() -> Generator [None, Any, None] :
INDENT
    with patch(
        "homeassistant.components.blueprint.models.DomainBlueprints.async_populate") :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blueprint/test_default_blueprints.py" startline="18" endline="29">
def test_default_blueprints(domain : str) -> None :
INDENT
    integration = importlib.import_module(f"homeassistant.components.{domain}")
    blueprint_folder = pathlib.Path(integration.__file__).parent / BLUEPRINT_FOLDER
    items = list(blueprint_folder.glob("*"))
    assert len(items) > 0, "Folder cannot be empty"
    for fil in items :
    INDENT
        LOGGER.info("Processing %s", fil)
        assert fil.name.endswith(".yaml")
        data = yaml.load_yaml(fil)
        models.Blueprint(data, expected_domain = domain)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switchbot/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/velbus/conftest.py" startline="19" endline="24">
def mock_controller() -> Generator [MagicMock, None, None] :
INDENT
    with patch("homeassistant.components.velbus.Velbus", autospec = True) as controller :
    INDENT
        yield controller

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/velbus/conftest.py" startline="26" endline="33">
def mock_config_entry(hass : HomeAssistant) -> ConfigEntry :
INDENT
    config_entry = MockConfigEntry(
        domain = DOMAIN,
        data = {CONF_PORT : PORT_TCP, CONF_NAME : "velbus home"},
        )
    config_entry.add_to_hass(hass)
    return config_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/unifiprotect/__init__.py" startline="34" endline="48">
def _patch_discovery(device = None, no_device = False) :
INDENT
    mock_aio_discovery = MagicMock(auto_spec = AIOUnifiScanner)
    scanner_return = [] if no_device else [device or UNIFI_DISCOVERY]
    mock_aio_discovery.async_scan = AsyncMock(return_value = scanner_return)
    mock_aio_discovery.found_devices = scanner_return
    @ contextmanager
    def _patcher() :
    INDENT
        with patch(
            "homeassistant.components.unifiprotect.discovery.AIOUnifiScanner",
            return_value = mock_aio_discovery,
            ) :
        INDENT
            yield
        DEDENT
    DEDENT
    return _patcher()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/unifiprotect/__init__.py" startline="41" endline="47">
def _patcher() :
INDENT
    with patch(
        "homeassistant.components.unifiprotect.discovery.AIOUnifiScanner",
        return_value = mock_aio_discovery,
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/braviatv/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.braviatv.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/conftest.py" startline="9" endline="10">
def yeelight_mock_get_source_ip(mock_get_source_ip) :
INDENT
    """Mock network util's async_get_source_ip."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="112" endline="118">
def __init__(self, model, bulb_type, cannot_connect) :
INDENT
    self.model = model
    self.bulb_type = bulb_type
    self._async_callback = None
    self._cannot_connect = cannot_connect
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="119" endline="124">
async def async_listen(self, callback) :
INDENT
    if self._cannot_connect :
    INDENT
        raise BulbException
    DEDENT
    self._async_callback = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="125" endline="128">
async def async_stop_listening(self) :
INDENT
    self._async_callback = None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="129" endline="133">
def set_capabilities(self, capabilities) :
INDENT
    self.capabilities = capabilities

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="134" endline="163">
def _mocked_bulb(cannot_connect = False) :
INDENT
    bulb = MockAsyncBulb(MODEL, BulbType.Color, cannot_connect)
    type(bulb).async_get_properties = AsyncMock(
        side_effect = BulbException if cannot_connect else None)
    type(bulb).get_properties = MagicMock(
        side_effect = BulbException if cannot_connect else None)
    type(bulb).get_model_specs = MagicMock(return_value = _MODEL_SPECS [MODEL])
    bulb.capabilities = CAPABILITIES.copy()
    bulb.available = True
    bulb.last_properties = PROPERTIES.copy()
    bulb.music_mode = False
    bulb.async_get_properties = AsyncMock()
    bulb.async_update = AsyncMock()
    bulb.async_turn_on = AsyncMock()
    bulb.async_turn_off = AsyncMock()
    bulb.async_set_brightness = AsyncMock()
    bulb.async_set_color_temp = AsyncMock()
    bulb.async_set_hsv = AsyncMock()
    bulb.async_set_rgb = AsyncMock()
    bulb.async_start_flow = AsyncMock()
    bulb.async_stop_flow = AsyncMock()
    bulb.async_set_power_mode = AsyncMock()
    bulb.async_set_scene = AsyncMock()
    bulb.async_set_default = AsyncMock()
    bulb.async_start_music = AsyncMock()
    return bulb

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="164" endline="181">
def _patched_ssdp_listener(info : CaseInsensitiveDict, * args, ** kwargs) :
INDENT
    listener = SsdpSearchListener(* args, ** kwargs)
    async def _async_callback(* _) :
    INDENT
        if kwargs ["source"] [0] == FAIL_TO_BIND_IP :
        INDENT
            raise OSError
        DEDENT
        listener.connect_callback()
    DEDENT
    @ callback
    def _async_search(* _) :
    INDENT
        if info :
        INDENT
            listener.callback(info)
        DEDENT
    DEDENT
    listener.async_start = _async_callback
    listener.async_search = _async_search
    return listener

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="167" endline="171">
async def _async_callback(* _) :
INDENT
    if kwargs ["source"] [0] == FAIL_TO_BIND_IP :
    INDENT
        raise OSError
    DEDENT
    listener.connect_callback()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="173" endline="176">
def _async_search(* _) :
INDENT
    if info :
    INDENT
        listener.callback(info)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="182" endline="196">
def _patch_discovery(no_device = False, capabilities = None) :
INDENT
    YeelightScanner._scanner = None
    def _generate_fake_ssdp_listener(* args, ** kwargs) :
    INDENT
        info = None
        if not no_device :
        INDENT
            info = capabilities or CAPABILITIES
        DEDENT
        return _patched_ssdp_listener(info, * args, ** kwargs)
    DEDENT
    return patch(
        "homeassistant.components.yeelight.scanner.SsdpSearchListener",
        new = _generate_fake_ssdp_listener,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="185" endline="190">
def _generate_fake_ssdp_listener(* args, ** kwargs) :
INDENT
    info = None
    if not no_device :
    INDENT
        info = capabilities or CAPABILITIES
    DEDENT
    return _patched_ssdp_listener(info, * args, ** kwargs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="197" endline="200">
def _patch_discovery_interval() :
INDENT
    return patch.object(scanner, "DISCOVERY_SEARCH_INTERVAL", timedelta(seconds = 0))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/yeelight/__init__.py" startline="201" endline="202">
def _patch_discovery_timeout() :
INDENT
    return patch.object(scanner, "DISCOVERY_TIMEOUT", 0.0001)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/melcloud/test_atw_zone_sensor.py" startline="11" endline="19">
def mock_device() :
INDENT
    with patch("homeassistant.components.melcloud.MelCloudDevice") as mock :
    INDENT
        mock.name = "name"
        mock.device.serial = 1234
        mock.device.mac = "11:11:11:11:11:11"
        yield mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/melcloud/test_atw_zone_sensor.py" startline="21" endline="27">
def mock_zone_1() :
INDENT
    with patch("pymelcloud.atw_device.Zone") as mock :
    INDENT
        mock.zone_index = 1
        yield mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/melcloud/test_atw_zone_sensor.py" startline="29" endline="35">
def mock_zone_2() :
INDENT
    with patch("pymelcloud.atw_device.Zone") as mock :
    INDENT
        mock.zone_index = 2
        yield mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/melcloud/test_atw_zone_sensor.py" startline="36" endline="50">
def test_zone_unique_ids(mock_device, mock_zone_1, mock_zone_2) -> None :
INDENT
    sensor_1 = AtwZoneSensor(
        mock_device,
        mock_zone_1,
        ATW_ZONE_SENSORS [0],
        )
    assert sensor_1.unique_id == "1234-11:11:11:11:11:11-room_temperature"
    sensor_2 = AtwZoneSensor(
        mock_device,
        mock_zone_2,
        ATW_ZONE_SENSORS [0],
        )
    assert sensor_2.unique_id == "1234-11:11:11:11:11:11-room_temperature-zone-2"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/pushbullet/conftest.py" startline="11" endline="28">
def requests_mock_fixture(requests_mock : Mocker) -> None :
INDENT
    requests_mock.get(
        PushBullet.DEVICES_URL,
        text = load_fixture("devices.json", "pushbullet"),
        )
    requests_mock.get(
        PushBullet.ME_URL,
        text = load_fixture("user_info.json", "pushbullet"),
        )
    requests_mock.get(
        PushBullet.CHATS_URL,
        text = load_fixture("chats.json", "pushbullet"),
        )
    requests_mock.get(
        PushBullet.CHANNELS_URL,
        text = load_fixture("channels.json", "pushbullet"),
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/season/conftest.py" startline="17" endline="26">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "Season",
        domain = DOMAIN,
        data = {CONF_TYPE : TYPE_ASTRONOMICAL},
        unique_id = TYPE_ASTRONOMICAL,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/season/conftest.py" startline="28" endline="31">
def mock_setup_entry() -> Generator [None, None, None] :
INDENT
    with patch("homeassistant.components.season.async_setup_entry", return_value = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluetooth_le_tracker/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/airthings_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ps4/conftest.py" startline="11" endline="18">
def patch_load_json_object() -> Generator [MagicMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.ps4.load_json_object", return_value = {}) as mock_load :
    INDENT
        yield mock_load

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ps4/conftest.py" startline="20" endline="25">
def patch_save_json() -> Generator [MagicMock, None, None] :
INDENT
    with patch("homeassistant.components.ps4.save_json") as mock_save :
    INDENT
        yield mock_save

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ps4/conftest.py" startline="27" endline="32">
def patch_get_status() -> Generator [MagicMock, None, None] :
INDENT
    with patch("pyps4_2ndscreen.ps4.get_status", return_value = None) as mock_get_status :
    INDENT
        yield mock_get_status

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ps4/conftest.py" startline="34" endline="45">
def mock_ddp_endpoint() -> Generator [None, None, None] :
INDENT
    protocol = DDPProtocol()
    protocol._local_port = DEFAULT_UDP_PORT
    protocol._transport = MagicMock()
    with patch(
        "homeassistant.components.ps4.async_create_ddp_endpoint",
        return_value = (None, protocol),
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ps4/conftest.py" startline="47" endline="53">
def patch_io(
patch_load_json_object : MagicMock,
patch_save_json : MagicMock,
patch_get_status : MagicMock,
mock_ddp_endpoint : None,
) -> None :
INDENT
    """Prevent PS4 doing I/O."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homeassistant/triggers/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/goodwe/conftest.py" startline="10" endline="26">
def fixture_mock_inverter() :
INDENT
    mock_inverter = MagicMock(spec = Inverter)
    mock_inverter.serial_number = "dummy_serial_nr"
    mock_inverter.arm_version = 1
    mock_inverter.arm_svn_version = 2
    mock_inverter.arm_firmware = "dummy.arm.version"
    mock_inverter.firmware = "dummy.fw.version"
    mock_inverter.model_name = "MOCK"
    mock_inverter.rated_power = 10000
    mock_inverter.dsp1_version = 3
    mock_inverter.dsp2_version = 4
    mock_inverter.dsp_svn_version = 5
    mock_inverter.read_runtime_data = AsyncMock(return_value = {})
    return mock_inverter
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cert_expiry/helpers.py" startline="8" endline="12">
def static_datetime() :
INDENT
    return dt_util.as_utc(datetime(2020, 6, 12, 8, 0, 0))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cert_expiry/helpers.py" startline="13" endline="16">
def future_timestamp(days) :
INDENT
    delta = timedelta(days = days, minutes = 1)
    return static_datetime() + delta
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/cert_expiry/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.cert_expiry.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/overkiz/__init__.py" startline="9" endline="16">
def load_setup_fixture(
fixture : str = "overkiz/setup_tahoma_switch.json",
) -> Setup :
INDENT
    setup_json = load_json_object_fixture(fixture)
    setup = Setup(** humps.decamelize(setup_json))
    return setup
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="21" endline="25">
def fixture_region(request) :
INDENT
    return request.param

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="27" endline="34">
def fixture_mock_auth_api() :
INDENT
    with mock.patch("homeassistant.components.whirlpool.Auth") as mock_auth :
    INDENT
        mock_auth.return_value.do_auth = AsyncMock()
        mock_auth.return_value.is_access_token_valid.return_value = True
        yield mock_auth

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="36" endline="52">
def fixture_mock_appliances_manager_api() :
INDENT
    with mock.patch(
        "homeassistant.components.whirlpool.AppliancesManager") as mock_appliances_manager :
    INDENT
        mock_appliances_manager.return_value.fetch_appliances = AsyncMock()
        mock_appliances_manager.return_value.aircons = [
            {"SAID" : MOCK_SAID1, "NAME" : "TestZone"},
            {"SAID" : MOCK_SAID2, "NAME" : "TestZone"},
            ]
        mock_appliances_manager.return_value.washer_dryers = [
            {"SAID" : MOCK_SAID3, "NAME" : "washer"},
            {"SAID" : MOCK_SAID4, "NAME" : "dryer"},
            ]
        yield mock_appliances_manager

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="54" endline="67">
def fixture_mock_appliances_manager_laundry_api() :
INDENT
    with mock.patch(
        "homeassistant.components.whirlpool.AppliancesManager") as mock_appliances_manager :
    INDENT
        mock_appliances_manager.return_value.fetch_appliances = AsyncMock()
        mock_appliances_manager.return_value.aircons = None
        mock_appliances_manager.return_value.washer_dryers = [
            {"SAID" : MOCK_SAID3, "NAME" : "washer"},
            {"SAID" : MOCK_SAID4, "NAME" : "dryer"},
            ]
        yield mock_appliances_manager

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="69" endline="76">
def fixture_mock_backend_selector_api() :
INDENT
    with mock.patch(
        "homeassistant.components.whirlpool.BackendSelector") as mock_backend_selector :
    INDENT
        yield mock_backend_selector

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="77" endline="103">
def get_aircon_mock(said) :
INDENT
    mock_aircon = mock.Mock(said = said)
    mock_aircon.connect = AsyncMock()
    mock_aircon.disconnect = AsyncMock()
    mock_aircon.register_attr_callback = MagicMock()
    mock_aircon.get_online.return_value = True
    mock_aircon.get_power_on.return_value = True
    mock_aircon.get_mode.return_value = whirlpool.aircon.Mode.Cool
    mock_aircon.get_fanspeed.return_value = whirlpool.aircon.FanSpeed.Auto
    mock_aircon.get_current_temp.return_value = 15
    mock_aircon.get_temp.return_value = 20
    mock_aircon.get_current_humidity.return_value = 80
    mock_aircon.get_humidity.return_value = 50
    mock_aircon.get_h_louver_swing.return_value = True
    mock_aircon.set_power_on = AsyncMock()
    mock_aircon.set_mode = AsyncMock()
    mock_aircon.set_temp = AsyncMock()
    mock_aircon.set_humidity = AsyncMock()
    mock_aircon.set_mode = AsyncMock()
    mock_aircon.set_fanspeed = AsyncMock()
    mock_aircon.set_h_louver_swing = AsyncMock()
    return mock_aircon

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="105" endline="109">
def fixture_mock_aircon1_api(mock_auth_api, mock_appliances_manager_api) :
INDENT
    return get_aircon_mock(MOCK_SAID1)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="111" endline="115">
def fixture_mock_aircon2_api(mock_auth_api, mock_appliances_manager_api) :
INDENT
    return get_aircon_mock(MOCK_SAID2)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="117" endline="125">
def fixture_mock_aircon_api_instances(mock_aircon1_api, mock_aircon2_api) :
INDENT
    with mock.patch(
        "homeassistant.components.whirlpool.climate.Aircon") as mock_aircon_api :
    INDENT
        mock_aircon_api.side_effect = [mock_aircon1_api, mock_aircon2_api]
        yield mock_aircon_api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="126" endline="135">
def side_effect_function(* args, ** kwargs) :
INDENT
    if args [0] == "Cavity_TimeStatusEstTimeRemaining" :
    INDENT
        return 3540
    DEDENT
    if args [0] == "Cavity_OpStatusDoorOpen" :
    INDENT
        return "0"
    DEDENT
    if args [0] == "WashCavity_OpStatusBulkDispense1Level" :
    INDENT
        return "3"

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="136" endline="156">
def get_sensor_mock(said) :
INDENT
    mock_sensor = mock.Mock(said = said)
    mock_sensor.connect = AsyncMock()
    mock_sensor.disconnect = AsyncMock()
    mock_sensor.register_attr_callback = MagicMock()
    mock_sensor.get_online.return_value = True
    mock_sensor.get_machine_state.return_value = (
        whirlpool.washerdryer.MachineState.Standby)
    mock_sensor.get_attribute.side_effect = side_effect_function
    mock_sensor.get_cycle_status_filling.return_value = False
    mock_sensor.get_cycle_status_rinsing.return_value = False
    mock_sensor.get_cycle_status_sensing.return_value = False
    mock_sensor.get_cycle_status_soaking.return_value = False
    mock_sensor.get_cycle_status_spinning.return_value = False
    mock_sensor.get_cycle_status_washing.return_value = False
    return mock_sensor

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="158" endline="162">
def fixture_mock_sensor1_api(mock_auth_api, mock_appliances_manager_laundry_api) :
INDENT
    return get_sensor_mock(MOCK_SAID3)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="164" endline="168">
def fixture_mock_sensor2_api(mock_auth_api, mock_appliances_manager_laundry_api) :
INDENT
    return get_sensor_mock(MOCK_SAID4)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/whirlpool/conftest.py" startline="170" endline="181">
def fixture_mock_sensor_api_instances(mock_sensor1_api, mock_sensor2_api) :
INDENT
    with mock.patch(
        "homeassistant.components.whirlpool.sensor.WasherDryer") as mock_sensor_api :
    INDENT
        mock_sensor_api.side_effect = [
            mock_sensor1_api,
            mock_sensor2_api,
            mock_sensor1_api,
            mock_sensor2_api,
            ]
        yield mock_sensor_api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/update/test_significant_change.py" startline="19" endline="91">
async def test_significant_change(hass : HomeAssistant) -> None :
INDENT
    assert async_check_significant_change(hass, STATE_ON, {}, STATE_OFF, {})
    assert async_check_significant_change(hass, STATE_OFF, {}, STATE_ON, {})
    assert not async_check_significant_change(hass, STATE_OFF, {}, STATE_OFF, {})
    assert not async_check_significant_change(hass, STATE_ON, {}, STATE_ON, {})
    attrs = {
        ATTR_INSTALLED_VERSION : "1.0.0",
        ATTR_IN_PROGRESS : False,
        ATTR_LATEST_VERSION : "1.0.1",
        ATTR_RELEASE_SUMMARY : "Fixes!",
        ATTR_RELEASE_URL : "https://www.example.com",
        ATTR_SKIPPED_VERSION : None,
        ATTR_TITLE : "Piece of Software",
        }
    assert not async_check_significant_change(hass, STATE_ON, attrs, STATE_ON, attrs)
    assert async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_INSTALLED_VERSION : "1.0.1"},
        )
    assert async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_LATEST_VERSION : "1.0.2"},
        )
    assert not async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_IN_PROGRESS : True},
        )
    assert not async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_RELEASE_SUMMARY : "More fixes!"},
        )
    assert not async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_RELEASE_URL : "https://www.example.com/changed_url"},
        )
    assert not async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_SKIPPED_VERSION : "1.0.0"},
        )
    assert not async_check_significant_change(
        hass,
        STATE_ON,
        attrs,
        STATE_ON,
        attrs.copy() | {ATTR_TITLE : "Renamed the software..."},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextcloud/conftest.py" startline="10" endline="18">
def mock_nextcloud_monitor() -> Mock :
INDENT
    ncm = Mock(
        update = Mock(return_value = True),
        )
    return ncm

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextcloud/conftest.py" startline="20" endline="25">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.nextcloud.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_control/__init__.py" startline="9" endline="21">
def configure_integration(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    config = {
        "username" : "test-username",
        "password" : "test-password",
        "mydevolo_url" : "https://test_mydevolo_url.test",
        }
    entry = MockConfigEntry(
        domain = DOMAIN, data = config, entry_id = "123456", unique_id = "123456")
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gogogate2/__init__.py" startline="16" endline="73">
def _mocked_gogogate_open_door_response() :
INDENT
    return GogoGate2InfoResponse(
        user = "user1",
        gogogatename = "gogogatename0",
        model = "gogogate2",
        apiversion = "",
        remoteaccessenabled = False,
        remoteaccess = "abc123.blah.blah",
        firmwareversion = "222",
        apicode = "",
        door1 = GogoGate2Door(
            door_id = 1,
            permission = True,
            name = "Door1",
            gate = False,
            mode = DoorMode.GARAGE,
            status = DoorStatus.OPENED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 2,
            temperature = None,
            voltage = 40,
            ),
        door2 = GogoGate2Door(
            door_id = 2,
            permission = True,
            name = None,
            gate = True,
            mode = DoorMode.GARAGE,
            status = DoorStatus.UNDEFINED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 0,
            temperature = None,
            voltage = 40,
            ),
        door3 = GogoGate2Door(
            door_id = 3,
            permission = True,
            name = None,
            gate = False,
            mode = DoorMode.GARAGE,
            status = DoorStatus.UNDEFINED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 0,
            temperature = None,
            voltage = 40,
            ),
        outputs = Outputs(output1 = True, output2 = False, output3 = True),
        network = Network(ip = ""),
        wifi = Wifi(SSID = "", linkquality = "", signal = ""),
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gogogate2/__init__.py" startline="74" endline="139">
def _mocked_ismartgate_closed_door_response() :
INDENT
    return ISmartGateInfoResponse(
        user = "user1",
        ismartgatename = "ismartgatename0",
        model = "ismartgatePRO",
        apiversion = "",
        remoteaccessenabled = True,
        remoteaccess = "abc321.blah.blah",
        firmwareversion = "555",
        pin = 123,
        lang = "en",
        newfirmware = False,
        door1 = ISmartGateDoor(
            door_id = 1,
            permission = True,
            name = "Door1",
            gate = False,
            mode = DoorMode.GARAGE,
            status = DoorStatus.CLOSED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 2,
            temperature = None,
            enabled = True,
            apicode = "apicode0",
            customimage = False,
            voltage = 40,
            ),
        door2 = ISmartGateDoor(
            door_id = 2,
            permission = True,
            name = "Door2",
            gate = True,
            mode = DoorMode.GARAGE,
            status = DoorStatus.CLOSED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 2,
            temperature = None,
            enabled = True,
            apicode = "apicode0",
            customimage = False,
            voltage = 40,
            ),
        door3 = ISmartGateDoor(
            door_id = 3,
            permission = True,
            name = None,
            gate = False,
            mode = DoorMode.GARAGE,
            status = DoorStatus.UNDEFINED,
            sensor = True,
            sensorid = None,
            camera = False,
            events = 0,
            temperature = None,
            enabled = True,
            apicode = "apicode0",
            customimage = False,
            voltage = 40,
            ),
        network = Network(ip = ""),
        wifi = Wifi(SSID = "", linkquality = "", signal = ""),
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/conftest.py" startline="19" endline="26">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.mystrom.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/conftest.py" startline="28" endline="37">
def config_entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    config_entry = MockConfigEntry(
        domain = DOMAIN,
        unique_id = DEVICE_MAC,
        data = {CONF_HOST : "1.1.1.1"},
        title = DEVICE_NAME,
        )
    config_entry.add_to_hass(hass)
    return config_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="6" endline="24">
def get_default_device_response(device_type : int | None) -> dict [str, Any] :
INDENT
    response = {
        "version" : "2.59.32",
        "mac" : "6001940376EB",
        "ssid" : "personal",
        "ip" : "192.168.0.23",
        "mask" : "255.255.255.0",
        "gw" : "192.168.0.1",
        "dns" : "192.168.0.1",
        "static" : False,
        "connected" : True,
        "signal" : 94,
        }
    if device_type is not None :
    INDENT
        response ["type"] = device_type
    DEDENT
    return response

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="25" endline="40">
def get_default_bulb_state() -> dict [str, Any] :
INDENT
    return {
        "type" : "rgblamp",
        "battery" : False,
        "reachable" : True,
        "meshroot" : True,
        "on" : False,
        "color" : "46;18;100",
        "mode" : "hsv",
        "ramp" : 10,
        "power" : 0.45,
        "fw_version" : "2.58.0",
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="41" endline="60">
def get_default_switch_state() -> dict [str, Any] :
INDENT
    return {
        "power" : 1.69,
        "Ws" : 0.81,
        "relay" : True,
        "temperature" : 24.87,
        "version" : "2.59.32",
        "mac" : "6001940376EB",
        "ssid" : "personal",
        "ip" : "192.168.0.23",
        "mask" : "255.255.255.0",
        "gw" : "192.168.0.1",
        "dns" : "192.168.0.1",
        "static" : False,
        "connected" : True,
        "signal" : 94,
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="64" endline="68">
def __init__(self, state : dict [str, Any]) -> None :
INDENT
    self._requested_state = False
    self._state = state
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="69" endline="73">
async def get_state(self) -> None :
INDENT
    self._requested_state = True

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="77" endline="81">
def __init__(self, mac : str, state : dict [str, Any]) -> None :
INDENT
    super().__init__(state)
    self.mac = mac
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="83" endline="88">
def firmware(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["fw_version"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="90" endline="95">
def consumption(self) -> float | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["power"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="97" endline="102">
def color(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["color"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="104" endline="109">
def mode(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["mode"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="111" endline="116">
def transition_time(self) -> int | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["ramp"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="118" endline="123">
def bulb_type(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["type"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="125" endline="131">
def state(self) -> bool | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["on"]

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="136" endline="141">
def relay(self) -> bool | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["on"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="143" endline="148">
def consumption(self) -> float | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["power"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="150" endline="155">
def consumedWs(self) -> float | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["Ws"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="157" endline="162">
def firmware(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["version"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="164" endline="169">
def mac(self) -> str | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["mac"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mystrom/__init__.py" startline="171" endline="175">
def temperature(self) -> float | None :
INDENT
    if not self._requested_state :
    INDENT
        return None
    DEDENT
    return self._state ["temperature"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/weatherkit/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.weatherkit.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/android_ip_webcam/conftest.py" startline="13" endline="26">
def aioclient_mock_fixture(aioclient_mock) -> None :
INDENT
    aioclient_mock.get(
        "http://1.1.1.1:8080/status.json?show_avail=1",
        text = load_fixture("android_ip_webcam/status_data.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
    aioclient_mock.get(
        "http://1.1.1.1:8080/sensors.json",
        text = load_fixture("android_ip_webcam/sensor_data.json"),
        status = HTTPStatus.OK,
        headers = {"Content-Type" : CONTENT_TYPE_JSON},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/wallbox/conftest.py" startline="13" endline="25">
def entry(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_USERNAME : "test_username",
            CONF_PASSWORD : "test_password",
            CONF_STATION : "12345",
            },
        entry_id = "testEntry",
        )
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/meteoclimatic/conftest.py" startline="9" endline="14">
def patch_requests() :
INDENT
    patch_client = patch("homeassistant.components.meteoclimatic.MeteoclimaticClient")
    with patch_client :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/netatmo/test_api.py" startline="10" endline="17">
async def test_get_api_scopes_cloud() -> None :
INDENT
    result = api.get_api_scopes(cloud.DOMAIN)
    for scope in API_SCOPES_EXCLUDED_FROM_CLOUD :
    INDENT
        assert scope not in result
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/netatmo/test_api.py" startline="18" endline="22">
async def test_get_api_scopes_other() -> None :
INDENT
    result = api.get_api_scopes("netatmo_239846i2f0j2")
    assert sorted(ALL_SCOPES) == result
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/network/conftest.py" startline="7" endline="10">
def mock_get_source_ip() :
INDENT
    """Override mock of network util's async_get_source_ip."""

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/network/conftest.py" startline="12" endline="13">
def mock_network() :
INDENT
    """Override mock of network util's async_get_adapters."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="14" endline="42">
async def anova_api(
hass : HomeAssistant,
) -> AnovaApi :
INDENT
    api_mock = AsyncMock()
    new_device = AnovaPrecisionCooker(None, DEVICE_UNIQUE_ID, "type_sample", None)
    async def authenticate_side_effect() :
    INDENT
        api_mock.jwt = "my_test_jwt"
    DEDENT
    async def get_devices_side_effect() :
    INDENT
        if not api_mock.existing_devices :
        INDENT
            api_mock.existing_devices = []
        DEDENT
        api_mock.existing_devices = api_mock.existing_devices + [new_device]
        return [new_device]
    DEDENT
    api_mock.authenticate.side_effect = authenticate_side_effect
    api_mock.get_devices.side_effect = get_devices_side_effect
    with patch("homeassistant.components.anova.AnovaApi", return_value = api_mock) :
    INDENT
        api = AnovaApi(
            None,
            "sample@gmail.com",
            "sample",
            )
        yield api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="22" endline="24">
async def authenticate_side_effect() :
INDENT
    api_mock.jwt = "my_test_jwt"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="25" endline="30">
async def get_devices_side_effect() :
INDENT
    if not api_mock.existing_devices :
    INDENT
        api_mock.existing_devices = []
    DEDENT
    api_mock.existing_devices = api_mock.existing_devices + [new_device]
    return [new_device]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="44" endline="67">
async def anova_api_no_devices(
hass : HomeAssistant,
) -> AnovaApi :
INDENT
    api_mock = AsyncMock()
    async def authenticate_side_effect() :
    INDENT
        api_mock.jwt = "my_test_jwt"
    DEDENT
    async def get_devices_side_effect() :
    INDENT
        raise NoDevicesFound()
    DEDENT
    api_mock.authenticate.side_effect = authenticate_side_effect
    api_mock.get_devices.side_effect = get_devices_side_effect
    with patch("homeassistant.components.anova.AnovaApi", return_value = api_mock) :
    INDENT
        api = AnovaApi(
            None,
            "sample@gmail.com",
            "sample",
            )
        yield api

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="50" endline="52">
async def authenticate_side_effect() :
INDENT
    api_mock.jwt = "my_test_jwt"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="53" endline="55">
async def get_devices_side_effect() :
INDENT
    raise NoDevicesFound()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="69" endline="86">
async def anova_api_wrong_login(
hass : HomeAssistant,
) -> AnovaApi :
INDENT
    api_mock = AsyncMock()
    async def authenticate_side_effect() :
    INDENT
        raise InvalidLogin()
    DEDENT
    api_mock.authenticate.side_effect = authenticate_side_effect
    with patch("homeassistant.components.anova.AnovaApi", return_value = api_mock) :
    INDENT
        api = AnovaApi(
            None,
            "sample@gmail.com",
            "sample",
            )
        yield api
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/anova/conftest.py" startline="75" endline="77">
async def authenticate_side_effect() :
INDENT
    raise InvalidLogin()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/smhi/common.py" startline="9" endline="11">
async def __call__(self, * args, ** kwargs) :
INDENT
    return super().__call__(* args, ** kwargs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/smhi/conftest.py" startline="11" endline="15">
def api_response() :
INDENT
    return load_fixture("smhi.json", DOMAIN)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/smhi/conftest.py" startline="17" endline="19">
def api_response_lack_data() :
INDENT
    return load_fixture("smhi_short.json", DOMAIN)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecoforest/conftest.py" startline="17" endline="24">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.ecoforest.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecoforest/conftest.py" startline="26" endline="34">
def config_fixture() :
INDENT
    return {
        CONF_HOST : "1.1.1.1",
        CONF_USERNAME : "test-username",
        CONF_PASSWORD : "test-password",
        }

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecoforest/conftest.py" startline="36" endline="40">
def serial_number_fixture() :
INDENT
    return "1234"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecoforest/conftest.py" startline="42" endline="62">
def mock_device_fixture(serial_number) :
INDENT
    mock = Mock(spec = Device)
    mock.model = "model-version"
    mock.model_name = "model-name"
    mock.firmware = "firmware-version"
    mock.serial_number = serial_number
    mock.operation_mode = OperationMode.POWER
    mock.on = False
    mock.state = State.OFF
    mock.power = 3
    mock.temperature = 21.5
    mock.alarm = Alarm.PELLETS
    mock.alarm_code = "A099"
    mock.environment_temperature = 23.5
    mock.cpu_temperature = 36.1
    mock.gas_temperature = 40.2
    mock.ntc_temperature = 24.2
    return mock

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecoforest/conftest.py" startline="64" endline="74">
def config_entry_fixture(hass : HomeAssistant, config, serial_number) :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        entry_id = "45a36e55aaddb2007c5f6602e0c38e72",
        title = f"Ecoforest {serial_number}",
        unique_id = serial_number,
        data = config,
        )
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/inkbird/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sentry/conftest.py" startline="15" endline="19">
def config_entry_fixture() -> MockConfigEntry :
INDENT
    return MockConfigEntry(domain = DOMAIN, title = "Sentry")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/sentry/conftest.py" startline="21" endline="23">
def config_fixture() -> dict [str, Any] :
INDENT
    return {DOMAIN : {"dsn" : "http://public@sentry.local/1"}}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/v2c/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.v2c.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/fints/test_client.py" startline="53" endline="95">
async def test_account_type(
account_number : Optional [str],
iban : Optional [str],
product_name : str,
account_type : Optional [int],
expected_balance_result : bool,
expected_holdings_result : bool,
) -> None :
INDENT
    credentials = BankCredentials(
        blz = 1234, login = "test", pin = "0000", url = "https://example.com")
    account_config = {"GIRO3" : True}
    holdings_config = {"DEPOT2" : True}
    client = FinTsClient(
        credentials = credentials,
        name = "test",
        account_config = account_config,
        holdings_config = holdings_config,
        )
    client._account_information_fetched = True
    client._account_information = {
        iban : BANK_INFORMATION
        | {
            "account_number" : account_number,
            "iban" : iban,
            "product_name" : product_name,
            "type" : account_type,
            }}
    sepa_account = SEPAAccount(
        iban = iban,
        bic = "BANCODELTEST",
        accountnumber = account_number,
        subaccount = None,
        blz = "12345",
        )
    assert client.is_balance_account(sepa_account) == expected_balance_result
    assert client.is_holdings_account(sepa_account) == expected_holdings_result
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextbus/test_util.py" startline="18" endline="22">
def test_listify(input : Any, expected : list [Any]) -> None :
INDENT
    assert listify(input) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextbus/test_util.py" startline="33" endline="35">
def test_maybe_first(input : list [Any] | None, expected : Any) -> None :
INDENT
    assert maybe_first(input) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextbus/conftest.py" startline="24" endline="31">
def route_config_direction(request : pytest.FixtureRequest) -> Any :
INDENT
    return request.param

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nextbus/conftest.py" startline="33" endline="56">
def mock_nextbus_lists(
mock_nextbus : MagicMock, route_config_direction : Any
) -> MagicMock :
INDENT
    instance = mock_nextbus.return_value
    instance.get_agency_list.return_value = {
        "agency" : [{"tag" : "sf-muni", "title" : "San Francisco Muni"}]}
    instance.get_route_list.return_value = {
        "route" : [{"tag" : "F", "title" : "F - Market & Wharves"}]}
    instance.get_route_config.return_value = {
        "route" : {
            "stop" : [
                {"tag" : "5650", "title" : "Market St & 7th St"},
                {"tag" : "5651", "title" : "Market St & 7th St"},
                {"tag" : "5652", "title" : "Market St & 7th St"},
                ],
            "direction" : route_config_direction,
            }}
    return instance
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/icloud/conftest.py" startline="9" endline="14">
def icloud_not_create_dir() :
INDENT
    with patch(
        "homeassistant.components.icloud.config_flow.os.path.exists", return_value = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aosmith/test_sensor.py" startline="22" endline="34">
async def test_setup(
hass : HomeAssistant,
entity_registry : er.EntityRegistry,
init_integration : MockConfigEntry,
entity_id : str,
unique_id : str,
) -> None :
INDENT
    entry = entity_registry.async_get(entity_id)
    assert entry
    assert entry.unique_id == unique_id
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aosmith/test_sensor.py" startline="42" endline="50">
async def test_state(
hass : HomeAssistant,
init_integration : MockConfigEntry,
snapshot : SnapshotAssertion,
entity_id : str,
) -> None :
INDENT
    state = hass.states.get(entity_id)
    assert state == snapshot
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/landisgyr_heat_meter/conftest.py" startline="10" endline="16">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.landisgyr_heat_meter.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/brother/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.brother.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="13" endline="24">
def mock_config_entry(hass) :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        data = {"host" : "http://example.com", "username" : "dummy", "password" : "dummypw"},
        version = 1,
        minor_version = 2,
        )
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="26" endline="37">
def mock_version_api(hass) :
INDENT
    resp = {
        "api" : "2.0.0",
        "server" : "2.1.2",
        "text" : "PrusaLink",
        "hostname" : "PrusaXL",
        }
    with patch("pyprusalink.PrusaLink.get_version", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="39" endline="51">
def mock_info_api(hass) :
INDENT
    resp = {
        "nozzle_diameter" : 0.40,
        "mmu" : False,
        "serial" : "serial-1337",
        "hostname" : "PrusaXL",
        "min_extrusion_temp" : 170,
        }
    with patch("pyprusalink.PrusaLink.get_info", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="53" endline="59">
def mock_get_legacy_printer(hass) :
INDENT
    resp = {"telemetry" : {"material" : "PLA"}}
    with patch("pyprusalink.PrusaLink.get_legacy_printer", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="61" endline="87">
def mock_get_status_idle(hass) :
INDENT
    resp = {
        "storage" : {
            "path" : "/usb/",
            "name" : "usb",
            "read_only" : False,
            },
        "printer" : {
            "state" : "IDLE",
            "temp_bed" : 41.9,
            "target_bed" : 60.5,
            "temp_nozzle" : 47.8,
            "target_nozzle" : 210.1,
            "axis_z" : 1.8,
            "axis_x" : 7.9,
            "axis_y" : 8.4,
            "flow" : 100,
            "speed" : 100,
            "fan_hotend" : 100,
            "fan_print" : 75,
            },
        }
    with patch("pyprusalink.PrusaLink.get_status", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="89" endline="115">
def mock_get_status_printing(hass) :
INDENT
    resp = {
        "job" : {
            "id" : 129,
            "progress" : 37.00,
            "time_remaining" : 73020,
            "time_printing" : 43987,
            },
        "storage" : {"path" : "/usb/", "name" : "usb", "read_only" : False},
        "printer" : {
            "state" : "PRINTING",
            "temp_bed" : 53.9,
            "target_bed" : 85.0,
            "temp_nozzle" : 6.0,
            "target_nozzle" : 0.0,
            "axis_z" : 5.0,
            "flow" : 100,
            "speed" : 100,
            "fan_hotend" : 5000,
            "fan_print" : 2500,
            },
        }
    with patch("pyprusalink.PrusaLink.get_status", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="117" endline="123">
def mock_job_api_idle(hass) :
INDENT
    resp = {}
    with patch("pyprusalink.PrusaLink.get_job", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="125" endline="149">
def mock_job_api_printing(hass) :
INDENT
    resp = {
        "id" : 129,
        "state" : "PRINTING",
        "progress" : 37.00,
        "time_remaining" : 73020,
        "time_printing" : 43987,
        "file" : {
            "refs" : {
                "icon" : "/thumb/s/usb/TabletStand3~4.BGC",
                "thumbnail" : "/thumb/l/usb/TabletStand3~4.BGC",
                "download" : "/usb/TabletStand3~4.BGC",
                },
            "name" : "TabletStand3~4.BGC",
            "display_name" : "TabletStand3.bgcode",
            "path" : "/usb",
            "size" : 754535,
            "m_timestamp" : 1698686881,
            },
        }
    with patch("pyprusalink.PrusaLink.get_job", return_value = resp) :
    INDENT
        yield resp

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="151" endline="156">
def mock_job_api_paused(hass, mock_get_status_printing, mock_job_api_printing) :
INDENT
    mock_job_api_printing ["state"] = "PAUSED"
    mock_get_status_printing ["printer"] ["state"] = "PAUSED"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/prusalink/conftest.py" startline="158" endline="165">
def mock_api(
mock_version_api,
mock_info_api,
mock_get_legacy_printer,
mock_get_status_idle,
mock_job_api_idle,
) :
INDENT
    """Mock PrusaLink API."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kegtron/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ccm15/conftest.py" startline="11" endline="18">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.ccm15.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ccm15/conftest.py" startline="20" endline="33">
def ccm15_device() -> Generator [AsyncMock, None, None] :
INDENT
    ccm15_devices = {
        0 : CCM15SlaveDevice(bytes.fromhex("000000b0b8001b")),
        1 : CCM15SlaveDevice(bytes.fromhex("00000041c0001a")),
        }
    device_state = CCM15DeviceState(devices = ccm15_devices)
    with patch(
        "homeassistant.components.ccm15.coordinator.CCM15Device.get_status_async",
        return_value = device_state,
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ccm15/conftest.py" startline="35" endline="42">
def network_failure_ccm15_device() -> Generator [AsyncMock, None, None] :
INDENT
    device_state = CCM15DeviceState(devices = {})
    with patch(
        "homeassistant.components.ccm15.coordinator.CCM15Device.get_status_async",
        return_value = device_state,
        ) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/daikin/test_temperature_format.py" startline="6" endline="11">
def test_int_conversion() -> None :
INDENT
    formatted = format_target_temperature("16")
    assert formatted == "16"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/daikin/test_temperature_format.py" startline="12" endline="21">
def test_rounding() -> None :
INDENT
    formatted = format_target_temperature("16.1")
    assert formatted == "16"
    formatted = format_target_temperature("16.3")
    assert formatted == "16.5"
    formatted = format_target_temperature("16.65")
    assert formatted == "16.5"
    formatted = format_target_temperature("16.9")
    assert formatted == "17"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zwave_js/common.py" startline="53" endline="63">
def replace_value_of_zwave_value(
node_data : NodeDataType, matchers : list [ZwaveValueMatcher], new_value : Any
) -> NodeDataType :
INDENT
    new_node_data = deepcopy(node_data)
    for value_data in new_node_data ["values"] :
    INDENT
        for matcher in matchers :
        INDENT
            if value_matches_matcher(matcher, value_data) :
            INDENT
                value_data ["value"] = new_value
            DEDENT
        DEDENT
    DEDENT
    return new_node_data
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zwave_js/test_event.py" startline="18" endline="66">
async def test_basic(
hass : HomeAssistant, client, fan_honeywell_39358, integration
) -> None :
INDENT
    dt_util.now()
    fut = dt_util.now() + timedelta(minutes = 1)
    node = fan_honeywell_39358
    state = hass.states.get(BASIC_EVENT_VALUE_ENTITY)
    assert state
    assert state.state == STATE_UNKNOWN
    event = Event(
        type = "value notification",
        data = {
            "source" : "node",
            "event" : "value notification",
            "nodeId" : node.node_id,
            "args" : {
                "commandClassName" : "Basic",
                "commandClass" : 32,
                "endpoint" : 0,
                "property" : "event",
                "propertyName" : "event",
                "value" : 255,
                "metadata" : {
                    "type" : "number",
                    "readable" : True,
                    "writeable" : False,
                    "min" : 0,
                    "max" : 255,
                    "label" : "Event value",
                    },
                "ccVersion" : 1,
                },
            },
        )
    with freeze_time(fut) :
    INDENT
        node.receive_event(event)
    DEDENT
    state = hass.states.get(BASIC_EVENT_VALUE_ENTITY)
    assert state
    assert state.state == dt_util.as_utc(fut).isoformat(timespec = "milliseconds")
    attributes = state.attributes
    assert attributes [ATTR_EVENT_TYPE] == "Basic event value"
    assert attributes [ATTR_VALUE] == 255
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zwave_js/test_event.py" startline="67" endline="176">
async def test_central_scene(
hass : HomeAssistant, client, central_scene_node, integration
) -> None :
INDENT
    dt_util.now()
    fut = dt_util.now() + timedelta(minutes = 1)
    node = central_scene_node
    state = hass.states.get(CENTRAL_SCENE_ENTITY)
    assert state
    assert state.state == STATE_UNKNOWN
    event = Event(
        type = "value notification",
        data = {
            "source" : "node",
            "event" : "value notification",
            "nodeId" : node.node_id,
            "args" : {
                "endpoint" : 0,
                "commandClass" : 91,
                "commandClassName" : "Central Scene",
                "property" : "scene",
                "propertyKey" : "002",
                "propertyName" : "scene",
                "propertyKeyName" : "002",
                "ccVersion" : 3,
                "metadata" : {
                    "type" : "number",
                    "readable" : True,
                    "writeable" : False,
                    "label" : "Scene 002",
                    "min" : 0,
                    "max" : 255,
                    "states" : {
                        "0" : "KeyPressed",
                        "1" : "KeyReleased",
                        "2" : "KeyHeldDown",
                        "3" : "KeyPressed2x",
                        "4" : "KeyPressed3x",
                        "5" : "KeyPressed4x",
                        "6" : "KeyPressed5x",
                        },
                    "stateful" : False,
                    "secret" : False,
                    },
                "value" : 1,
                },
            },
        )
    with freeze_time(fut) :
    INDENT
        node.receive_event(event)
    DEDENT
    state = hass.states.get(CENTRAL_SCENE_ENTITY)
    assert state
    assert state.state == dt_util.as_utc(fut).isoformat(timespec = "milliseconds")
    attributes = state.attributes
    assert attributes [ATTR_EVENT_TYPE] == "KeyReleased"
    assert attributes [ATTR_VALUE] == 1
    event = Event(
        type = "value notification",
        data = {
            "source" : "node",
            "event" : "value notification",
            "nodeId" : node.node_id,
            "args" : {
                "endpoint" : 0,
                "commandClass" : 91,
                "commandClassName" : "Central Scene",
                "property" : "scene",
                "propertyKey" : "002",
                "propertyName" : "scene",
                "propertyKeyName" : "002",
                "ccVersion" : 3,
                "metadata" : {
                    "type" : "number",
                    "readable" : True,
                    "writeable" : False,
                    "label" : "Scene 002",
                    "min" : 0,
                    "max" : 255,
                    "states" : {
                        "0" : "KeyPressed",
                        "1" : "KeyReleased",
                        "2" : "KeyHeldDown",
                        "3" : "KeyPressed2x",
                        "4" : "KeyPressed3x",
                        "5" : "KeyPressed4x",
                        "6" : "KeyPressed5x",
                        },
                    "stateful" : False,
                    "secret" : False,
                    },
                },
            },
        )
    with freeze_time(fut + timedelta(minutes = 10)) :
    INDENT
        node.receive_event(event)

    DEDENT
    state = hass.states.get(CENTRAL_SCENE_ENTITY)
    assert state
    assert state.state == dt_util.as_utc(fut).isoformat(timespec = "milliseconds")
    attributes = state.attributes
    assert attributes [ATTR_EVENT_TYPE] == "KeyReleased"
    assert attributes [ATTR_VALUE] == 1
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zwave_js/test_config_validation.py" startline="9" endline="27">
def test_boolean_validation() -> None :
INDENT
    assert boolean(True)
    assert not boolean(False)
    assert boolean("TRUE")
    assert not boolean("FALSE")
    assert boolean("ON")
    assert not boolean("NO")
    with pytest.raises(vol.Invalid) :
    INDENT
        boolean("1")
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        boolean("0")
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        boolean(1)
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        boolean(0)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vacuum/test_significant_change.py" startline="15" endline="21">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vacuum/test_significant_change.py" startline="45" endline="52">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vacuum/test_init.py" startline="9" endline="42">
async def test_supported_features_compat(hass : HomeAssistant) -> None :
INDENT
    features = (
        VacuumEntityFeature.BATTERY
        | VacuumEntityFeature.FAN_SPEED
        | VacuumEntityFeature.START
        | VacuumEntityFeature.STOP
        | VacuumEntityFeature.PAUSE)
    class _LegacyConstantsStateVacuum(StateVacuumEntity) :
    INDENT
        _attr_supported_features = int(features)
        _attr_fan_speed_list = ["silent", "normal", "pet hair"]
    DEDENT
    entity = _LegacyConstantsStateVacuum()
    assert isinstance(entity.supported_features, int)
    assert entity.supported_features == int(features)
    assert entity.supported_features_compat is (
        VacuumEntityFeature.BATTERY
        | VacuumEntityFeature.FAN_SPEED
        | VacuumEntityFeature.START
        | VacuumEntityFeature.STOP
        | VacuumEntityFeature.PAUSE)
    assert entity.state_attributes == {
        "battery_level" : None,
        "battery_icon" : "mdi:battery-unknown",
        "fan_speed" : None,
        }
    assert entity.capability_attributes == {
        "fan_speed_list" : ["silent", "normal", "pet hair"]}
    assert entity._deprecated_supported_features_reported
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="12" endline="95">
def mock_litejet() :
INDENT
    with patch("pylitejet.LiteJet") as mock_pylitejet :
    INDENT
        async def get_load_name(number) :
        INDENT
            return f"Mock Load #{number}"
        DEDENT
        async def get_scene_name(number) :
        INDENT
            return f"Mock Scene #{number}"
        DEDENT
        async def get_switch_name(number) :
        INDENT
            return f"Mock Switch #{number}"
        DEDENT
        def get_switch_keypad_number(number) :
        INDENT
            return number + 100
        DEDENT
        def get_switch_keypad_name(number) :
        INDENT
            return f"Mock Keypad #{number + 100}"
        DEDENT
        mock_lj = mock_pylitejet.return_value
        mock_lj.switch_pressed_callbacks = {}
        mock_lj.switch_released_callbacks = {}
        mock_lj.load_activated_callbacks = {}
        mock_lj.load_deactivated_callbacks = {}
        mock_lj.connected_changed_callbacks = []
        def on_switch_pressed(number, callback) :
        INDENT
            mock_lj.switch_pressed_callbacks [number] = callback
        DEDENT
        def on_switch_released(number, callback) :
        INDENT
            mock_lj.switch_released_callbacks [number] = callback
        DEDENT
        def on_load_activated(number, callback) :
        INDENT
            mock_lj.load_activated_callbacks [number] = callback
        DEDENT
        def on_load_deactivated(number, callback) :
        INDENT
            mock_lj.load_deactivated_callbacks [number] = callback
        DEDENT
        def on_connected_changed(callback) :
        INDENT
            mock_lj.connected_changed_callbacks.append(callback)
        DEDENT
        mock_lj.on_switch_pressed.side_effect = on_switch_pressed
        mock_lj.on_switch_released.side_effect = on_switch_released
        mock_lj.on_load_activated.side_effect = on_load_activated
        mock_lj.on_load_deactivated.side_effect = on_load_deactivated
        mock_lj.on_connected_changed.side_effect = on_connected_changed
        mock_lj.open = AsyncMock()
        mock_lj.close = AsyncMock()
        mock_lj.loads.return_value = range(1, 3)
        mock_lj.get_load_name = AsyncMock(side_effect = get_load_name)
        mock_lj.get_load_level = AsyncMock(return_value = 0)
        mock_lj.activate_load = AsyncMock()
        mock_lj.activate_load_at = AsyncMock()
        mock_lj.deactivate_load = AsyncMock()
        mock_lj.button_switches.return_value = range(1, 3)
        mock_lj.all_switches.return_value = range(1, 6)
        mock_lj.get_switch_name = AsyncMock(side_effect = get_switch_name)
        mock_lj.press_switch = AsyncMock()
        mock_lj.release_switch = AsyncMock()
        mock_lj.get_switch_keypad_number = Mock(side_effect = get_switch_keypad_number)
        mock_lj.get_switch_keypad_name = Mock(side_effect = get_switch_keypad_name)
        mock_lj.scenes.return_value = range(1, 3)
        mock_lj.get_scene_name = AsyncMock(side_effect = get_scene_name)
        mock_lj.activate_scene = AsyncMock()
        mock_lj.deactivate_scene = AsyncMock()
        mock_lj.start_time = dt_util.utcnow()
        mock_lj.last_delta = timedelta(0)
        mock_lj.connected = True
        mock_lj.model_name = "MockJet"
        def connected_changed(connected : bool, reason : str) -> None :
        INDENT
            mock_lj.connected = connected
            for callback in mock_lj.connected_changed_callbacks :
            INDENT
                callback(connected, reason)
            DEDENT
        DEDENT
        mock_lj.connected_changed = connected_changed
        yield mock_lj
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="16" endline="18">
async def get_load_name(number) :
INDENT
    return f"Mock Load #{number}"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="19" endline="21">
async def get_scene_name(number) :
INDENT
    return f"Mock Scene #{number}"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="22" endline="24">
async def get_switch_name(number) :
INDENT
    return f"Mock Switch #{number}"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="25" endline="27">
def get_switch_keypad_number(number) :
INDENT
    return number + 100
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="28" endline="30">
def get_switch_keypad_name(number) :
INDENT
    return f"Mock Keypad #{number + 100}"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="39" endline="41">
def on_switch_pressed(number, callback) :
INDENT
    mock_lj.switch_pressed_callbacks [number] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="42" endline="44">
def on_switch_released(number, callback) :
INDENT
    mock_lj.switch_released_callbacks [number] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="45" endline="47">
def on_load_activated(number, callback) :
INDENT
    mock_lj.load_activated_callbacks [number] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="48" endline="50">
def on_load_deactivated(number, callback) :
INDENT
    mock_lj.load_deactivated_callbacks [number] = callback
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="51" endline="53">
def on_connected_changed(callback) :
INDENT
    mock_lj.connected_changed_callbacks.append(callback)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/litejet/conftest.py" startline="88" endline="92">
def connected_changed(connected : bool, reason : str) -> None :
INDENT
    mock_lj.connected = connected
    for callback in mock_lj.connected_changed_callbacks :
    INDENT
        callback(connected, reason)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vizio/const.py" startline="50" endline="55">
def __init__(self, ch_type : int, token : int) -> None :
INDENT
    self.ch_type = ch_type
    self.token = token

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vizio/const.py" startline="59" endline="63">
def __init__(self, auth_token : str) -> None :
INDENT
    self.auth_token = auth_token

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/automation/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/holiday/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.holiday.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="24" endline="51">
def mock_session_response(* args, ** kwargs) :
INDENT
    class MockSessionResponse :
    INDENT
        def __init__(self, text, status_code) :
        INDENT
            self.text = text
            self.status_code = status_code

        DEDENT
    DEDENT
    if args [0].headers ["Authorization"] ! = "Basic Zm9vOmJhcg==" :
    INDENT
        return MockSessionResponse(None, 401)
    DEDENT
    if "gimmie_bad_data" in args [0].body :
    INDENT
        return MockSessionResponse("This shouldn't (wldev = be here.;", 200)
    DEDENT
    if "gimmie_good_data" in args [0].body :
    INDENT
        return MockSessionResponse(
            "wldev = [ ['eth1','F4:F5:D8:AA:AA:AA',"
            "-42,5500,1000,7043,0],['eth1','58:EF:68:00:00:00',"
            "-42,5500,1000,7043,0]];\n"
            "dhcpd_lease = [ ['chromecast','172.10.10.5','F4:F5:D8:AA:AA:AA',"
            "'0 days, 16:17:08'],['wemo','172.10.10.6','58:EF:68:00:00:00',"
            "'0 days, 12:09:08']];",
            200,
            )
    DEDENT
    return MockSessionResponse(None, 200)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="28" endline="33">
def __init__(self, text, status_code) :
INDENT
    self.text = text
    self.status_code = status_code

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="53" endline="60">
def mock_exception_logger() :
INDENT
    with mock.patch(
        "homeassistant.components.tomato.device_tracker._LOGGER.exception") as mock_exception_logger :
    INDENT
        yield mock_exception_logger

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="62" endline="67">
def mock_session_send() :
INDENT
    with mock.patch("requests.Session.send") as mock_session_send :
    INDENT
        yield mock_session_send

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="68" endline="91">
def test_config_missing_optional_params(hass : HomeAssistant, mock_session_send) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "password",
                tomato.CONF_HTTP_ID : "1234567890",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "http://tomato-router:80/update.cgi"
    assert result.req.headers == {
        "Content-Length" : "32",
        "Content-Type" : "application/x-www-form-urlencoded",
        "Authorization" : "Basic Zm9vOnBhc3N3b3Jk",
        }
    assert "_http_id=1234567890" in result.req.body
    assert "exec=devlist" in result.req.body
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="94" endline="110">
def test_config_default_nonssl_port(hass : HomeAssistant, mock_session_send) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "password",
                tomato.CONF_HTTP_ID : "1234567890",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "http://tomato-router:80/update.cgi"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="113" endline="130">
def test_config_default_ssl_port(hass : HomeAssistant, mock_session_send) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_SSL : True,
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "password",
                tomato.CONF_HTTP_ID : "1234567890",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "https://tomato-router:443/update.cgi"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="133" endline="163">
def test_config_verify_ssl_but_no_ssl_enabled(
hass : HomeAssistant, mock_session_send
) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : False,
                CONF_VERIFY_SSL : "/test/tomato.crt",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "password",
                tomato.CONF_HTTP_ID : "1234567890",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "http://tomato-router:1234/update.cgi"
    assert result.req.headers == {
        "Content-Length" : "32",
        "Content-Type" : "application/x-www-form-urlencoded",
        "Authorization" : "Basic Zm9vOnBhc3N3b3Jk",
        }
    assert "_http_id=1234567890" in result.req.body
    assert "exec=devlist" in result.req.body
    assert mock_session_send.call_count == 1
    assert mock_session_send.mock_calls [0] == mock.call(result.req, timeout = 60)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="166" endline="199">
def test_config_valid_verify_ssl_path(hass : HomeAssistant, mock_session_send) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "/test/tomato.crt",
                CONF_USERNAME : "bar",
                CONF_PASSWORD : "foo",
                tomato.CONF_HTTP_ID : "0987654321",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "https://tomato-router:1234/update.cgi"
    assert result.req.headers == {
        "Content-Length" : "32",
        "Content-Type" : "application/x-www-form-urlencoded",
        "Authorization" : "Basic YmFyOmZvbw==",
        }
    assert "_http_id=0987654321" in result.req.body
    assert "exec=devlist" in result.req.body
    assert mock_session_send.call_count == 1
    assert mock_session_send.mock_calls [0] == mock.call(
        result.req, timeout = 60, verify = "/test/tomato.crt")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="200" endline="230">
def test_config_valid_verify_ssl_bool(hass : HomeAssistant, mock_session_send) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_USERNAME : "bar",
                CONF_PASSWORD : "foo",
                tomato.CONF_HTTP_ID : "0987654321",
                })}
    result = tomato.get_scanner(hass, config)
    assert result.req.url == "https://tomato-router:1234/update.cgi"
    assert result.req.headers == {
        "Content-Length" : "32",
        "Content-Type" : "application/x-www-form-urlencoded",
        "Authorization" : "Basic YmFyOmZvbw==",
        }
    assert "_http_id=0987654321" in result.req.body
    assert "exec=devlist" in result.req.body
    assert mock_session_send.call_count == 1
    assert mock_session_send.mock_calls [0] == mock.call(
        result.req, timeout = 60, verify = False)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="231" endline="299">
def test_config_errors() -> None :
INDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_USERNAME : "bar",
                CONF_PASSWORD : "foo",
                tomato.CONF_HTTP_ID : "0987654321",
                })
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : - 123456789,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_USERNAME : "bar",
                CONF_PASSWORD : "foo",
                tomato.CONF_HTTP_ID : "0987654321",
                })
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_PASSWORD : "foo",
                tomato.CONF_HTTP_ID : "0987654321",
                })
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_USERNAME : "bar",
                tomato.CONF_HTTP_ID : "0987654321",
                })
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_PORT : 1234,
                CONF_SSL : True,
                CONF_VERIFY_SSL : "False",
                CONF_USERNAME : "bar",
                CONF_PASSWORD : "foo",
                })

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="301" endline="322">
def test_config_bad_credentials(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "i_am",
                CONF_PASSWORD : "an_imposter",
                tomato.CONF_HTTP_ID : "1234",
                })}
    tomato.get_scanner(hass, config)
    assert mock_exception_logger.call_count == 1
    assert mock_exception_logger.mock_calls [0] == mock.call(
        "Failed to authenticate, please check your username and password")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="324" endline="345">
def test_bad_response(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "bar",
                tomato.CONF_HTTP_ID : "gimmie_bad_data",
                })}
    tomato.get_scanner(hass, config)
    assert mock_exception_logger.call_count == 1
    assert mock_exception_logger.mock_calls [0] == mock.call(
        "Failed to parse response from router")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="347" endline="364">
def test_scan_devices(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "bar",
                tomato.CONF_HTTP_ID : "gimmie_good_data",
                })}
    scanner = tomato.get_scanner(hass, config)
    assert scanner.scan_devices() == ["F4:F5:D8:AA:AA:AA", "58:EF:68:00:00:00"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="366" endline="392">
def test_bad_connection(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "bar",
                tomato.CONF_HTTP_ID : "gimmie_good_data",
                })}
    with requests_mock.Mocker() as adapter :
    INDENT
        adapter.register_uri(
            "POST",
            "http://tomato-router:80/update.cgi",
            exc = requests.exceptions.ConnectionError,
            )
        tomato.get_scanner(hass, config)
    DEDENT
    assert mock_exception_logger.call_count == 1
    assert mock_exception_logger.mock_calls [0] == mock.call(
        "Failed to connect to the router or invalid http_id supplied")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="394" endline="420">
def test_router_timeout(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "bar",
                tomato.CONF_HTTP_ID : "gimmie_good_data",
                })}
    with requests_mock.Mocker() as adapter :
    INDENT
        adapter.register_uri(
            "POST",
            "http://tomato-router:80/update.cgi",
            exc = requests.exceptions.Timeout,
            )
        tomato.get_scanner(hass, config)
    DEDENT
    assert mock_exception_logger.call_count == 1
    assert mock_exception_logger.mock_calls [0] == mock.call(
        "Connection to the router timed out")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tomato/test_device_tracker.py" startline="422" endline="439">
def test_get_device_name(hass : HomeAssistant, mock_exception_logger) -> None :
INDENT
    config = {
        DOMAIN : tomato.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : tomato.DOMAIN,
                CONF_HOST : "tomato-router",
                CONF_USERNAME : "foo",
                CONF_PASSWORD : "bar",
                tomato.CONF_HTTP_ID : "gimmie_good_data",
                })}
    scanner = tomato.get_scanner(hass, config)
    assert scanner.get_device_name("F4:F5:D8:AA:AA:AA") == "chromecast"
    assert scanner.get_device_name("58:EF:68:00:00:00") == "wemo"
    assert scanner.get_device_name("AA:BB:CC:00:00:00") is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/qingping/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="93" endline="101">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.Events("
        f"id={self.event_id}, type='{self.event_type}', data='{self.event_data}', "
        f"origin='{self.origin}', time_fired='{self.time_fired}'"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="103" endline="114">
def from_event(event, event_data = None) :
INDENT
    return Events(
        event_type = event.event_type,
        event_data = event_data or json.dumps(event.data, cls = JSONEncoder),
        origin = str(event.origin.value),
        time_fired = event.time_fired,
        context_id = event.context.id,
        context_user_id = event.context.user_id,
        context_parent_id = event.context.parent_id,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="115" endline="135">
def to_native(self, validate_entity_id = True) :
INDENT
    context = Context(
        id = self.context_id,
        user_id = self.context_user_id,
        parent_id = self.context_parent_id,
        )
    try :
    INDENT
        return Event(
            self.event_type,
            json.loads(self.event_data),
            EventOrigin(self.origin),
            process_timestamp(self.time_fired),
            context = context,
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting to event: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="165" endline="175">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.States("
        f"id={self.state_id}, domain='{self.domain}', entity_id='{self.entity_id}', "
        f"state='{self.state}', event_id='{self.event_id}', "
        f"last_updated='{self.last_updated.isoformat(sep=' ', timespec='seconds')}', "
        f"old_state_id={self.old_state_id}"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="177" endline="199">
def from_event(event) :
INDENT
    entity_id = event.data ["entity_id"]
    state = event.data.get("new_state")
    dbstate = States(entity_id = entity_id)

    if state is None :
    INDENT
        dbstate.state = ""
        dbstate.domain = split_entity_id(entity_id) [0]
        dbstate.attributes = "{}"
        dbstate.last_changed = event.time_fired
        dbstate.last_updated = event.time_fired
    DEDENT
    else :
    INDENT
        dbstate.domain = state.domain
        dbstate.state = state.state
        dbstate.attributes = json.dumps(dict(state.attributes), cls = JSONEncoder)
        dbstate.last_changed = state.last_changed
        dbstate.last_updated = state.last_updated
    DEDENT
    return dbstate
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="200" endline="219">
def to_native(self, validate_entity_id = True) :
INDENT
    try :
    INDENT
        return State(
            self.entity_id,
            self.state,
            json.loads(self.attributes),
            process_timestamp(self.last_changed),
            process_timestamp(self.last_updated),
            context = Context(id = None),
            validate_entity_id = validate_entity_id,
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting row to state: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="246" endline="255">
def from_stats(source, statistic_id, start, stats) :
INDENT
    return Statistics(
        source = source,
        statistic_id = statistic_id,
        start = start,
        ** stats,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="268" endline="280">
def __repr__(self) -> str :
INDENT
    end = (
        f"'{self.end.isoformat(sep=' ', timespec='seconds')}'" if self.end else None)
    return (
        f"<recorder.RecorderRuns("
        f"id={self.run_id}, start='{self.start.isoformat(sep=' ', timespec='seconds')}', "
        f"end={end}, closed_incorrect={self.closed_incorrect}, "
        f"created='{self.created.isoformat(sep=' ', timespec='seconds')}'"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="281" endline="301">
def entity_ids(self, point_in_time = None) :
INDENT
    session = Session.object_session(self)
    assert session is not None, "RecorderRuns need to be persisted"
    query = session.query(distinct(States.entity_id)).filter(
        States.last_updated > = self.start)
    if point_in_time is not None :
    INDENT
        query = query.filter(States.last_updated < point_in_time)
    DEDENT
    elif self.end is not None :
    INDENT
        query = query.filter(States.last_updated < self.end)
    DEDENT
    return [row [0] for row in query]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="302" endline="306">
def to_native(self, validate_entity_id = True) :
INDENT
    return self

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="315" endline="324">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.SchemaChanges("
        f"id={self.change_id}, schema_version={self.schema_version}, "
        f"changed='{self.changed.isoformat(sep=' ', timespec='seconds')}'"
        f")>")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="325" endline="334">
def process_timestamp(ts) :
INDENT
    if ts is None :
    INDENT
        return None
    DEDENT
    if ts.tzinfo is None :
    INDENT
        return ts.replace(tzinfo = dt_util.UTC)
    DEDENT
    return dt_util.as_utc(ts)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="335" endline="345">
def process_timestamp_to_utc_isoformat(ts) :
INDENT
    if ts is None :
    INDENT
        return None
    DEDENT
    if ts.tzinfo == dt_util.UTC :
    INDENT
        return ts.isoformat()
    DEDENT
    if ts.tzinfo is None :
    INDENT
        return f"{ts.isoformat()}{DB_TIMEZONE}"
    DEDENT
    return ts.astimezone(dt_util.UTC).isoformat()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="359" endline="368">
def __init__(self, row) :
INDENT
    self._row = row
    self.entity_id = self._row.entity_id
    self.state = self._row.state or ""
    self._attributes = None
    self._last_changed = None
    self._last_updated = None
    self._context = None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="370" endline="380">
def attributes(self) :
INDENT
    if not self._attributes :
    INDENT
        try :
        INDENT
            self._attributes = json.loads(self._row.attributes)
        DEDENT
        except ValueError :
        INDENT
            _LOGGER.exception("Error converting row to state: %s", self._row)
            self._attributes = {}
        DEDENT
    DEDENT
    return self._attributes
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="382" endline="385">
def attributes(self, value) :
INDENT
    self._attributes = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="387" endline="392">
def context(self) :
INDENT
    if not self._context :
    INDENT
        self._context = Context(id = None)
    DEDENT
    return self._context
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="394" endline="397">
def context(self, value) :
INDENT
    self._context = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="399" endline="404">
def last_changed(self) :
INDENT
    if not self._last_changed :
    INDENT
        self._last_changed = process_timestamp(self._row.last_changed)
    DEDENT
    return self._last_changed
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="406" endline="409">
def last_changed(self, value) :
INDENT
    self._last_changed = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="411" endline="416">
def last_updated(self) :
INDENT
    if not self._last_updated :
    INDENT
        self._last_updated = process_timestamp(self._row.last_updated)
    DEDENT
    return self._last_updated
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="418" endline="421">
def last_updated(self, value) :
INDENT
    self._last_updated = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="422" endline="447">
def as_dict(self) :
INDENT
    if self._last_changed :
    INDENT
        last_changed_isoformat = self._last_changed.isoformat()
    DEDENT
    else :
    INDENT
        last_changed_isoformat = process_timestamp_to_utc_isoformat(
            self._row.last_changed)
    DEDENT
    if self._last_updated :
    INDENT
        last_updated_isoformat = self._last_updated.isoformat()
    DEDENT
    else :
    INDENT
        last_updated_isoformat = process_timestamp_to_utc_isoformat(
            self._row.last_updated)
    DEDENT
    return {
        "entity_id" : self.entity_id,
        "state" : self.state,
        "attributes" : self._attributes or self.attributes,
        "last_changed" : last_changed_isoformat,
        "last_updated" : last_updated_isoformat,
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_16.py" startline="448" endline="455">
def __eq__(self, other) :
INDENT
    return (
        other.__class__ in [self.__class__, State]
        and self.entity_id == other.entity_id
        and self.state == other.state
        and self.attributes == other.attributes)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_pool.py" startline="13" endline="19">
async def test_recorder_pool_called_from_event_loop() -> None :
INDENT
    engine = create_engine("sqlite://", poolclass = RecorderPool)
    with pytest.raises(RuntimeError) :
    INDENT
        sessionmaker(bind = engine)().connection()

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_pool.py" startline="20" endline="67">
def test_recorder_pool(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    engine = create_engine("sqlite://", poolclass = RecorderPool)
    get_session = sessionmaker(bind = engine)
    shutdown = False
    connections = []
    def _get_connection_twice() :
    INDENT
        session = get_session()
        connections.append(session.connection().connection.driver_connection)
        session.close()
        if shutdown :
        INDENT
            engine.pool.shutdown()
        DEDENT
        session = get_session()
        connections.append(session.connection().connection.driver_connection)
        session.close()
    DEDENT
    caplog.clear()
    new_thread = threading.Thread(target = _get_connection_twice)
    new_thread.start()
    new_thread.join()
    assert "accesses the database without the database executor" in caplog.text
    assert connections [0] ! = connections [1]
    caplog.clear()
    new_thread = threading.Thread(target = _get_connection_twice, name = DB_WORKER_PREFIX)
    new_thread.start()
    new_thread.join()
    assert "accesses the database without the database executor" not in caplog.text
    assert connections [2] == connections [3]
    caplog.clear()
    new_thread = threading.Thread(target = _get_connection_twice, name = "Recorder")
    new_thread.start()
    new_thread.join()
    assert "accesses the database without the database executor" not in caplog.text
    assert connections [4] == connections [5]
    shutdown = True
    caplog.clear()
    new_thread = threading.Thread(target = _get_connection_twice, name = DB_WORKER_PREFIX)
    new_thread.start()
    new_thread.join()
    assert "accesses the database without the database executor" not in caplog.text
    assert connections [6] ! = connections [7]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_pool.py" startline="28" endline="39">
def _get_connection_twice() :
INDENT
    session = get_session()
    connections.append(session.connection().connection.driver_connection)
    session.close()
    if shutdown :
    INDENT
        engine.pool.shutdown()
    DEDENT
    session = get_session()
    connections.append(session.connection().connection.driver_connection)
    session.close()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="45" endline="53">
def from_event(event) :
INDENT
    return Events(
        event_type = event.event_type,
        event_data = json.dumps(event.data, cls = JSONEncoder),
        origin = str(event.origin),
        time_fired = event.time_fired,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="54" endline="68">
def to_native(self) :
INDENT
    try :
    INDENT
        return Event(
            self.event_type,
            json.loads(self.event_data),
            EventOrigin(self.origin),
            _process_timestamp(self.time_fired),
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting to event: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="89" endline="111">
def from_event(event) :
INDENT
    entity_id = event.data ["entity_id"]
    state = event.data.get("new_state")
    dbstate = States(entity_id = entity_id)

    if state is None :
    INDENT
        dbstate.state = ""
        dbstate.domain = split_entity_id(entity_id) [0]
        dbstate.attributes = "{}"
        dbstate.last_changed = event.time_fired
        dbstate.last_updated = event.time_fired
    DEDENT
    else :
    INDENT
        dbstate.domain = state.domain
        dbstate.state = state.state
        dbstate.attributes = json.dumps(dict(state.attributes), cls = JSONEncoder)
        dbstate.last_changed = state.last_changed
        dbstate.last_updated = state.last_updated
    DEDENT
    return dbstate
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="112" endline="127">
def to_native(self) :
INDENT
    try :
    INDENT
        return State(
            self.entity_id,
            self.state,
            json.loads(self.attributes),
            _process_timestamp(self.last_changed),
            _process_timestamp(self.last_updated),
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting row to state: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="138" endline="160">
def entity_ids(self, point_in_time = None) :
INDENT
    from sqlalchemy.orm.session import Session
    session = Session.object_session(self)
    assert session is not None, "RecorderRuns need to be persisted"
    query = session.query(distinct(States.entity_id)).filter(
        States.last_updated > = self.start)
    if point_in_time is not None :
    INDENT
        query = query.filter(States.last_updated < point_in_time)
    DEDENT
    elif self.end is not None :
    INDENT
        query = query.filter(States.last_updated < self.end)
    DEDENT
    return [row [0] for row in query]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="161" endline="165">
def to_native(self) :
INDENT
    return self

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_0.py" startline="166" endline="172">
def _process_timestamp(ts) :
INDENT
    if ts is None :
    INDENT
        return None
    DEDENT
    if ts.tzinfo is None :
    INDENT
        return ts.replace(tzinfo = dt_util.UTC)
    DEDENT
    return dt_util.as_utc(ts)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="91" endline="99">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.Events("
        f"id={self.event_id}, type='{self.event_type}', data='{self.event_data}', "
        f"origin='{self.origin}', time_fired='{self.time_fired}'"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="101" endline="112">
def from_event(event, event_data = None) :
INDENT
    return Events(
        event_type = event.event_type,
        event_data = event_data or json.dumps(event.data, cls = JSONEncoder),
        origin = str(event.origin.value),
        time_fired = event.time_fired,
        context_id = event.context.id,
        context_user_id = event.context.user_id,
        context_parent_id = event.context.parent_id,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="113" endline="133">
def to_native(self, validate_entity_id = True) :
INDENT
    context = Context(
        id = self.context_id,
        user_id = self.context_user_id,
        parent_id = self.context_parent_id,
        )
    try :
    INDENT
        return Event(
            self.event_type,
            json.loads(self.event_data),
            EventOrigin(self.origin),
            process_timestamp(self.time_fired),
            context = context,
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting to event: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="159" endline="169">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.States("
        f"id={self.state_id}, domain='{self.domain}', entity_id='{self.entity_id}', "
        f"state='{self.state}', event_id='{self.event_id}', "
        f"last_updated='{self.last_updated.isoformat(sep=' ', timespec='seconds')}', "
        f"old_state_id={self.old_state_id}"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="171" endline="193">
def from_event(event) :
INDENT
    entity_id = event.data ["entity_id"]
    state = event.data.get("new_state")
    dbstate = States(entity_id = entity_id)

    if state is None :
    INDENT
        dbstate.state = ""
        dbstate.domain = split_entity_id(entity_id) [0]
        dbstate.attributes = "{}"
        dbstate.last_changed = event.time_fired
        dbstate.last_updated = event.time_fired
    DEDENT
    else :
    INDENT
        dbstate.domain = state.domain
        dbstate.state = state.state
        dbstate.attributes = json.dumps(dict(state.attributes), cls = JSONEncoder)
        dbstate.last_changed = state.last_changed
        dbstate.last_updated = state.last_updated
    DEDENT
    return dbstate
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="194" endline="213">
def to_native(self, validate_entity_id = True) :
INDENT
    try :
    INDENT
        return State(
            self.entity_id,
            self.state,
            json.loads(self.attributes),
            process_timestamp(self.last_changed),
            process_timestamp(self.last_updated),
            context = Context(id = None),
            validate_entity_id = validate_entity_id,
            )
    DEDENT
    except ValueError :
    INDENT
        _LOGGER.exception("Error converting row to state: %s", self)
        return None

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="238" endline="246">
def from_stats(metadata_id, start, stats) :
INDENT
    return Statistics(
        metadata_id = metadata_id,
        start = start,
        ** stats,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="259" endline="269">
def from_meta(source, statistic_id, unit_of_measurement, has_mean, has_sum) :
INDENT
    return StatisticsMeta(
        source = source,
        statistic_id = statistic_id,
        unit_of_measurement = unit_of_measurement,
        has_mean = has_mean,
        has_sum = has_sum,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="281" endline="293">
def __repr__(self) -> str :
INDENT
    end = (
        f"'{self.end.isoformat(sep=' ', timespec='seconds')}'" if self.end else None)
    return (
        f"<recorder.RecorderRuns("
        f"id={self.run_id}, start='{self.start.isoformat(sep=' ', timespec='seconds')}', "
        f"end={end}, closed_incorrect={self.closed_incorrect}, "
        f"created='{self.created.isoformat(sep=' ', timespec='seconds')}'"
        f")>")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="294" endline="314">
def entity_ids(self, point_in_time = None) :
INDENT
    session = Session.object_session(self)
    assert session is not None, "RecorderRuns need to be persisted"
    query = session.query(distinct(States.entity_id)).filter(
        States.last_updated > = self.start)
    if point_in_time is not None :
    INDENT
        query = query.filter(States.last_updated < point_in_time)
    DEDENT
    elif self.end is not None :
    INDENT
        query = query.filter(States.last_updated < self.end)
    DEDENT
    return [row [0] for row in query]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="315" endline="319">
def to_native(self, validate_entity_id = True) :
INDENT
    return self

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="328" endline="337">
def __repr__(self) -> str :
INDENT
    return (
        f"<recorder.SchemaChanges("
        f"id={self.change_id}, schema_version={self.schema_version}, "
        f"changed='{self.changed.isoformat(sep=' ', timespec='seconds')}'"
        f")>")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="338" endline="347">
def process_timestamp(ts) :
INDENT
    if ts is None :
    INDENT
        return None
    DEDENT
    if ts.tzinfo is None :
    INDENT
        return ts.replace(tzinfo = dt_util.UTC)
    DEDENT
    return dt_util.as_utc(ts)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="348" endline="358">
def process_timestamp_to_utc_isoformat(ts) :
INDENT
    if ts is None :
    INDENT
        return None
    DEDENT
    if ts.tzinfo == dt_util.UTC :
    INDENT
        return ts.isoformat()
    DEDENT
    if ts.tzinfo is None :
    INDENT
        return f"{ts.isoformat()}{DB_TIMEZONE}"
    DEDENT
    return ts.astimezone(dt_util.UTC).isoformat()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="372" endline="381">
def __init__(self, row) :
INDENT
    self._row = row
    self.entity_id = self._row.entity_id
    self.state = self._row.state or ""
    self._attributes = None
    self._last_changed = None
    self._last_updated = None
    self._context = None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="383" endline="393">
def attributes(self) :
INDENT
    if not self._attributes :
    INDENT
        try :
        INDENT
            self._attributes = json.loads(self._row.attributes)
        DEDENT
        except ValueError :
        INDENT
            _LOGGER.exception("Error converting row to state: %s", self._row)
            self._attributes = {}
        DEDENT
    DEDENT
    return self._attributes
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="395" endline="398">
def attributes(self, value) :
INDENT
    self._attributes = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="400" endline="405">
def context(self) :
INDENT
    if not self._context :
    INDENT
        self._context = Context(id = None)
    DEDENT
    return self._context
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="407" endline="410">
def context(self, value) :
INDENT
    self._context = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="412" endline="417">
def last_changed(self) :
INDENT
    if not self._last_changed :
    INDENT
        self._last_changed = process_timestamp(self._row.last_changed)
    DEDENT
    return self._last_changed
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="419" endline="422">
def last_changed(self, value) :
INDENT
    self._last_changed = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="424" endline="429">
def last_updated(self) :
INDENT
    if not self._last_updated :
    INDENT
        self._last_updated = process_timestamp(self._row.last_updated)
    DEDENT
    return self._last_updated
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="431" endline="434">
def last_updated(self, value) :
INDENT
    self._last_updated = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="435" endline="461">
def as_dict(self) :
INDENT
    if self._last_changed :
    INDENT
        last_changed_isoformat = self._last_changed.isoformat()
    DEDENT
    else :
    INDENT
        last_changed_isoformat = process_timestamp_to_utc_isoformat(
            self._row.last_changed)
    DEDENT
    if self._last_updated :
    INDENT
        last_updated_isoformat = self._last_updated.isoformat()
    DEDENT
    else :
    INDENT
        last_updated_isoformat = process_timestamp_to_utc_isoformat(
            self._row.last_updated)
    DEDENT
    return {
        "entity_id" : self.entity_id,
        "state" : self.state,
        "attributes" : self._attributes or self.attributes,
        "last_changed" : last_changed_isoformat,
        "last_updated" : last_updated_isoformat,
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/db_schema_18.py" startline="462" endline="469">
def __eq__(self, other) :
INDENT
    return (
        other.__class__ in [self.__class__, State]
        and self.entity_id == other.entity_id
        and self.state == other.state
        and self.attributes == other.attributes)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="31" endline="48">
def test_from_event_to_db_event() -> None :
INDENT
    event = ha.Event(
        "test_event",
        {"some_data" : 15},
        context = ha.Context(
            id = "01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1",
            parent_id = "01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1",
            user_id = "12345678901234567890123456789012",
            ),
        )
    db_event = Events.from_event(event)
    dialect = SupportedDialect.MYSQL
    db_event.event_data = EventData.shared_data_bytes_from_event(event, dialect)
    db_event.event_type = event.event_type
    assert event.as_dict() == db_event.to_native().as_dict()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="49" endline="67">
def test_from_event_to_db_state() -> None :
INDENT
    state = ha.State(
        "sensor.temperature",
        "18",
        context = ha.Context(
            id = "01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1",
            parent_id = "01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1",
            user_id = "12345678901234567890123456789012",
            ),
        )
    event = ha.Event(
        EVENT_STATE_CHANGED,
        {"entity_id" : "sensor.temperature", "old_state" : None, "new_state" : state},
        context = state.context,
        )
    assert state.as_dict() == States.from_event(event).to_native().as_dict()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="68" endline="85">
def test_from_event_to_db_state_attributes() -> None :
INDENT
    attrs = {"this_attr" : True}
    state = ha.State("sensor.temperature", "18", attrs)
    event = ha.Event(
        EVENT_STATE_CHANGED,
        {"entity_id" : "sensor.temperature", "old_state" : None, "new_state" : state},
        context = state.context,
        )
    db_attrs = StateAttributes()
    dialect = SupportedDialect.MYSQL
    db_attrs.shared_attrs = StateAttributes.shared_attrs_bytes_from_event(
        event, dialect)
    assert db_attrs.to_native() == attrs
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="86" endline="106">
def test_repr() -> None :
INDENT
    attrs = {"this_attr" : True}
    fixed_time = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC, microsecond = 432432)
    state = ha.State(
        "sensor.temperature",
        "18",
        attrs,
        last_changed = fixed_time,
        last_updated = fixed_time,
        )
    event = ha.Event(
        EVENT_STATE_CHANGED,
        {"entity_id" : "sensor.temperature", "old_state" : None, "new_state" : state},
        context = state.context,
        time_fired = fixed_time,
        )
    assert "2016-07-09 11:00:00+00:00" in repr(States.from_event(event))
    assert "2016-07-09 11:00:00+00:00" in repr(Events.from_event(event))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="107" endline="124">
def test_states_repr_without_timestamp() -> None :
INDENT
    fixed_time = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC, microsecond = 432432)
    states = States(
        entity_id = "sensor.temp",
        attributes = None,
        context_id = None,
        context_user_id = None,
        context_parent_id = None,
        origin_idx = None,
        last_updated = fixed_time,
        last_changed = fixed_time,
        last_updated_ts = None,
        last_changed_ts = None,
        )
    assert "2016-07-09 11:00:00+00:00" in repr(states)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="125" endline="140">
def test_events_repr_without_timestamp() -> None :
INDENT
    fixed_time = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC, microsecond = 432432)
    events = Events(
        event_type = "any",
        event_data = None,
        origin_idx = None,
        time_fired = fixed_time,
        time_fired_ts = None,
        context_id = None,
        context_user_id = None,
        context_parent_id = None,
        )
    assert "2016-07-09 11:00:00+00:00" in repr(events)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="141" endline="151">
def test_handling_broken_json_state_attributes(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    state_attributes = StateAttributes(
        attributes_id = 444, hash = 1234, shared_attrs = "{NOT_PARSE}")
    assert state_attributes.to_native() == {}
    assert "Error converting row to state attributes" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="152" endline="169">
def test_from_event_to_delete_state() -> None :
INDENT
    event = ha.Event(
        EVENT_STATE_CHANGED,
        {
            "entity_id" : "sensor.temperature",
            "old_state" : ha.State("sensor.temperature", "18"),
            "new_state" : None,
            },
        )
    db_state = States.from_event(event)
    assert db_state.entity_id == "sensor.temperature"
    assert db_state.state == ""
    assert db_state.last_changed_ts is None
    assert db_state.last_updated_ts == event.time_fired.timestamp()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="170" endline="181">
def test_states_from_native_invalid_entity_id() -> None :
INDENT
    state = States()
    state.entity_id = "test.invalid__id"
    state.attributes = "{}"
    with pytest.raises(InvalidEntityFormatError) :
    INDENT
        state = state.to_native()
    DEDENT
    state = state.to_native(validate_entity_id = False)
    assert state.entity_id == "test.invalid__id"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="182" endline="210">
async def test_process_timestamp() -> None :
INDENT
    datetime_with_tzinfo = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC)
    datetime_without_tzinfo = datetime(2016, 7, 9, 11, 0, 0)
    est = dt_util.get_time_zone("US/Eastern")
    datetime_est_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = est)
    nst = dt_util.get_time_zone("Canada/Newfoundland")
    datetime_nst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = nst)
    hst = dt_util.get_time_zone("US/Hawaii")
    datetime_hst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = hst)
    assert process_timestamp(datetime_with_tzinfo) == datetime(
        2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC)
    assert process_timestamp(datetime_without_tzinfo) == datetime(
        2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC)
    assert process_timestamp(datetime_est_timezone) == datetime(
        2016, 7, 9, 15, 0, tzinfo = dt_util.UTC)
    assert process_timestamp(datetime_nst_timezone) == datetime(
        2016, 7, 9, 13, 30, tzinfo = dt_util.UTC)
    assert process_timestamp(datetime_hst_timezone) == datetime(
        2016, 7, 9, 21, 0, tzinfo = dt_util.UTC)
    assert process_timestamp(None) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="211" endline="246">
async def test_process_timestamp_to_utc_isoformat() -> None :
INDENT
    datetime_with_tzinfo = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC)
    datetime_without_tzinfo = datetime(2016, 7, 9, 11, 0, 0)
    est = dt_util.get_time_zone("US/Eastern")
    datetime_est_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = est)
    est = dt_util.get_time_zone("US/Eastern")
    datetime_est_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = est)
    nst = dt_util.get_time_zone("Canada/Newfoundland")
    datetime_nst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = nst)
    hst = dt_util.get_time_zone("US/Hawaii")
    datetime_hst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = hst)
    assert (
        process_timestamp_to_utc_isoformat(datetime_with_tzinfo)
        == "2016-07-09T11:00:00+00:00")
    assert (
        process_timestamp_to_utc_isoformat(datetime_without_tzinfo)
        == "2016-07-09T11:00:00+00:00")
    assert (
        process_timestamp_to_utc_isoformat(datetime_est_timezone)
        == "2016-07-09T15:00:00+00:00")
    assert (
        process_timestamp_to_utc_isoformat(datetime_nst_timezone)
        == "2016-07-09T13:30:00+00:00")
    assert (
        process_timestamp_to_utc_isoformat(datetime_hst_timezone)
        == "2016-07-09T21:00:00+00:00")
    assert process_timestamp_to_utc_isoformat(None) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="247" endline="266">
async def test_event_to_db_model() -> None :
INDENT
    event = ha.Event(
        "state_changed", {"some" : "attr"}, ha.EventOrigin.local, dt_util.utcnow())
    db_event = Events.from_event(event)
    dialect = SupportedDialect.MYSQL
    db_event.event_data = EventData.shared_data_bytes_from_event(event, dialect)
    db_event.event_type = event.event_type
    native = db_event.to_native()
    assert native.as_dict() == event.as_dict()
    native = Events.from_event(event).to_native()
    native.data = (
        event.data)
    native.event_type = event.event_type
    assert native.as_dict() == event.as_dict()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="267" endline="278">
async def test_lazy_state_handles_include_json(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    row = PropertyMock(
        entity_id = "sensor.invalid",
        shared_attrs = "{INVALID_JSON}",
        )
    assert LazyState(row, {}, None, row.entity_id, "", 1, False).attributes == {}
    assert "Error converting row to state attributes" in caplog.text
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="279" endline="291">
async def test_lazy_state_can_decode_attributes(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    row = PropertyMock(
        entity_id = "sensor.invalid",
        attributes = '{"shared":true}',
        )
    assert LazyState(row, {}, None, row.entity_id, "", 1, False).attributes == {
        "shared" : True}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="292" endline="324">
async def test_lazy_state_handles_different_last_updated_and_last_changed(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    now = datetime(2021, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    row = PropertyMock(
        entity_id = "sensor.valid",
        state = "off",
        attributes = '{"shared":true}',
        last_updated_ts = now.timestamp(),
        last_changed_ts = (now - timedelta(seconds = 60)).timestamp(),
        )
    lstate = LazyState(
        row, {}, None, row.entity_id, row.state, row.last_updated_ts, False)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:03:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    assert lstate.last_updated.timestamp() == row.last_updated_ts
    assert lstate.last_changed.timestamp() == row.last_changed_ts
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:03:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="325" endline="357">
async def test_lazy_state_handles_same_last_updated_and_last_changed(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    now = datetime(2021, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    row = PropertyMock(
        entity_id = "sensor.valid",
        state = "off",
        attributes = '{"shared":true}',
        last_updated_ts = now.timestamp(),
        last_changed_ts = now.timestamp(),
        )
    lstate = LazyState(
        row, {}, None, row.entity_id, row.state, row.last_updated_ts, False)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:04:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    assert lstate.last_updated.timestamp() == row.last_updated_ts
    assert lstate.last_changed.timestamp() == row.last_changed_ts
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:04:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="361" endline="369">
def test_process_datetime_to_timestamp(time_zone, hass : HomeAssistant) -> None :
INDENT
    hass.config.set_time_zone(time_zone)
    utc_now = dt_util.utcnow()
    assert process_datetime_to_timestamp(utc_now) == utc_now.timestamp()
    now = dt_util.now()
    assert process_datetime_to_timestamp(now) == now.timestamp()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="373" endline="388">
def test_process_datetime_to_timestamp_freeze_time(
time_zone, hass : HomeAssistant
) -> None :
INDENT
    hass.config.set_time_zone(time_zone)
    utc_now = dt_util.utcnow()
    with freeze_time(utc_now) :
    INDENT
        epoch = utc_now.timestamp()
        assert process_datetime_to_timestamp(dt_util.utcnow()) == epoch
        now = dt_util.now()
        assert process_datetime_to_timestamp(now) == epoch
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="392" endline="429">
async def test_process_datetime_to_timestamp_mirrors_utc_isoformat_behavior(
time_zone, hass : HomeAssistant
) -> None :
INDENT
    hass.config.set_time_zone(time_zone)
    datetime_with_tzinfo = datetime(2016, 7, 9, 11, 0, 0, tzinfo = dt_util.UTC)
    datetime_without_tzinfo = datetime(2016, 7, 9, 11, 0, 0)
    est = dt_util.get_time_zone("US/Eastern")
    datetime_est_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = est)
    est = dt_util.get_time_zone("US/Eastern")
    datetime_est_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = est)
    nst = dt_util.get_time_zone("Canada/Newfoundland")
    datetime_nst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = nst)
    hst = dt_util.get_time_zone("US/Hawaii")
    datetime_hst_timezone = datetime(2016, 7, 9, 11, 0, 0, tzinfo = hst)
    assert (
        process_datetime_to_timestamp(datetime_with_tzinfo)
        == dt_util.parse_datetime("2016-07-09T11:00:00+00:00").timestamp())
    assert (
        process_datetime_to_timestamp(datetime_without_tzinfo)
        == dt_util.parse_datetime("2016-07-09T11:00:00+00:00").timestamp())
    assert (
        process_datetime_to_timestamp(datetime_est_timezone)
        == dt_util.parse_datetime("2016-07-09T15:00:00+00:00").timestamp())
    assert (
        process_datetime_to_timestamp(datetime_nst_timezone)
        == dt_util.parse_datetime("2016-07-09T13:30:00+00:00").timestamp())
    assert (
        process_datetime_to_timestamp(datetime_hst_timezone)
        == dt_util.parse_datetime("2016-07-09T21:00:00+00:00").timestamp())
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="430" endline="441">
def test_ulid_to_bytes_or_none(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    assert (
        ulid_to_bytes_or_none("01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1")
        == b"\x01w\xaf\xf9w\xe5\xf8~\x1f\x87\xe1\xf8~\x1f\x87\xe1")
    assert ulid_to_bytes_or_none("invalid") is None
    assert "invalid" in caplog.text
    assert ulid_to_bytes_or_none(None) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models.py" startline="442" endline="451">
def test_bytes_to_ulid_or_none(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    assert (
        bytes_to_ulid_or_none(b"\x01w\xaf\xf9w\xe5\xf8~\x1f\x87\xe1\xf8~\x1f\x87\xe1")
        == "01EYQZJXZ5Z1Z1Z1Z1Z1Z1Z1Z1")
    assert bytes_to_ulid_or_none(b"invalid") is None
    assert "invalid" in caplog.text
    assert bytes_to_ulid_or_none(None) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models_legacy.py" startline="12" endline="23">
async def test_legacy_lazy_state_prefers_shared_attrs_over_attrs(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    row = PropertyMock(
        entity_id = "sensor.invalid",
        shared_attrs = '{"shared":true}',
        attributes = '{"shared":false}',
        )
    assert LegacyLazyState(row, {}, None).attributes == {"shared" : True}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models_legacy.py" startline="24" endline="54">
async def test_legacy_lazy_state_handles_different_last_updated_and_last_changed(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    now = datetime(2021, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    row = PropertyMock(
        entity_id = "sensor.valid",
        state = "off",
        shared_attrs = '{"shared":true}',
        last_updated_ts = now.timestamp(),
        last_changed_ts = (now - timedelta(seconds = 60)).timestamp(),
        )
    lstate = LegacyLazyState(row, {}, None)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:03:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    assert lstate.last_updated.timestamp() == row.last_updated_ts
    assert lstate.last_changed.timestamp() == row.last_changed_ts
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:03:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/recorder/test_models_legacy.py" startline="55" endline="99">
async def test_legacy_lazy_state_handles_same_last_updated_and_last_changed(
caplog : pytest.LogCaptureFixture,
) -> None :
INDENT
    now = datetime(2021, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    row = PropertyMock(
        entity_id = "sensor.valid",
        state = "off",
        shared_attrs = '{"shared":true}',
        last_updated_ts = now.timestamp(),
        last_changed_ts = now.timestamp(),
        )
    lstate = LegacyLazyState(row, {}, None)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:04:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    assert lstate.last_updated.timestamp() == row.last_updated_ts
    assert lstate.last_changed.timestamp() == row.last_changed_ts
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:04:01.000323+00:00",
        "last_updated" : "2021-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    lstate.last_updated = datetime(2020, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2021-06-12T03:04:01.000323+00:00",
        "last_updated" : "2020-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
    lstate.last_changed = datetime(2020, 6, 12, 3, 4, 1, 323, tzinfo = dt_util.UTC)
    assert lstate.as_dict() == {
        "attributes" : {"shared" : True},
        "entity_id" : "sensor.valid",
        "last_changed" : "2020-06-12T03:04:01.000323+00:00",
        "last_updated" : "2020-06-12T03:04:01.000323+00:00",
        "state" : "off",
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dnsip/__init__.py" startline="16" endline="24">
def __init__(
self, nameservers : list [str] | None = None, error : Exception | None = None
) -> None :
INDENT
    if nameservers :
    INDENT
        self.nameservers = nameservers
    DEDENT
    self._nameservers = ["1.2.3.4"]
    self.error = error
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dnsip/__init__.py" startline="25" endline="30">
async def query(self, hostname, qtype) -> dict [str, str] :
INDENT
    if self.error :
    INDENT
        raise self.error
    DEDENT
    return [QueryResult]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dnsip/__init__.py" startline="32" endline="35">
def nameservers(self) -> list [str] :
INDENT
    return self._nameservers
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dnsip/__init__.py" startline="37" endline="38">
def nameservers(self, value : list [str]) -> None :
INDENT
    self._nameservers = value
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/huawei_lte/test_sensor.py" startline="20" endline="22">
def test_format_default(value, expected) -> None :
INDENT
    assert sensor.format_default(value) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/huawei_lte/test_device_tracker.py" startline="18" endline="20">
def test_better_snakecase(value, expected) -> None :
INDENT
    assert device_tracker._better_snakecase(value) == expected
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/huawei_lte/__init__.py" startline="8" endline="23">
def magic_client(multi_basic_settings_value : dict) -> MagicMock :
INDENT
    information = MagicMock(return_value = {"SerialNumber" : "test-serial-number"})
    check_notifications = MagicMock(return_value = {"SmsStorageFull" : 0})
    status = MagicMock(
        return_value = {"ConnectionStatus" : ConnectionStatusEnum.CONNECTED.value})
    multi_basic_settings = MagicMock(return_value = multi_basic_settings_value)
    wifi_feature_switch = MagicMock(return_value = {"wifi24g_switch_enable" : 1})
    device = MagicMock(information = information)
    monitoring = MagicMock(check_notifications = check_notifications, status = status)
    wlan = MagicMock(
        multi_basic_settings = multi_basic_settings,
        wifi_feature_switch = wifi_feature_switch,
        )
    return MagicMock(device = device, monitoring = monitoring, wlan = wlan)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/met_eireann/conftest.py" startline="9" endline="23">
def mock_weather() :
INDENT
    with patch("meteireann.WeatherData") as mock_data :
    INDENT
        mock_data = mock_data.return_value
        mock_data.fetching_data = AsyncMock(return_value = True)
        mock_data.get_current_weather.return_value = {
            "condition" : "Cloud",
            "temperature" : 15,
            "pressure" : 100,
            "humidity" : 50,
            "wind_speed" : 10,
            "wind_bearing" : "NE",
            }
        mock_data.get_forecast.return_value = {}
        yield mock_data
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/media_source/test_models.py" startline="7" endline="43">
async def test_browse_media_as_dict() -> None :
INDENT
    base = models.BrowseMediaSource(
        domain = const.DOMAIN,
        identifier = "media",
        media_class = MediaClass.DIRECTORY,
        media_content_type = "folder",
        title = "media/",
        can_play = False,
        can_expand = True,
        children_media_class = MediaClass.MUSIC,
        )
    base.children = [
        models.BrowseMediaSource(
            domain = const.DOMAIN,
            identifier = "media/test.mp3",
            media_class = MediaClass.MUSIC,
            media_content_type = MediaType.MUSIC,
            title = "test.mp3",
            can_play = True,
            can_expand = False,
            )]
    item = base.as_dict()
    assert item ["title"] == "media/"
    assert item ["media_class"] == MediaClass.DIRECTORY
    assert item ["media_content_type"] == "folder"
    assert item ["media_content_id"] == f"{const.URI_SCHEME}{const.DOMAIN}/media"
    assert not item ["can_play"]
    assert item ["can_expand"]
    assert item ["children_media_class"] == MediaClass.MUSIC
    assert len(item ["children"]) == 1
    assert item ["children"] [0] ["title"] == "test.mp3"
    assert item ["children"] [0] ["media_class"] == MediaClass.MUSIC
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/media_source/test_models.py" startline="44" endline="66">
async def test_browse_media_parent_no_children() -> None :
INDENT
    base = models.BrowseMediaSource(
        domain = const.DOMAIN,
        identifier = "media",
        media_class = MediaClass.DIRECTORY,
        media_content_type = "folder",
        title = "media/",
        can_play = False,
        can_expand = True,
        )
    item = base.as_dict()
    assert item ["title"] == "media/"
    assert item ["media_class"] == MediaClass.DIRECTORY
    assert item ["media_content_type"] == "folder"
    assert item ["media_content_id"] == f"{const.URI_SCHEME}{const.DOMAIN}/media"
    assert not item ["can_play"]
    assert item ["can_expand"]
    assert len(item ["children"]) == 0
    assert item ["children_media_class"] is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/media_source/test_models.py" startline="67" endline="70">
async def test_media_source_default_name() -> None :
INDENT
    source = models.MediaSource(const.DOMAIN)
    assert source.name == const.DOMAIN
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/google_assistant/test_data_redaction.py" startline="10" endline="15">
def test_redact_msg() :
INDENT
    messages = json.loads(load_fixture("data_redaction.json", "google_assistant"))
    agent_user_id = "333dee20-1234-1234-1234-2225a0d70d4c"
    for item in messages :
    INDENT
        assert async_redact_msg(item ["raw"], agent_user_id) == item ["redacted"]
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/media_player/test_significant_change.py" startline="37" endline="43">
async def test_significant_state_change() -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(None, "on", attrs, "on", attrs)
    assert async_check_significant_change(None, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/media_player/test_significant_change.py" startline="124" endline="131">
async def test_significant_atributes_change(
old_attrs : dict, new_attrs : dict, expected_result : bool
) -> None :
INDENT
    assert (
        async_check_significant_change(None, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switchbot_cloud/conftest.py" startline="10" endline="16">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.switchbot_cloud.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/switchbot_cloud/__init__.py" startline="10" endline="21">
def configure_integration(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    config = {
        CONF_API_TOKEN : "test-token",
        CONF_API_KEY : "test-api-key",
        }
    entry = MockConfigEntry(
        domain = DOMAIN, data = config, entry_id = "123456", unique_id = "123456")
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mopeka/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="43" endline="53">
def test_not_supported(caplog : pytest.LogCaptureFixture) -> None :
INDENT
    assert get_accessory(None, None, State("demo.demo", "on"), 2, {}) is None
    assert get_accessory(None, None, State("light.demo", "on"), None, None) is None
    assert caplog.records [0].levelname == "WARNING"
    assert "invalid aid" in caplog.records [0].msg
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="54" endline="65">
def test_not_supported_media_player() -> None :
INDENT
    config = {CONF_FEATURE_LIST : {FEATURE_ON_OFF : None}}
    entity_state = State("media_player.demo", "on")
    assert get_accessory(None, None, entity_state, 2, config) is None
    entity_state = State("media_player.demo", "on")
    assert get_accessory(None, None, entity_state, 2, {}) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="69" endline="79">
def test_customize_options(config, name) -> None :
INDENT
    mock_type = Mock()
    conf = config.copy()
    conf [ATTR_INTEGRATION] = "platform_name"
    with patch.dict(TYPES, {"Light" : mock_type}) :
    INDENT
        entity_state = State("light.demo", "on")
        get_accessory(None, None, entity_state, 2, conf)
    DEDENT
    mock_type.assert_called_with(None, None, name, "light.demo", 2, conf)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="105" endline="116">
def test_types(type_name, entity_id, state, attrs, config) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, config)
    DEDENT
    assert mock_type.called
    if config :
    INDENT
        assert mock_type.call_args [0] [- 1] == config
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="184" endline="192">
def test_type_covers(type_name, entity_id, state, attrs) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, {})
    DEDENT
    assert mock_type.called
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="222" endline="233">
def test_type_media_player(type_name, entity_id, state, attrs, config) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, config)
    DEDENT
    assert mock_type.called
    if config :
    INDENT
        assert mock_type.call_args [0] [- 1] == config
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="307" endline="315">
def test_type_sensors(type_name, entity_id, state, attrs) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, {})
    DEDENT
    assert mock_type.called
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="344" endline="352">
def test_type_switches(type_name, entity_id, state, attrs, config) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, config)
    DEDENT
    assert mock_type.called
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="368" endline="376">
def test_type_vacuum(type_name, entity_id, state, attrs) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, {})
    DEDENT
    assert mock_type.called
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/homekit/test_get_accessories.py" startline="381" endline="387">
def test_type_camera(type_name, entity_id, state, attrs) -> None :
INDENT
    mock_type = Mock()
    with patch.dict(TYPES, {type_name : mock_type}) :
    INDENT
        entity_state = State(entity_id, state, attrs)
        get_accessory(None, None, entity_state, 2, {})
    DEDENT
    assert mock_type.called
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/notify/common.py" startline="18" endline="28">
def send_message(hass, message, title = None, data = None) :
INDENT
    info = {ATTR_MESSAGE : message}
    if title is not None :
    INDENT
        info [ATTR_TITLE] = title
    DEDENT
    if data is not None :
    INDENT
        info [ATTR_DATA] = data
    DEDENT
    hass.services.call(DOMAIN, SERVICE_NOTIFY, info)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/rapt_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/bluemaestro/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/blue_current/conftest.py" startline="11" endline="18">
def config_entry_fixture() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        entry_id = "uuid",
        unique_id = "1234",
        data = {"api_token" : "123"},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/velux/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.velux.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/proximity/conftest.py" startline="9" endline="21">
def config_zones(hass : HomeAssistant) :
INDENT
    hass.config.components.add("zone")
    hass.states.async_set(
        "zone.home",
        "zoning",
        {"name" : "Home", "latitude" : 2.1, "longitude" : 1.1, "radius" : 10},
        )
    hass.states.async_set(
        "zone.work",
        "zoning",
        {"name" : "Work", "latitude" : 2.3, "longitude" : 1.3, "radius" : 10},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuki/mock.py" startline="16" endline="26">
async def setup_nuki_integration(hass) :
INDENT
    entry = MockConfigEntry(
        domain = "nuki",
        unique_id = ID_HEX,
        data = {"host" : HOST, "port" : 8080, "token" : "test-token"},
        )
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/water_heater/test_significant_change.py" startline="24" endline="30">
async def test_significant_state_change(hass : HomeAssistant) -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(hass, "on", attrs, "on", attrs)
    assert async_check_significant_change(hass, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/water_heater/test_significant_change.py" startline="85" endline="97">
async def test_significant_atributes_change(
hass : HomeAssistant,
unit_system : UnitSystem,
old_attrs : dict,
new_attrs : dict,
expected_result : bool,
) -> None :
INDENT
    hass.config.units = unit_system
    assert (
        async_check_significant_change(hass, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/water_heater/conftest.py" startline="18" endline="23">
def config_flow_fixture(hass : HomeAssistant) -> Generator [None, None, None] :
INDENT
    mock_platform(hass, "test.config_flow")
    with mock_config_flow("test", MockFlow) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/amberelectric/helpers.py" startline="13" endline="32">
def generate_actual_interval(
channel_type : ChannelType, end_time : datetime
) -> ActualInterval :
INDENT
    start_time = end_time - timedelta(minutes = 30)
    return ActualInterval(
        duration = 30,
        spot_per_kwh = 1.0,
        per_kwh = 8.0,
        date = start_time.date(),
        nem_time = end_time,
        start_time = start_time,
        end_time = end_time,
        renewables = 50,
        channel_type = channel_type.value,
        spike_status = SpikeStatus.NO_SPIKE.value,
        descriptor = Descriptor.LOW.value,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/amberelectric/helpers.py" startline="33" endline="53">
def generate_current_interval(
channel_type : ChannelType, end_time : datetime
) -> CurrentInterval :
INDENT
    start_time = end_time - timedelta(minutes = 30)
    return CurrentInterval(
        duration = 30,
        spot_per_kwh = 1.0,
        per_kwh = 8.0,
        date = start_time.date(),
        nem_time = end_time,
        start_time = start_time,
        end_time = end_time,
        renewables = 50.6,
        channel_type = channel_type.value,
        spike_status = SpikeStatus.NO_SPIKE.value,
        descriptor = Descriptor.EXTREMELY_LOW.value,
        estimate = True,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/amberelectric/helpers.py" startline="54" endline="74">
def generate_forecast_interval(
channel_type : ChannelType, end_time : datetime
) -> ForecastInterval :
INDENT
    start_time = end_time - timedelta(minutes = 30)
    return ForecastInterval(
        duration = 30,
        spot_per_kwh = 1.1,
        per_kwh = 8.8,
        date = start_time.date(),
        nem_time = end_time,
        start_time = start_time,
        end_time = end_time,
        renewables = 50,
        channel_type = channel_type.value,
        spike_status = SpikeStatus.NO_SPIKE.value,
        descriptor = Descriptor.VERY_LOW.value,
        estimate = True,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/amberelectric/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.amberelectric.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mysensors/test_gateway.py" startline="22" endline="33">
def test_is_serial_port_windows(
hass : HomeAssistant, port : str, expect_valid : bool
) -> None :
INDENT
    with patch("sys.platform", "win32") :
    INDENT
        try :
        INDENT
            is_serial_port(port)
        DEDENT
        except vol.Invalid :
        INDENT
            assert not expect_valid
        DEDENT
        else :
        INDENT
            assert expect_valid
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aftership/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.aftership.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lacrosse_view/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.lacrosse_view.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/zeroconf/conftest.py" startline="7" endline="9">
def zc_mock_get_source_ip(mock_get_source_ip) :
INDENT
    return mock_get_source_ip
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="17" endline="42">
def _get_mock_thermostat_run() :
INDENT
    serial_number = "12345"
    thermostat = Mock(
        serial_number = serial_number,
        room = "Master bathroom",
        online = True,
        heating = True,
        temperature = 2222,
        celsius = 22,
        fahrenheit = 72,
        max_celsius = 69,
        max_fahrenheit = 157,
        min_celsius = 5,
        min_fahrenheit = 41,
        schedule_mode = SCHEDULE_RUN,
        target_celsius = 22,
        target_fahrenheit = 72,
        target_temperature = 2217,
        )
    thermostat.get_data = Mock()
    thermostat.resume_schedule = Mock()
    thermostat.schedule_mode = Mock()
    return thermostat

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="43" endline="68">
def _get_mock_thermostat_schedule_hold_unavailable() :
INDENT
    serial_number = "876"
    thermostat = Mock(
        serial_number = serial_number,
        room = "Guest bathroom",
        online = False,
        heating = False,
        temperature = 12,
        celsius = 12,
        fahrenheit = 102,
        max_celsius = 99,
        max_fahrenheit = 357,
        min_celsius = 9,
        min_fahrenheit = 21,
        schedule_mode = SCHEDULE_HOLD,
        target_celsius = 23,
        target_fahrenheit = 79,
        target_temperature = 2609,
        )
    thermostat.get_data = Mock()
    thermostat.resume_schedule = Mock()
    thermostat.schedule_mode = Mock()
    return thermostat

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="69" endline="94">
def _get_mock_thermostat_schedule_hold_available() :
INDENT
    serial_number = "876"
    thermostat = Mock(
        serial_number = serial_number,
        room = "Available bathroom",
        online = True,
        heating = False,
        temperature = 12,
        celsius = 12,
        fahrenheit = 102,
        max_celsius = 99,
        max_fahrenheit = 357,
        min_celsius = 9,
        min_fahrenheit = 21,
        schedule_mode = SCHEDULE_HOLD,
        target_celsius = 23,
        target_fahrenheit = 79,
        target_temperature = 2609,
        )
    thermostat.get_data = Mock()
    thermostat.resume_schedule = Mock()
    thermostat.schedule_mode = Mock()
    return thermostat

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="95" endline="122">
def _get_mock_thermostat_schedule_temporary_hold() :
INDENT
    serial_number = "999"
    thermostat = Mock(
        serial_number = serial_number,
        room = "Temp bathroom",
        online = True,
        heating = False,
        temperature = 14,
        celsius = 13,
        fahrenheit = 202,
        max_celsius = 39,
        max_fahrenheit = 357,
        min_celsius = 3,
        min_fahrenheit = 31,
        schedule_mode = SCHEDULE_TEMPORARY_HOLD,
        target_celsius = 43,
        target_fahrenheit = 99,
        target_temperature = 3729,
        max_temperature = 5000,
        min_temperature = 1,
        )
    thermostat.get_data = Mock()
    thermostat.resume_schedule = Mock()
    thermostat.schedule_mode = Mock()
    return thermostat

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="123" endline="130">
def _get_mock_nuheat(authenticate = None, get_thermostat = None) :
INDENT
    nuheat_mock = MagicMock()
    type(nuheat_mock).authenticate = MagicMock()
    type(nuheat_mock).get_thermostat = MagicMock(return_value = get_thermostat)
    return nuheat_mock

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/nuheat/mocks.py" startline="131" endline="135">
def _mock_get_config() :
INDENT
    return {
        DOMAIN : {CONF_USERNAME : "me", CONF_PASSWORD : "secret", CONF_DEVICES : [12345]}}
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geonetnz_volcano/conftest.py" startline="18" endline="30">
def config_entry() :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_LATITUDE : - 41.2,
            CONF_LONGITUDE : 174.7,
            CONF_RADIUS : 25,
            CONF_UNIT_SYSTEM : "metric",
            CONF_SCAN_INTERVAL : 300.0,
            },
        title = "-41.2, 174.7",
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/geonetnz_volcano/__init__.py" startline="6" endline="26">
def _generate_mock_feed_entry(
external_id,
title,
alert_level,
distance_to_home,
coordinates,
attribution = None,
activity = None,
hazards = None,
) :
INDENT
    feed_entry = MagicMock()
    feed_entry.external_id = external_id
    feed_entry.title = title
    feed_entry.alert_level = alert_level
    feed_entry.distance_to_home = distance_to_home
    feed_entry.coordinates = coordinates
    feed_entry.attribution = attribution
    feed_entry.activity = activity
    feed_entry.hazards = hazards
    return feed_entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/met/conftest.py" startline="9" endline="24">
def mock_weather() :
INDENT
    with patch("metno.MetWeatherData") as mock_data :
    INDENT
        mock_data = mock_data.return_value
        mock_data.fetching_data = AsyncMock(return_value = True)
        mock_data.get_current_weather.return_value = {
            "condition" : "cloudy",
            "temperature" : 15,
            "pressure" : 100,
            "humidity" : 50,
            "wind_speed" : 10,
            "wind_bearing" : "NE",
            "dew_point" : 12.1,
            }
        mock_data.get_forecast.return_value = {}
        yield mock_data
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/medcom_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/medcom_ble/__init__.py" startline="14" endline="21">
def patch_async_setup_entry(return_value = True) :
INDENT
    return patch(
        "homeassistant.components.medcom_ble.async_setup_entry",
        return_value = return_value,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/medcom_ble/__init__.py" startline="22" endline="29">
def patch_async_ble_device_from_address(return_value : BluetoothServiceInfoBleak | None) :
INDENT
    return patch(
        "homeassistant.components.bluetooth.async_ble_device_from_address",
        return_value = return_value,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/medcom_ble/__init__.py" startline="30" endline="39">
def patch_medcom_ble(return_value = MedcomBleDevice, side_effect = None) :
INDENT
    return patch.object(
        MedcomBleDeviceData,
        "update_device",
        return_value = return_value,
        side_effect = side_effect,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="11" endline="15">
def get_characteristic(self, key : str) -> str :
INDENT
    return key

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="21" endline="23">
def __init__(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="24" endline="27">
async def __aenter__(self, * args, ** kwargs) :
INDENT
    return self
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="28" endline="30">
async def __aexit__(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.__aexit__."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="31" endline="33">
async def connect(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.connect."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="34" endline="37">
async def disconnect(self, * args, ** kwargs) :
INDENT
    """Mock BleakClient.disconnect."""

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="41" endline="45">
async def read_gatt_char(self, * args, ** kwargs) -> bytes :
INDENT
    return b"\x05\x001.2.3"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/conftest.py" startline="47" endline="51">
def mock_bluetooth(enable_bluetooth) :
INDENT
    with mock.patch("xiaomi_ble.parser.BleakClient", MockBleakClientBattery5) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi_ble/__init__.py" startline="156" endline="174">
def make_advertisement(
address : str, payload : bytes, connectable : bool = True
) -> BluetoothServiceInfoBleak :
INDENT
    return BluetoothServiceInfoBleak(
        name = "Test Device",
        address = address,
        device = generate_ble_device(address, None),
        rssi = - 56,
        manufacturer_data = {},
        service_data = {
            "0000fe95-0000-1000-8000-00805f9b34fb" : payload,
            },
        service_uuids = ["0000fe95-0000-1000-8000-00805f9b34fb"],
        source = "local",
        advertisement = generate_advertisement_data(local_name = "Test Device"),
        time = 0,
        connectable = connectable,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/garages_amsterdam/conftest.py" startline="9" endline="32">
def mock_cases() :
INDENT
    with patch(
        "odp_amsterdam.ODPAmsterdam.all_garages",
        return_value = [
            Mock(
                garage_name = "IJDok",
                free_space_short = 100,
                free_space_long = 10,
                short_capacity = 120,
                long_capacity = 60,
                state = "ok",
                ),
            Mock(
                garage_name = "Arena",
                free_space_short = 200,
                free_space_long = 20,
                short_capacity = 240,
                long_capacity = 80,
                state = "error",
                ),
            ],
        ) as mock_get_garages :
    INDENT
        yield mock_get_garages
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/renault/__init__.py" startline="30" endline="35">
def get_no_data_icon(expected_entity : MappingProxyType) :
INDENT
    entity_id = expected_entity [ATTR_ENTITY_ID]
    return ICON_FOR_EMPTY_VALUES.get(entity_id, expected_entity.get(ATTR_ICON))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/renault/__init__.py" startline="36" endline="51">
def check_device_registry(
device_registry : DeviceRegistry, expected_device : MappingProxyType
) -> None :
INDENT
    assert len(device_registry.devices) == 1
    registry_entry = device_registry.async_get_device(
        identifiers = expected_device [ATTR_IDENTIFIERS])
    assert registry_entry is not None
    assert registry_entry.identifiers == expected_device [ATTR_IDENTIFIERS]
    assert registry_entry.manufacturer == expected_device [ATTR_MANUFACTURER]
    assert registry_entry.name == expected_device [ATTR_NAME]
    assert registry_entry.model == expected_device [ATTR_MODEL]
    assert registry_entry.sw_version == expected_device [ATTR_SW_VERSION]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/renault/__init__.py" startline="52" endline="68">
def check_entities(
hass : HomeAssistant,
entity_registry : EntityRegistry,
expected_entities : MappingProxyType,
) -> None :
INDENT
    for expected_entity in expected_entities :
    INDENT
        entity_id = expected_entity [ATTR_ENTITY_ID]
        registry_entry = entity_registry.entities.get(entity_id)
        assert registry_entry is not None
        assert registry_entry.unique_id == expected_entity [ATTR_UNIQUE_ID]
        state = hass.states.get(entity_id)
        assert state.state == expected_entity [ATTR_STATE]
        for attr in FIXED_ATTRIBUTES + DYNAMIC_ATTRIBUTES :
        INDENT
            assert state.attributes.get(attr) == expected_entity.get(attr)
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/renault/__init__.py" startline="69" endline="86">
def check_entities_no_data(
hass : HomeAssistant,
entity_registry : EntityRegistry,
expected_entities : MappingProxyType,
expected_state : str,
) -> None :
INDENT
    for expected_entity in expected_entities :
    INDENT
        entity_id = expected_entity [ATTR_ENTITY_ID]
        registry_entry = entity_registry.entities.get(entity_id)
        assert registry_entry is not None
        assert registry_entry.unique_id == expected_entity [ATTR_UNIQUE_ID]
        state = hass.states.get(entity_id)
        assert state.state == expected_state
        for attr in FIXED_ATTRIBUTES :
        INDENT
            assert state.attributes.get(attr) == expected_entity.get(attr)
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/renault/__init__.py" startline="87" endline="101">
def check_entities_unavailable(
hass : HomeAssistant,
entity_registry : EntityRegistry,
expected_entities : MappingProxyType,
) -> None :
INDENT
    for expected_entity in expected_entities :
    INDENT
        entity_id = expected_entity [ATTR_ENTITY_ID]
        registry_entry = entity_registry.entities.get(entity_id)
        assert registry_entry is not None, f"{entity_id} not found in registry"
        assert registry_entry.unique_id == expected_entity [ATTR_UNIQUE_ID]
        state = hass.states.get(entity_id)
        assert state.state == STATE_UNAVAILABLE
        for attr in FIXED_ATTRIBUTES :
        INDENT
            assert state.attributes.get(attr) == expected_entity.get(attr)
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/dwd_weather_warnings/conftest.py" startline="10" endline="16">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.dwd_weather_warnings.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/kraken/conftest.py" startline="9" endline="12">
def mock_call_rate_limit_sleep() :
INDENT
    with patch("homeassistant.components.kraken.CALL_RATE_LIMIT_SLEEP", new = 0) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gree/conftest.py" startline="12" endline="19">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.gree.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gree/conftest.py" startline="21" endline="27">
def discovery_fixture() :
INDENT
    with patch("homeassistant.components.gree.bridge.Discovery") as mock :
    INDENT
        mock.return_value = FakeDiscovery()
        yield mock

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/gree/conftest.py" startline="29" endline="35">
def device_fixture() :
INDENT
    with patch(
        "homeassistant.components.gree.bridge.Device",
        return_value = build_device_mock(),
        ) as mock :
    INDENT
        yield mock
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/islamic_prayer_times/conftest.py" startline="10" endline="16">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.islamic_prayer_times.async_setup_entry",
        return_value = True,
        ) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/http/conftest.py" startline="7" endline="9">
def aiohttp_client(event_loop, aiohttp_client, socket_enabled) :
INDENT
    return aiohttp_client
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/conftest.py" startline="13" endline="22">
def mock_device() :
INDENT
    device = MockDevice(ip = IP)
    with patch(
        "homeassistant.components.devolo_home_network.Device",
        side_effect = cycle([device]),
        ) :
    INDENT
        yield device

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/conftest.py" startline="24" endline="29">
def mock_repeater_device(mock_device : MockDevice) :
INDENT
    mock_device.plcnet = None
    return mock_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/conftest.py" startline="31" endline="36">
def mock_nonwifi_device(mock_device : MockDevice) :
INDENT
    mock_device.device.features = ["reset", "update", "led", "intmtg"]
    return mock_device

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/conftest.py" startline="38" endline="51">
def mock_validate_input() :
INDENT
    info = {
        "serial_number" : DISCOVERY_INFO.properties ["SN"],
        "title" : DISCOVERY_INFO.properties ["Product"],
        }
    with patch(
        "homeassistant.components.devolo_home_network.config_flow.validate_input",
        return_value = info,
        ) :
    INDENT
        yield info

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/conftest.py" startline="53" endline="54">
def devolo_home_network_mock_async_zeroconf(mock_async_zeroconf) :
INDENT
    """Auto mock zeroconf."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/__init__.py" startline="12" endline="21">
def configure_integration(hass : HomeAssistant) -> MockConfigEntry :
INDENT
    config = {
        CONF_IP_ADDRESS : IP,
        CONF_PASSWORD : "test",
        }
    entry = MockConfigEntry(domain = DOMAIN, data = config, entry_id = "123456")
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/mock.py" startline="28" endline="37">
def __init__(
self,
ip : str,
zeroconf_instance : AsyncZeroconf | Zeroconf | None = None,
) -> None :
INDENT
    super().__init__(ip, zeroconf_instance)
    self._firmware_version = DISCOVERY_INFO.properties ["FirmwareVersion"]
    self.reset()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/mock.py" startline="39" endline="42">
def firmware_version(self) -> str :
INDENT
    return self._firmware_version
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/mock.py" startline="44" endline="47">
def firmware_version(self, version : str) -> None :
INDENT
    self._firmware_version = version
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/mock.py" startline="48" endline="56">
async def async_connect(
self, session_instance : httpx.AsyncClient | None = None
) -> None :
INDENT
    self.mac = DISCOVERY_INFO.properties ["PlcMacAddress"]
    self.mt_number = DISCOVERY_INFO.properties ["MT"]
    self.product = DISCOVERY_INFO.properties ["Product"]
    self.serial_number = DISCOVERY_INFO.properties ["SN"]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/devolo_home_network/mock.py" startline="57" endline="79">
def reset(self) :
INDENT
    self._firmware_version = DISCOVERY_INFO.properties ["FirmwareVersion"]
    self.async_disconnect = AsyncMock()
    self.device = DeviceApi(IP, None, DISCOVERY_INFO)
    self.device.async_check_firmware_available = AsyncMock(
        return_value = FIRMWARE_UPDATE_AVAILABLE)
    self.device.async_get_led_setting = AsyncMock(return_value = False)
    self.device.async_restart = AsyncMock(return_value = True)
    self.device.async_start_wps = AsyncMock(return_value = True)
    self.device.async_get_wifi_connected_station = AsyncMock(
        return_value = CONNECTED_STATIONS)
    self.device.async_get_wifi_guest_access = AsyncMock(return_value = GUEST_WIFI)
    self.device.async_get_wifi_neighbor_access_points = AsyncMock(
        return_value = NEIGHBOR_ACCESS_POINTS)
    self.device.async_start_firmware_update = AsyncMock(return_value = True)
    self.plcnet = PlcNetApi(IP, None, DISCOVERY_INFO)
    self.plcnet.async_get_network_overview = AsyncMock(return_value = PLCNET)
    self.plcnet.async_identify_device_start = AsyncMock(return_value = True)
    self.plcnet.async_pair_device = AsyncMock(return_value = True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/common.py" startline="25" endline="50">
def __init__(
self,
event_type : str,
data : dict [str, Any] | None = None,
context : Context | None = None,
) :
INDENT
    self.event_type = event_type
    self.event_data = json.dumps(data, cls = JSONEncoder)
    self.data = data
    self.time_fired = dt_util.utcnow()
    self.time_fired_ts = dt_util.utc_to_timestamp(self.time_fired)
    self.context_parent_id_bin = (
        ulid_to_bytes_or_none(context.parent_id) if context else None)
    self.context_user_id_bin = (
        uuid_hex_to_bytes_or_none(context.user_id) if context else None)
    self.context_id_bin = ulid_to_bytes_or_none(context.id) if context else None
    self.state = None
    self.entity_id = None
    self.row_id = None
    self.shared_attrs = None
    self.attributes = None
    self.context_only = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/common.py" startline="52" endline="55">
def time_fired_minute(self) :
INDENT
    return self.time_fired.minute
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/common.py" startline="57" endline="61">
def time_fired_isoformat(self) :
INDENT
    return process_timestamp_to_utc_isoformat(self.time_fired)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/common.py" startline="62" endline="87">
def mock_humanify(hass_, rows) :
INDENT
    entity_name_cache = processor.EntityNameCache(hass_)
    ent_reg = er.async_get(hass_)
    event_cache = processor.EventCache({})
    context_lookup = {}
    logbook_config = hass_.data.get(logbook.DOMAIN, LogbookConfig({}, None, None))
    external_events = logbook_config.external_events
    logbook_run = processor.LogbookRun(
        context_lookup,
        external_events,
        event_cache,
        entity_name_cache,
        include_entity_name = True,
        format_time = processor._row_time_fired_isoformat,
        )
    context_augmenter = processor.ContextAugmenter(logbook_run)
    return list(
        processor._humanify(
            hass_,
            rows,
            ent_reg,
            logbook_run,
            context_augmenter,
            ),
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/conftest.py" startline="7" endline="8">
def stub_blueprint_populate_autouse(stub_blueprint_populate : None) -> None :
INDENT
    """Stub copying the blueprints to the config folder."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/logbook/test_models.py" startline="8" endline="27">
def test_lazy_event_partial_state_context() :
INDENT
    state = LazyEventPartialState(
        Mock(
            context_id_bin = b"1234123412341234",
            context_user_id_bin = b"1234123412341234",
            context_parent_id_bin = b"4444444444444444",
            event_data = {},
            event_type = "event_type",
            entity_id = "entity_id",
            state = "state",
            ),
        {},
        )
    assert state.context_id == "1H68SK8C9J6CT32CHK6GRK4CSM"
    assert state.context_user_id == "31323334313233343132333431323334"
    assert state.context_parent_id == "1M6GT38D1M6GT38D1M6GT38D1M"
    assert state.event_type == "event_type"
    assert state.entity_id == "entity_id"
    assert state.state == "state"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/common.py" startline="62" endline="65">
def get_all_devices(self) :
INDENT
    return TUYA_DEVICES
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/common.py" startline="66" endline="75">
def get_device_by_id(self, dev_id) :
INDENT
    if dev_id == LIGHT_ID_FAKE1 :
    INDENT
        return None
    DEDENT
    if dev_id == LIGHT_ID_FAKE2 :
    INDENT
        return switch.TuyaSwitch(SWITCH_DATA, None)
    DEDENT
    for device in TUYA_DEVICES :
    INDENT
        if device.object_id() == dev_id :
        INDENT
            return device
        DEDENT
    DEDENT
    return None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/conftest.py" startline="16" endline="25">
def mock_old_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "Old Tuya configuration entry",
        domain = DOMAIN,
        data = {CONF_APP_TYPE : "tuyaSmart"},
        unique_id = "12345",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/conftest.py" startline="27" endline="36">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        title = "12345",
        domain = DOMAIN,
        data = {CONF_USER_CODE : "12345"},
        unique_id = "12345",
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/conftest.py" startline="38" endline="43">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch("homeassistant.components.tuya.async_setup_entry", return_value = True) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tuya/conftest.py" startline="45" endline="70">
def mock_tuya_login_control() -> Generator [MagicMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.tuya.config_flow.LoginControl", autospec = True) as login_control_mock :
    INDENT
        login_control = login_control_mock.return_value
        login_control.qr_code.return_value = {
            "success" : True,
            "result" : {
                "qrcode" : "mocked_qr_code",
                },
            }
        login_control.login_result.return_value = (
            True,
            {
                "t" : "mocked_t",
                "uid" : "mocked_uid",
                "username" : "mocked_username",
                "expire_time" : "mocked_expire_time",
                "access_token" : "mocked_access_token",
                "refresh_token" : "mocked_refresh_token",
                "terminal_id" : "mocked_terminal_id",
                "endpoint" : "mocked_endpoint",
                },
            )
        yield login_control
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/template/test_template_entity.py" startline="10" endline="24">
async def test_template_entity_requires_hass_set(hass : HomeAssistant) -> None :
INDENT
    entity = template_entity.TemplateEntity(hass)
    with pytest.raises(AssertionError) :
    INDENT
        entity.add_template_attribute("_hello", template.Template("Hello"))
    DEDENT
    entity.hass = object()
    entity.add_template_attribute("_hello", template.Template("Hello", None))
    tpl_with_hass = template.Template("Hello", entity.hass)
    entity.add_template_attribute("_hello", tpl_with_hass)

    assert len(entity._template_attrs.get(tpl_with_hass, [])) == 2
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/conftest.py" startline="19" endline="24">
def discord_notification_service(hass : HomeAssistant) -> DiscordNotificationService :
INDENT
    hass.config.allowlist_external_urls.add(URL_ATTACHMENT)
    return DiscordNotificationService(hass, "token")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/conftest.py" startline="26" endline="46">
def discord_aiohttp_mock_factory(
aioclient_mock : AiohttpClientMocker,
) -> AiohttpClientMocker :
INDENT
    def _discord_aiohttp_mock_factory(
    headers : dict [str, str] = None,
    ) -> AiohttpClientMocker :
    INDENT
        if headers is not None :
        INDENT
            aioclient_mock.get(
                URL_ATTACHMENT, status = HTTPStatus.OK, content = CONTENT, headers = headers)
        DEDENT
        else :
        INDENT
            aioclient_mock.get(
                URL_ATTACHMENT,
                status = HTTPStatus.OK,
                content = CONTENT,
                )
        DEDENT
        return aioclient_mock
    DEDENT
    return _discord_aiohttp_mock_factory
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/conftest.py" startline="31" endline="45">
def _discord_aiohttp_mock_factory(
headers : dict [str, str] = None,
) -> AiohttpClientMocker :
INDENT
    if headers is not None :
    INDENT
        aioclient_mock.get(
            URL_ATTACHMENT, status = HTTPStatus.OK, content = CONTENT, headers = headers)
    DEDENT
    else :
    INDENT
        aioclient_mock.get(
            URL_ATTACHMENT,
            status = HTTPStatus.OK,
            content = CONTENT,
            )
    DEDENT
    return aioclient_mock
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/__init__.py" startline="25" endline="35">
def create_entry(hass : HomeAssistant) -> ConfigEntry :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        data = CONF_DATA,
        unique_id = "1234567890",
        )
    entry.add_to_hass(hass)
    return entry

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/__init__.py" startline="36" endline="46">
def mocked_discord_info() :
INDENT
    mocked_discord = AsyncMock()
    mocked_discord.id = "1234567890"
    mocked_discord.name = NAME
    return patch(
        "homeassistant.components.discord.config_flow.nextcord.Client.application_info",
        return_value = mocked_discord,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/__init__.py" startline="47" endline="51">
def patch_discord_login() :
INDENT
    return patch("homeassistant.components.discord.config_flow.nextcord.Client.login")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/discord/__init__.py" startline="52" endline="56">
def mock_exception() :
INDENT
    response = Mock()
    response.status = 404
    return nextcord.HTTPException(response, "")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ipma/__init__.py" startline="19" endline="30">
async def fire_risk(self, api) :
INDENT
    RCM = namedtuple(
        "RCM",
        [
            "dico",
            "rcm",
            "coordinates",
            ],
        )
    return RCM("some place", 3, (0, 0))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ipma/__init__.py" startline="31" endline="38">
async def uv_risk(self, api) :
INDENT
    UV = namedtuple(
        "UV",
        ["idPeriodo", "intervaloHora", "data", "globalIdLocal", "iUv"],
        )
    return UV(0, "0", datetime.now(), 0, 5.7)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ipma/__init__.py" startline="39" endline="55">
async def observation(self, api) :
INDENT
    Observation = namedtuple(
        "Observation",
        [
            "accumulated_precipitation",
            "humidity",
            "pressure",
            "radiation",
            "temperature",
            "wind_direction",
            "wind_intensity_km",
            ],
        )
    return Observation(0.0, 71.0, 1000.0, 0.0, 18.0, "NW", 3.94)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ipma/__init__.py" startline="56" endline="126">
async def forecast(self, api, period) :
INDENT
    Forecast = namedtuple(
        "Forecast",
        [
            "feels_like_temperature",
            "forecast_date",
            "forecasted_hours",
            "humidity",
            "max_temperature",
            "min_temperature",
            "precipitation_probability",
            "temperature",
            "update_date",
            "weather_type",
            "wind_direction",
            "wind_strength",
            ],
        )
    WeatherType = namedtuple("WeatherType", ["id", "en", "pt"])
    if period == 24 :
    INDENT
        return [
            Forecast(
                None,
                datetime(2020, 1, 16, 0, 0, 0),
                24,
                None,
                16.2,
                10.6,
                "100.0",
                13.4,
                "2020-01-15T07:51:00",
                WeatherType(9, "Rain/showers", "Chuva/aguaceiros"),
                "S",
                "10",
                ),
            ]
    DEDENT
    if period == 1 :
    INDENT
        return [
            Forecast(
                "7.7",
                datetime(2020, 1, 15, 1, 0, 0, tzinfo = UTC),
                1,
                "86.9",
                12.0,
                None,
                80.0,
                10.6,
                "2020-01-15T02:51:00",
                WeatherType(10, "Light rain", "Chuva fraca ou chuvisco"),
                "S",
                "32.7",
                ),
            Forecast(
                "5.7",
                datetime(2020, 1, 15, 2, 0, 0, tzinfo = UTC),
                1,
                "86.9",
                12.0,
                None,
                80.0,
                10.6,
                "2020-01-15T02:51:00",
                WeatherType(1, "Clear sky", "C\u00e9u limpo"),
                "S",
                "32.7",
                ),
            ]
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/climate/test_significant_change.py" startline="29" endline="35">
async def test_significant_state_change(hass : HomeAssistant) -> None :
INDENT
    attrs = {}
    assert not async_check_significant_change(hass, "on", attrs, "on", attrs)
    assert async_check_significant_change(hass, "on", attrs, "off", attrs)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/climate/test_significant_change.py" startline="118" endline="130">
async def test_significant_atributes_change(
hass : HomeAssistant,
unit_system : UnitSystem,
old_attrs : dict,
new_attrs : dict,
expected_result : bool,
) -> None :
INDENT
    hass.config.units = unit_system
    assert (
        async_check_significant_change(hass, "state", old_attrs, "state", new_attrs)
        == expected_result)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/climate/conftest.py" startline="18" endline="23">
def config_flow_fixture(hass : HomeAssistant) -> Generator [None, None, None] :
INDENT
    mock_platform(hass, "test.config_flow")
    with mock_config_flow("test", MockFlow) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="10" endline="16">
def __init__(self, * args) :
INDENT
    super().__init__(* args)
    self.pin_code = None
    self.paired = False
    self.always_fail = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="17" endline="21">
def pin(self, pin) :
INDENT
    self.pin_code = pin
    self.paired = False
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="23" endline="26">
def device_provides_pin(self) :
INDENT
    return self.service.protocol in [Protocol.MRP, Protocol.AirPlay]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="28" endline="34">
def has_paired(self) :
INDENT
    return not self.always_fail and self.paired
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="35" endline="37">
async def begin(self) :
INDENT
    """Start pairing process."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="38" endline="43">
async def finish(self) :
INDENT
    self.paired = True
    self.service.credentials = self.service.protocol.name.lower() + "_creds"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="44" endline="51">
def create_conf(name, address, * services) :
INDENT
    atv = conf.AppleTV(name, address)
    for service in services :
    INDENT
        atv.add_service(service)
    DEDENT
    return atv

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="52" endline="63">
def mrp_service(enabled = True, unique_id = "mrpid") :
INDENT
    return conf.ManualService(
        unique_id,
        Protocol.MRP,
        5555,
        {},
        pairing_requirement = const.PairingRequirement.Mandatory,
        enabled = enabled,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="64" endline="74">
def airplay_service() :
INDENT
    return conf.ManualService(
        "airplayid",
        Protocol.AirPlay,
        7777,
        {},
        pairing_requirement = const.PairingRequirement.Mandatory,
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/apple_tv/common.py" startline="75" endline="83">
def raop_service() :
INDENT
    return conf.ManualService(
        "AABBCCDDEEFF",
        Protocol.RAOP,
        7000,
        {},
        pairing_requirement = const.PairingRequirement.Mandatory,
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/time_date/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.time_date.async_setup_entry", return_value = True) as mock_setup :
    INDENT
        yield mock_setup
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/qnap/conftest.py" startline="18" endline="25">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.qnap.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/qnap/conftest.py" startline="27" endline="34">
def qnap_connect(mock_get_source_ip : None) -> Generator [MagicMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.qnap.config_flow.QNAPStats", autospec = True) as host_mock_class :
    INDENT
        host_mock = host_mock_class.return_value
        host_mock.get_system_stats.return_value = TEST_SYSTEM_STATS
        yield host_mock
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="26" endline="30">
def __init__(self, username : str) -> None :
INDENT
    self.username = username

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="34" endline="38">
def __init__(self, item : Track) -> None :
INDENT
    self.item = item

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="42" endline="46">
def __init__(self, track : Track) -> None :
INDENT
    self.track = track

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="50" endline="66">
def __init__(
self,
username : str = USERNAME_1,
now_playing_result : Track | None = None,
thrown_error : Exception | None = None,
friends : list = [],
recent_tracks : list [Track] = [],
top_tracks : list [Track] = [],
) -> None :
INDENT
    self._now_playing_result = now_playing_result
    self._thrown_error = thrown_error
    self._friends = friends
    self._recent_tracks = recent_tracks
    self._top_tracks = top_tracks
    self.name = username
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="67" endline="70">
def get_name(self, capitalized : bool) -> str :
INDENT
    return self.name
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="71" endline="76">
def get_playcount(self) -> int :
INDENT
    if self._thrown_error :
    INDENT
        raise self._thrown_error
    DEDENT
    return len(self._recent_tracks)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="77" endline="80">
def get_image(self) -> str :
INDENT
    return "image"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="81" endline="84">
def get_recent_tracks(self, limit : int) -> list [MockLastTrack] :
INDENT
    return [MockLastTrack(track) for track in self._recent_tracks]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="85" endline="88">
def get_top_tracks(self, limit : int) -> list [MockTopTrack] :
INDENT
    return [MockTopTrack(track) for track in self._recent_tracks]
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="89" endline="92">
def get_now_playing(self) -> Track :
INDENT
    return self._now_playing_result
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="93" endline="99">
def get_friends(self) -> list [any] :
INDENT
    if len(self._friends) == 0 :
    INDENT
        raise PyLastError("network", "status", "Page not found")
    DEDENT
    return self._friends

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="100" endline="104">
def patch_user(user : MockUser) -> MockUser :
INDENT
    return patch("pylast.User", return_value = user)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/lastfm/__init__.py" startline="105" endline="107">
def patch_setup_entry() -> bool :
INDENT
    return patch("homeassistant.components.lastfm.async_setup_entry", return_value = True)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/trafikverket_camera/test_sensor.py" startline="11" endline="30">
async def test_sensor(
hass : HomeAssistant,
entity_registry_enabled_by_default : None,
load_int : ConfigEntry,
get_camera : CameraInfo,
) -> None :
INDENT
    state = hass.states.get("sensor.test_camera_direction")
    assert state.state == "180"
    state = hass.states.get("sensor.test_camera_modified")
    assert state.state == "2022-04-04T04:04:04+00:00"
    state = hass.states.get("sensor.test_camera_photo_time")
    assert state.state == "2022-04-04T04:04:04+00:00"
    state = hass.states.get("sensor.test_camera_photo_url")
    assert state.state == "https://www.testurl.com/test_photo.jpg"
    state = hass.states.get("sensor.test_camera_status")
    assert state.state == "Running"
    state = hass.states.get("sensor.test_camera_camera_type")
    assert state.state == "Road"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/trafikverket_camera/test_binary_sensor.py" startline="12" endline="21">
async def test_sensor(
hass : HomeAssistant,
entity_registry_enabled_by_default : None,
load_int : ConfigEntry,
get_camera : CameraInfo,
) -> None :
INDENT
    state = hass.states.get("binary_sensor.test_camera_active")
    assert state.state == STATE_ON
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/select/test_significant_change.py" startline="9" endline="21">
async def test_significant_change(hass : HomeAssistant) -> None :
INDENT
    attrs1 = {"options" : ["option1", "option2"]}
    attrs2 = {"options" : ["option1", "option2", "option3"]}
    assert not async_check_significant_change(
        hass, "option1", attrs1, "option1", attrs1)
    assert not async_check_significant_change(
        hass, "option1", attrs1, "option1", attrs2)
    assert async_check_significant_change(hass, "option1", attrs1, "option2", attrs1)
    assert async_check_significant_change(hass, "option1", attrs1, "option2", attrs2)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/test_util.py" startline="9" endline="15">
async def test_ecobee_date_with_valid_input() -> None :
INDENT
    test_input = "2019-09-27"
    assert ecobee_date(test_input) == test_input
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/test_util.py" startline="16" endline="23">
async def test_ecobee_date_with_invalid_input() -> None :
INDENT
    test_input = "20190927"
    with pytest.raises(vol.Invalid) :
    INDENT
        ecobee_date(test_input)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/test_util.py" startline="24" endline="30">
async def test_ecobee_time_with_valid_input() -> None :
INDENT
    test_input = "20:55:15"
    assert ecobee_time(test_input) == test_input
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/test_util.py" startline="31" endline="36">
async def test_ecobee_time_with_invalid_input() -> None :
INDENT
    test_input = "20:55"
    with pytest.raises(vol.Invalid) :
    INDENT
        ecobee_time(test_input)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/conftest.py" startline="13" endline="24">
def requests_mock_fixture(requests_mock) :
INDENT
    requests_mock.get(
        "https://api.ecobee.com/1/thermostat",
        text = load_fixture("ecobee/ecobee-data.json"),
        )
    requests_mock.post(
        "https://api.ecobee.com/token",
        text = load_fixture("ecobee/ecobee-token.json"),
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ecobee/conftest.py" startline="26" endline="34">
def mock_ecobee() :
INDENT
    ecobee = MagicMock()
    ecobee.request_pin.return_value = True
    ecobee.refresh_tokens.return_value = True
    ecobee.config = {ECOBEE_API_KEY : "mocked_key", ECOBEE_REFRESH_TOKEN : "mocked_token"}
    with patch("homeassistant.components.ecobee.Ecobee", return_value = ecobee) :
    INDENT
        yield ecobee
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/roborock/test_sensor.py" startline="22" endline="58">
async def test_sensors(hass : HomeAssistant, setup_entry : MockConfigEntry) -> None :
INDENT
    assert len(hass.states.async_all("sensor")) == 28
    assert hass.states.get("sensor.roborock_s7_maxv_main_brush_time_left").state == str(
        MAIN_BRUSH_REPLACE_TIME - 74382)
    assert hass.states.get("sensor.roborock_s7_maxv_side_brush_time_left").state == str(
        SIDE_BRUSH_REPLACE_TIME - 74382)
    assert hass.states.get("sensor.roborock_s7_maxv_filter_time_left").state == str(
        FILTER_REPLACE_TIME - 74382)
    assert hass.states.get("sensor.roborock_s7_maxv_sensor_time_left").state == str(
        SENSOR_DIRTY_REPLACE_TIME - 74382)
    assert hass.states.get("sensor.roborock_s7_maxv_cleaning_time").state == "1176"
    assert (
        hass.states.get("sensor.roborock_s7_maxv_total_cleaning_time").state == "74382")
    assert hass.states.get("sensor.roborock_s7_maxv_status").state == "charging"
    assert (
        hass.states.get("sensor.roborock_s7_maxv_total_cleaning_area").state == "1159.2")
    assert hass.states.get("sensor.roborock_s7_maxv_cleaning_area").state == "21.0"
    assert hass.states.get("sensor.roborock_s7_maxv_vacuum_error").state == "none"
    assert hass.states.get("sensor.roborock_s7_maxv_battery").state == "100"
    assert hass.states.get("sensor.roborock_s7_maxv_dock_error").state == "ok"
    assert (
        hass.states.get("sensor.roborock_s7_maxv_last_clean_begin").state
        == "2023-01-01T03:22:10+00:00")
    assert (
        hass.states.get("sensor.roborock_s7_maxv_last_clean_end").state
        == "2023-01-01T03:43:58+00:00")
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/roborock/test_sensor.py" startline="59" endline="94">
async def test_listener_update(
hass : HomeAssistant, setup_entry : MockConfigEntry
) -> None :
INDENT
    assert hass.states.get("sensor.roborock_s7_maxv_status").state == "charging"
    client = RoborockMqttClient(
        USER_DATA, DeviceData(device = HomeDataDevice("abc123", "", "", "", ""), model = ""))
    with patch("roborock.api.AttributeCache.value", STATUS.as_dict()) :
    INDENT
        client.on_message_received(
            [
                RoborockMessage(
                    protocol = RoborockMessageProtocol.GENERAL_REQUEST,
                    payload = b'{"t": 1699464794, "dps": {"121": 5}}',
                    )])
    DEDENT
    assert hass.states.get("sensor.roborock_s7_maxv_filter_time_left").state == str(
        FILTER_REPLACE_TIME - 74382)
    with patch("roborock.api.AttributeCache.value", CONSUMABLE.as_dict()) :
    INDENT
        client.on_message_received(
            [
                RoborockMessage(
                    protocol = RoborockMessageProtocol.GENERAL_REQUEST,
                    payload = b'{"t": 1699464794, "dps": {"127": 743}}',
                    )])
    DEDENT
    assert hass.states.get("sensor.roborock_s7_maxv_filter_time_left").state == str(
        FILTER_REPLACE_TIME - 743)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/roborock/test_binary_sensor.py" startline="8" endline="21">
async def test_binary_sensors(
hass : HomeAssistant, setup_entry : MockConfigEntry
) -> None :
INDENT
    assert len(hass.states.async_all("binary_sensor")) == 8
    assert hass.states.get("binary_sensor.roborock_s7_maxv_mop_attached").state == "on"
    assert (
        hass.states.get("binary_sensor.roborock_s7_maxv_water_box_attached").state
        == "on")
    assert (
        hass.states.get("binary_sensor.roborock_s7_maxv_water_shortage").state == "off")
    assert hass.states.get("binary_sensor.roborock_s7_maxv_cleaning").state == "off"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/caldav/conftest.py" startline="24" endline="28">
def mock_platforms() -> list [Platform] :
INDENT
    return []

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/caldav/conftest.py" startline="30" endline="35">
async def mock_patch_platforms(platforms : list [str]) -> None :
INDENT
    with patch(f"homeassistant.components.{DOMAIN}.PLATFORMS", platforms) :
    INDENT
        yield
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/caldav/conftest.py" startline="37" endline="41">
def mock_calendars() -> list [Mock] :
INDENT
    return []

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/caldav/conftest.py" startline="43" endline="53">
def mock_dav_client(calendars : list [Mock]) -> Mock :
INDENT
    with patch(
        "homeassistant.components.caldav.calendar.caldav.DAVClient") as mock_client :
    INDENT
        mock_client.return_value.principal.return_value.calendars.return_value = (
            calendars)
        yield mock_client

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/caldav/conftest.py" startline="55" endline="65">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        data = {
            CONF_URL : TEST_URL,
            CONF_USERNAME : TEST_USERNAME,
            CONF_PASSWORD : TEST_PASSWORD,
            CONF_VERIFY_SSL : True,
            },
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/light/test_significant_change.py" startline="14" endline="62">
async def test_significant_change() -> None :
INDENT
    assert not async_check_significant_change(None, "on", {}, "on", {})
    assert async_check_significant_change(None, "on", {}, "off", {})
    assert not async_check_significant_change(
        None, "on", {ATTR_BRIGHTNESS : 60}, "on", {ATTR_BRIGHTNESS : 61})
    assert async_check_significant_change(
        None, "on", {ATTR_BRIGHTNESS : 60}, "on", {ATTR_BRIGHTNESS : 63})
    assert not async_check_significant_change(
        None, "on", {ATTR_COLOR_TEMP : 60}, "on", {ATTR_COLOR_TEMP : 64})
    assert async_check_significant_change(
        None, "on", {ATTR_COLOR_TEMP : 60}, "on", {ATTR_COLOR_TEMP : 65})
    for eff1, eff2, expected in (
        (None, None, False),
        (None, "colorloop", True),
        ("colorloop", None, True),
        ("colorloop", "jump", True),
        ("colorloop", "colorloop", False),
        ) :
    INDENT
        result = async_check_significant_change(
            None, "on", {ATTR_EFFECT : eff1}, "on", {ATTR_EFFECT : eff2})
        assert result is expected
    DEDENT
    assert not async_check_significant_change(
        None, "on", {ATTR_HS_COLOR : [120, 20]}, "on", {ATTR_HS_COLOR : [124, 20]})
    assert async_check_significant_change(
        None, "on", {ATTR_HS_COLOR : [120, 20]}, "on", {ATTR_HS_COLOR : [125, 20]})
    assert not async_check_significant_change(
        None, "on", {ATTR_HS_COLOR : [120, 20]}, "on", {ATTR_HS_COLOR : [120, 22]})
    assert async_check_significant_change(
        None, "on", {ATTR_HS_COLOR : [120, 20]}, "on", {ATTR_HS_COLOR : [120, 23]})
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/light/conftest.py" startline="11" endline="25">
def mock_light_profiles() :
INDENT
    data = {}
    def mock_profiles_class(hass) :
    INDENT
        profiles = Profiles(hass)
        profiles.data = data
        profiles.async_initialize = AsyncMock()
        return profiles
    DEDENT
    with patch(
        "homeassistant.components.light.Profiles",
        side_effect = mock_profiles_class,
        ) :
    INDENT
        yield data
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/light/conftest.py" startline="15" endline="20">
def mock_profiles_class(hass) :
INDENT
    profiles = Profiles(hass)
    profiles.data = data
    profiles.async_initialize = AsyncMock()
    return profiles
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="13" endline="20">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.imap.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="22" endline="26">
def imap_has_capability() -> bool :
INDENT
    return True

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="28" endline="32">
def imap_login_state() -> str :
INDENT
    return AUTH

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="34" endline="38">
def imap_select_state() -> str :
INDENT
    return SELECTED

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="40" endline="44">
def imap_search() -> tuple [str, list [bytes]] :
INDENT
    return EMPTY_SEARCH_RESPONSE

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="46" endline="50">
def imap_fetch() -> tuple [str, list [bytes | bytearray]] :
INDENT
    return TEST_FETCH_RESPONSE_TEXT_PLAIN

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="52" endline="56">
def imap_pending_idle() -> bool :
INDENT
    return True

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="58" endline="112">
async def mock_imap_protocol(
imap_search : tuple [str, list [bytes]],
imap_fetch : tuple [str, list [bytes | bytearray]],
imap_has_capability : bool,
imap_pending_idle : bool,
imap_login_state : str,
imap_select_state : str,
) -> Generator [MagicMock, None] :
INDENT
    with patch(
        "homeassistant.components.imap.coordinator.IMAP4_SSL", autospec = True) as imap_mock :
    INDENT
        imap_mock = imap_mock.return_value
        async def login(user : str, password : str) -> Response :
        INDENT
            imap_mock.protocol.state = imap_login_state
            if imap_login_state ! = AUTH :
            INDENT
                return Response("BAD", [])
            DEDENT
            return Response("OK", [b"CAPABILITY IMAP4rev1 ...", b"Logged in"])
        DEDENT
        async def close() -> Response :
        INDENT
            imap_mock.protocol.state = imap_login_state
            return Response("OK", [])
        DEDENT
        async def logout() -> Response :
        INDENT
            imap_mock.protocol.state = LOGOUT
            return Response("OK", [])
        DEDENT
        async def select(mailbox : str = "INBOX") -> Response :
        INDENT
            imap_mock.protocol.state = imap_select_state
            if imap_login_state ! = SELECTED :
            INDENT
                return Response("BAD", [])
            DEDENT
            return Response("OK", [])
        DEDENT
        async def wait_hello_from_server() -> None :
        INDENT
            imap_mock.protocol.state = NONAUTH
        DEDENT
        imap_mock.has_pending_idle.return_value = imap_pending_idle
        imap_mock.protocol = MagicMock()
        imap_mock.protocol.state = STARTED
        imap_mock.has_capability.return_value = imap_has_capability
        imap_mock.login.side_effect = login
        imap_mock.close.side_effect = close
        imap_mock.logout.side_effect = logout
        imap_mock.select.side_effect = select
        imap_mock.search.return_value = Response(* imap_search)
        imap_mock.fetch.return_value = Response(* imap_fetch)
        imap_mock.wait_hello_from_server.side_effect = wait_hello_from_server
        yield imap_mock
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="73" endline="79">
async def login(user : str, password : str) -> Response :
INDENT
    imap_mock.protocol.state = imap_login_state
    if imap_login_state ! = AUTH :
    INDENT
        return Response("BAD", [])
    DEDENT
    return Response("OK", [b"CAPABILITY IMAP4rev1 ...", b"Logged in"])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="80" endline="84">
async def close() -> Response :
INDENT
    imap_mock.protocol.state = imap_login_state
    return Response("OK", [])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="85" endline="89">
async def logout() -> Response :
INDENT
    imap_mock.protocol.state = LOGOUT
    return Response("OK", [])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="90" endline="96">
async def select(mailbox : str = "INBOX") -> Response :
INDENT
    imap_mock.protocol.state = imap_select_state
    if imap_login_state ! = SELECTED :
    INDENT
        return Response("BAD", [])
    DEDENT
    return Response("OK", [])
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/imap/conftest.py" startline="97" endline="100">
async def wait_hello_from_server() -> None :
INDENT
    imap_mock.protocol.state = NONAUTH
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/agent_dvr/conftest.py" startline="10" endline="15">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.agent_dvr.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="25" endline="147">
def mocked_requests(* args, ** kwargs) :
INDENT
    class MockResponse :
    INDENT
        """Class to represent a mocked response."""
        def __init__(self, json_data, status_code) :
        INDENT
            self.json_data = json_data
            self.status_code = status_code
        DEDENT
        def json(self) :
        INDENT
            return self.json_data
        DEDENT
        @ property
        def content(self) :
        INDENT
            return self.json()
        DEDENT
        def raise_for_status(self) :
        INDENT
            if self.status_code ! = HTTPStatus.OK :
            INDENT
                raise requests.HTTPError(self.status_code)
            DEDENT
        DEDENT
    DEDENT
    data = kwargs.get("data")
    global FIRST_CALL
    if data and data.get("username", None) == INVALID_USERNAME :
    INDENT
        return MockResponse({"code" : "401", "msg" : "Invalid token"}, 200)
    DEDENT
    if data and data.get("username", None) == TOKEN_TIMEOUT_USERNAME :
    INDENT
        return MockResponse(
            {
                "url" : "/cgi-bin/luci/;stok=ef5860/web/home",
                "token" : "timedOut",
                "code" : "0",
                },
            200,
            )
    DEDENT
    if str(args [0]).startswith(URL_AUTHORIZE) :
    INDENT
        return MockResponse(
            {
                "url" : "/cgi-bin/luci/;stok=ef5860/web/home",
                "token" : "ef5860",
                "code" : "0",
                },
            200,
            )
    DEDENT
    if str(args [0]).endswith(f"timedOut/{URL_LIST_END}") and FIRST_CALL is True :
    INDENT
        FIRST_CALL = False
        return MockResponse({"code" : "401", "msg" : "Invalid token"}, 200)
    DEDENT
    if str(args [0]).endswith(URL_LIST_END) :
    INDENT
        return MockResponse(
            {
                "mac" : "1C:98:EC:0E:D5:A4",
                "list" : [
                    {
                        "mac" : "23:83:BF:F6:38:A0",
                        "oname" : "12255ff",
                        "isap" : 0,
                        "parent" : "",
                        "authority" : {"wan" : 1, "pridisk" : 0, "admin" : 1, "lan" : 0},
                        "push" : 0,
                        "online" : 1,
                        "name" : "Device1",
                        "times" : 0,
                        "ip" : [
                            {
                                "downspeed" : "0",
                                "online" : "496957",
                                "active" : 1,
                                "upspeed" : "0",
                                "ip" : "192.168.0.25",
                                }],
                        "statistics" : {
                            "downspeed" : "0",
                            "online" : "496957",
                            "upspeed" : "0",
                            },
                        "icon" : "",
                        "type" : 1,
                        },
                    {
                        "mac" : "1D:98:EC:5E:D5:A6",
                        "oname" : "CdddFG58",
                        "isap" : 0,
                        "parent" : "",
                        "authority" : {"wan" : 1, "pridisk" : 0, "admin" : 1, "lan" : 0},
                        "push" : 0,
                        "online" : 1,
                        "name" : "Device2",
                        "times" : 0,
                        "ip" : [
                            {
                                "downspeed" : "0",
                                "online" : "347325",
                                "active" : 1,
                                "upspeed" : "0",
                                "ip" : "192.168.0.3",
                                }],
                        "statistics" : {
                            "downspeed" : "0",
                            "online" : "347325",
                            "upspeed" : "0",
                            },
                        "icon" : "",
                        "type" : 0,
                        },
                    ],
                "code" : 0,
                },
            200,
            )
    DEDENT
    _LOGGER.debug("UNKNOWN ROUTE")

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="31" endline="35">
def __init__(self, json_data, status_code) :
INDENT
    self.json_data = json_data
    self.status_code = status_code
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="36" endline="39">
def json(self) :
INDENT
    return self.json_data
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="41" endline="44">
def content(self) :
INDENT
    return self.json()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="45" endline="49">
def raise_for_status(self) :
INDENT
    if self.status_code ! = HTTPStatus.OK :
    INDENT
        raise requests.HTTPError(self.status_code)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="152" endline="172">
async def test_config(xiaomi_mock, hass : HomeAssistant) -> None :
INDENT
    config = {
        DOMAIN : xiaomi.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : xiaomi.DOMAIN,
                CONF_HOST : "192.168.0.1",
                CONF_PASSWORD : "passwordTest",
                })}
    xiaomi.get_scanner(hass, config)
    assert xiaomi_mock.call_count == 1
    assert xiaomi_mock.call_args == call(config [DOMAIN])
    call_arg = xiaomi_mock.call_args [0] [0]
    assert call_arg ["username"] == "admin"
    assert call_arg ["password"] == "passwordTest"
    assert call_arg ["host"] == "192.168.0.1"
    assert call_arg ["platform"] == "device_tracker"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="177" endline="198">
async def test_config_full(xiaomi_mock, hass : HomeAssistant) -> None :
INDENT
    config = {
        DOMAIN : xiaomi.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : xiaomi.DOMAIN,
                CONF_HOST : "192.168.0.1",
                CONF_USERNAME : "alternativeAdminName",
                CONF_PASSWORD : "passwordTest",
                })}
    xiaomi.get_scanner(hass, config)
    assert xiaomi_mock.call_count == 1
    assert xiaomi_mock.call_args == call(config [DOMAIN])
    call_arg = xiaomi_mock.call_args [0] [0]
    assert call_arg ["username"] == "alternativeAdminName"
    assert call_arg ["password"] == "passwordTest"
    assert call_arg ["host"] == "192.168.0.1"
    assert call_arg ["platform"] == "device_tracker"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="201" endline="215">
async def test_invalid_credential(mock_get, mock_post, hass : HomeAssistant) -> None :
INDENT
    config = {
        DOMAIN : xiaomi.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : xiaomi.DOMAIN,
                CONF_HOST : "192.168.0.1",
                CONF_USERNAME : INVALID_USERNAME,
                CONF_PASSWORD : "passwordTest",
                })}
    assert get_scanner(hass, config) is None
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="218" endline="236">
async def test_valid_credential(mock_get, mock_post, hass : HomeAssistant) -> None :
INDENT
    config = {
        DOMAIN : xiaomi.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : xiaomi.DOMAIN,
                CONF_HOST : "192.168.0.1",
                CONF_USERNAME : "admin",
                CONF_PASSWORD : "passwordTest",
                })}
    scanner = get_scanner(hass, config)
    assert scanner is not None
    assert len(scanner.scan_devices()) == 2
    assert scanner.get_device_name("23:83:BF:F6:38:A0") == "Device1"
    assert scanner.get_device_name("1D:98:EC:5E:D5:A6") == "Device2"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/xiaomi/test_device_tracker.py" startline="239" endline="258">
async def test_token_timed_out(mock_get, mock_post, hass : HomeAssistant) -> None :
INDENT
    config = {
        DOMAIN : xiaomi.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : xiaomi.DOMAIN,
                CONF_HOST : "192.168.0.1",
                CONF_USERNAME : TOKEN_TIMEOUT_USERNAME,
                CONF_PASSWORD : "passwordTest",
                })}
    scanner = get_scanner(hass, config)
    assert scanner is not None
    assert len(scanner.scan_devices()) == 2
    assert scanner.get_device_name("23:83:BF:F6:38:A0") == "Device1"
    assert scanner.get_device_name("1D:98:EC:5E:D5:A6") == "Device2"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aranet/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/aranet/__init__.py" startline="12" endline="36">
def fake_service_info(name, service_uuid, manufacturer_data) :
INDENT
    return BluetoothServiceInfoBleak(
        name = name,
        address = "aa:bb:cc:dd:ee:ff",
        rssi = - 60,
        manufacturer_data = manufacturer_data,
        service_data = {},
        service_uuids = [service_uuid],
        source = "local",
        connectable = False,
        time = time(),
        device = generate_ble_device("aa:bb:cc:dd:ee:ff", name = name),
        advertisement = AdvertisementData(
            local_name = name,
            manufacturer_data = manufacturer_data,
            service_data = {},
            service_uuids = [service_uuid],
            rssi = - 60,
            tx_power = - 127,
            platform_data = (),
            ),
        )

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/motion_blinds/test_gateway.py" startline="13" endline="21">
async def test_device_name(hass : HomeAssistant) -> None :
INDENT
    blind = Mock()
    blind.blind_type = BlindType.RollerBlind.name
    blind.mac = TEST_BLIND_MAC
    assert device_name(blind) == "RollerBlind 0001"
    blind.device_type = DEVICE_TYPES_WIFI [0]
    assert device_name(blind) == "RollerBlind"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/tilt_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waqi/conftest.py" startline="15" endline="22">
def mock_setup_entry() -> Generator [AsyncMock, None, None] :
INDENT
    with patch(
        "homeassistant.components.waqi.async_setup_entry", return_value = True) as mock_setup_entry :
    INDENT
        yield mock_setup_entry

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/waqi/conftest.py" startline="24" endline="31">
def mock_config_entry() -> MockConfigEntry :
INDENT
    return MockConfigEntry(
        domain = DOMAIN,
        unique_id = "4584",
        title = "de Jongweg, Utrecht",
        data = {CONF_API_KEY : "asd", CONF_STATION_NUMBER : 4584},
        )
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/conversation/test_util.py" startline="6" endline="56">
def test_create_matcher() -> None :
INDENT
    pattern = create_matcher("Hello world")
    assert pattern.match("Hello world") is not None
    pattern = create_matcher("Hello {name}")
    match = pattern.match("hello world")
    assert match is not None
    assert match.groupdict() ["name"] == "world"
    no_match = pattern.match("Hello world, how are you?")
    assert no_match is None
    pattern = create_matcher("Turn on [the] {name}")
    match = pattern.match("turn on the kitchen lights")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
    match = pattern.match("turn on kitchen lights")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
    match = pattern.match("turn off kitchen lights")
    assert match is None
    pattern = create_matcher("Turn on [the] [a] {name}")
    match = pattern.match("turn on the kitchen lights")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
    match = pattern.match("turn on kitchen lights")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
    match = pattern.match("turn on a kitchen light")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen light"
    pattern = create_matcher("Turn {name}[s] on")
    match = pattern.match("turn kitchen lights on")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen light"
    pattern = create_matcher("Turn [the great] {name} on")
    match = pattern.match("turn the great kitchen lights on")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
    match = pattern.match("turn kitchen lights on")
    assert match is not None
    assert match.groupdict() ["name"] == "kitchen lights"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/google_assistant_sdk/test_helpers.py" startline="11" endline="17">
def test_default_language_codes(hass : HomeAssistant) -> None :
INDENT
    for language_code in SUPPORTED_LANGUAGE_CODES :
    INDENT
        lang = language_code.split("-", maxsplit = 1) [0]
        assert DEFAULT_LANGUAGE_CODES.get(lang)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/google_assistant_sdk/test_helpers.py" startline="18" endline="48">
def test_default_language_code(hass : HomeAssistant) -> None :
INDENT
    assert default_language_code(hass) == "en-US"
    hass.config.language = "en"
    hass.config.country = "US"
    assert default_language_code(hass) == "en-US"
    hass.config.language = "en"
    hass.config.country = "GB"
    assert default_language_code(hass) == "en-GB"
    hass.config.language = "en"
    hass.config.country = "ES"
    assert default_language_code(hass) == "en-US"
    hass.config.language = "es"
    hass.config.country = "ES"
    assert default_language_code(hass) == "es-ES"
    hass.config.language = "es"
    hass.config.country = "MX"
    assert default_language_code(hass) == "es-MX"
    hass.config.language = "es"
    hass.config.country = None
    assert default_language_code(hass) == "es-ES"
    hass.config.language = "el"
    hass.config.country = "GR"
    assert default_language_code(hass) == "en-US"
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mqtt/conftest.py" startline="13" endline="16">
def patch_hass_config(mock_hass_config : None) -> None :
INDENT
    """Patch configuration.yaml."""

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mqtt/conftest.py" startline="18" endline="22">
def temp_dir_prefix() -> str :
INDENT
    return "test"

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/mqtt/conftest.py" startline="24" endline="31">
def mock_temp_dir(temp_dir_prefix : str) -> Generator [None, None, str] :
INDENT
    with patch(
        "homeassistant.components.mqtt.util.TEMP_DIR_NAME",
        f"home-assistant-mqtt-{temp_dir_prefix}-{getrandbits(10):03x}",
        ) as mocked_temp_dir :
    INDENT
        yield mocked_temp_dir
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/ld2410_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="11" endline="15">
def cloud_devices_fixture() :
INDENT
    return json.loads(load_fixture("awair/cloud_devices.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="17" endline="21">
def local_devices_fixture() :
INDENT
    return json.loads(load_fixture("awair/local_devices.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="23" endline="27">
def gen1_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/awair.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="29" endline="33">
def gen2_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/awair-r2.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="35" endline="39">
def glow_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/glow.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="41" endline="45">
def mint_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/mint.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="47" endline="51">
def no_devicess_fixture() :
INDENT
    return json.loads(load_fixture("awair/no_devices.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="53" endline="57">
def awair_offline_fixture() :
INDENT
    return json.loads(load_fixture("awair/awair-offline.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="59" endline="63">
def omni_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/omni.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="65" endline="69">
def user_fixture() :
INDENT
    return json.loads(load_fixture("awair/user.json"))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/awair/conftest.py" startline="71" endline="73">
def local_data_fixture() :
INDENT
    return json.loads(load_fixture("awair/awair-local.json"))
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_sensor.py" startline="37" endline="96">
def test_sensor(hass : HomeAssistant) -> None :
INDENT
    hass_devices = []
    def add_entities(devices, action) :
    INDENT
        for device in devices :
        INDENT
            device.hass = hass
            hass_devices.append(device)
        DEDENT
    DEDENT
    for config in CONFIGS :
    INDENT
        vultr.setup_platform(hass, config, add_entities, None)
    DEDENT
    assert len(hass_devices) == 5
    tested = 0
    for device in hass_devices :
    INDENT
        if device.subscription == "576965" :
        INDENT
            assert device.name == vultr.DEFAULT_NAME
        DEDENT
        device.update()
        if (
            device.unit_of_measurement == UnitOfInformation.GIGABYTES) :
        INDENT
            if device.subscription == "576965" :
            INDENT
                assert device.name == "Vultr my new server Current Bandwidth Used"
                assert device.icon == "mdi:chart-histogram"
                assert device.state == 131.51
                assert device.icon == "mdi:chart-histogram"
                tested += 1
            DEDENT
            elif device.subscription == "123456" :
            INDENT
                assert device.name == "Server Current Bandwidth Used"
                assert device.state == 957.46
                tested += 1
            DEDENT
        DEDENT
        elif device.unit_of_measurement == "US$" :
        INDENT
            if device.subscription == "576965" :
            INDENT
                assert device.name == "Vultr my new server Pending Charges"
                assert device.icon == "mdi:currency-usd"
                assert device.state == 46.67
                assert device.icon == "mdi:currency-usd"
                tested += 1
            DEDENT
            elif device.subscription == "123456" :
            INDENT
                assert device.name == "Server Pending Charges"
                assert device.state == 3.72
                tested += 1
            DEDENT
            elif device.subscription == "555555" :
            INDENT
                assert device.name == "VPS Charges"
                assert device.state == 5.45
                tested += 1
            DEDENT
        DEDENT
    DEDENT
    assert tested == 5
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_sensor.py" startline="41" endline="46">
def add_entities(devices, action) :
INDENT
    for device in devices :
    INDENT
        device.hass = hass
        hass_devices.append(device)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_sensor.py" startline="97" endline="115">
def test_invalid_sensor_config() -> None :
INDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        vultr.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : base_vultr.DOMAIN,
                CONF_MONITORED_CONDITIONS : vultr.SENSOR_KEYS,
                })
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        vultr.PLATFORM_SCHEMA(
            {
                CONF_PLATFORM : base_vultr.DOMAIN,
                CONF_SUBSCRIPTION : "123456",
                CONF_MONITORED_CONDITIONS : ["non-existent-condition"],
                })

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_sensor.py" startline="117" endline="135">
def test_invalid_sensors(hass : HomeAssistant) -> None :
INDENT
    hass_devices = []
    def add_entities(devices, action) :
    INDENT
        for device in devices :
        INDENT
            device.hass = hass
            hass_devices.append(device)
        DEDENT
    DEDENT
    bad_conf = {
        CONF_NAME : "Vultr {} {}",
        CONF_SUBSCRIPTION : "",
        CONF_MONITORED_CONDITIONS : vultr.SENSOR_KEYS,
        }
    vultr.setup_platform(hass, bad_conf, add_entities, None)
    assert len(hass_devices) == 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_sensor.py" startline="121" endline="126">
def add_entities(devices, action) :
INDENT
    for device in devices :
    INDENT
        device.hass = hass
        hass_devices.append(device)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/conftest.py" startline="17" endline="29">
def valid_config(hass : HomeAssistant, requests_mock) :
INDENT
    requests_mock.get(
        "https://api.vultr.com/v1/account/info?api_key=ABCDEFG1234567",
        text = load_fixture("account_info.json", "vultr"),
        )
    with patch(
        "vultr.Vultr.server_list",
        return_value = json.loads(load_fixture("server_list.json", "vultr")),
        ) :
    INDENT
        vultr.setup(hass, VALID_CONFIG)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_binary_sensor.py" startline="28" endline="77">
def test_binary_sensor(hass : HomeAssistant) -> None :
INDENT
    hass_devices = []
    def add_entities(devices, action) :
    INDENT
        for device in devices :
        INDENT
            device.hass = hass
            hass_devices.append(device)

        DEDENT
    DEDENT
    for config in CONFIGS :
    INDENT
        vultr.setup_platform(hass, config, add_entities, None)
    DEDENT
    assert len(hass_devices) == 3
    for device in hass_devices :
    INDENT
        if device.subscription == "555555" :
        INDENT
            assert device.name == "Vultr {}"
        DEDENT
        device.update()
        device_attrs = device.extra_state_attributes
        if device.subscription == "555555" :
        INDENT
            assert device.name == "Vultr Another Server"
        DEDENT
        if device.name == "A Server" :
        INDENT
            assert device.is_on is True
            assert device.device_class == "power"
            assert device.state == "on"
            assert device.icon == "mdi:server"
            assert device_attrs [ATTR_ALLOWED_BANDWIDTH] == "1000"
            assert device_attrs [ATTR_AUTO_BACKUPS] == "yes"
            assert device_attrs [ATTR_IPV4_ADDRESS] == "123.123.123.123"
            assert device_attrs [ATTR_COST_PER_MONTH] == "10.05"
            assert device_attrs [ATTR_CREATED_AT] == "2013-12-19 14:45:41"
            assert device_attrs [ATTR_SUBSCRIPTION_ID] == "576965"
        DEDENT
        elif device.name == "Failed Server" :
        INDENT
            assert device.is_on is False
            assert device.state == "off"
            assert device.icon == "mdi:server-off"
            assert device_attrs [ATTR_ALLOWED_BANDWIDTH] == "1000"
            assert device_attrs [ATTR_AUTO_BACKUPS] == "no"
            assert device_attrs [ATTR_IPV4_ADDRESS] == "192.168.100.50"
            assert device_attrs [ATTR_COST_PER_MONTH] == "73.25"
            assert device_attrs [ATTR_CREATED_AT] == "2014-10-13 14:45:41"
            assert device_attrs [ATTR_SUBSCRIPTION_ID] == "123456"
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_binary_sensor.py" startline="32" endline="38">
def add_entities(devices, action) :
INDENT
    for device in devices :
    INDENT
        device.hass = hass
        hass_devices.append(device)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_binary_sensor.py" startline="78" endline="83">
def test_invalid_sensor_config() -> None :
INDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        vultr.PLATFORM_SCHEMA({CONF_PLATFORM : base_vultr.DOMAIN})

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_binary_sensor.py" startline="85" endline="104">
def test_invalid_sensors(hass : HomeAssistant) -> None :
INDENT
    hass_devices = []
    def add_entities(devices, action) :
    INDENT
        for device in devices :
        INDENT
            device.hass = hass
            hass_devices.append(device)
        DEDENT
    DEDENT
    bad_conf = {}
    vultr.setup_platform(hass, bad_conf, add_entities, None)
    bad_conf = {
        CONF_NAME : "Missing Server",
        CONF_SUBSCRIPTION : "555555",
        }
    vultr.setup_platform(hass, bad_conf, add_entities, None)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/vultr/test_binary_sensor.py" startline="89" endline="94">
def add_entities(devices, action) :
INDENT
    for device in devices :
    INDENT
        device.hass = hass
        hass_devices.append(device)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/improv_ble/conftest.py" startline="7" endline="8">
def mock_bluetooth(enable_bluetooth) :
INDENT
    """Auto mock bluetooth."""
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/laundrify/__init__.py" startline="12" endline="22">
def create_entry(
hass : HomeAssistant, access_token : str = VALID_ACCESS_TOKEN
) -> MockConfigEntry :
INDENT
    entry = MockConfigEntry(
        domain = DOMAIN,
        unique_id = VALID_ACCOUNT_ID,
        data = {CONF_ACCESS_TOKEN : access_token},
        )
    entry.add_to_hass(hass)
    return entry
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="34" endline="38">
def stream_teardown() :
INDENT
    frame_image_data.cache_clear()

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="39" endline="52">
def generate_audio_frame(pcm_mulaw = False) :
INDENT
    if pcm_mulaw :
    INDENT
        audio_frame = av.AudioFrame(format = "s16", layout = "mono", samples = 1)
        audio_bytes = b"\x00\x00"
    DEDENT
    else :
    INDENT
        audio_frame = av.AudioFrame(format = "dbl", layout = "mono", samples = 1024)
        audio_bytes = b"\x00\x00\x00\x00\x00\x00\x00\x00" * 1024
    DEDENT
    audio_frame.planes [0].update(audio_bytes)
    audio_frame.sample_rate = AUDIO_SAMPLE_RATE
    audio_frame.time_base = Fraction(1, AUDIO_SAMPLE_RATE)
    return audio_frame

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="54" endline="65">
def frame_image_data(frame_i, total_frames) :
INDENT
    img = np.empty((480, 320, 3))
    img [:, :, 0] = 0.5 + 0.5 * np.sin(2 * np.pi * (0 / 3 + frame_i / total_frames))
    img [:, :, 1] = 0.5 + 0.5 * np.sin(2 * np.pi * (1 / 3 + frame_i / total_frames))
    img [:, :, 2] = 0.5 + 0.5 * np.sin(2 * np.pi * (2 / 3 + frame_i / total_frames))
    img = np.round(255 * img).astype(np.uint8)
    img = np.clip(img, 0, 255)
    return img

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="66" endline="101">
def generate_video(encoder, container_format, duration) :
INDENT
    fps = 24
    total_frames = duration * fps
    output = io.BytesIO()
    output.name = "test.mov" if container_format == "mov" else "test.mp4"
    container = av.open(output, mode = "w", format = container_format)
    stream = container.add_stream(encoder, rate = fps)
    stream.width = 480
    stream.height = 320
    stream.pix_fmt = "yuv420p"
    stream.options.update({"g" : str(fps), "keyint_min" : str(fps)})
    for frame_i in range(total_frames) :
    INDENT
        img = frame_image_data(frame_i, total_frames)
        frame = av.VideoFrame.from_ndarray(img, format = "rgb24")
        for packet in stream.encode(frame) :
        INDENT
            container.mux(packet)

        DEDENT
    DEDENT
    for packet in stream.encode() :
    INDENT
        container.mux(packet)

    DEDENT
    container.close()
    output.seek(0)
    return output

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="102" endline="106">
def generate_h264_video(container_format = "mp4", duration = 5) :
INDENT
    return generate_video("libx264", container_format, duration)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="107" endline="111">
def generate_h265_video(container_format = "mp4", duration = 5) :
INDENT
    return generate_video("libx265", container_format, duration)

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="112" endline="160">
def remux_with_audio(source, container_format, audio_codec) :
INDENT
    av_source = av.open(source, mode = "r")
    output = io.BytesIO()
    output.name = "test.mov" if container_format == "mov" else "test.mp4"
    container = av.open(output, mode = "w", format = container_format)
    container.add_stream(template = av_source.streams.video [0])
    a_packet = None
    last_a_dts = - 1
    if audio_codec is not None :
    INDENT
        if audio_codec == "empty" :
        INDENT
            astream = container.add_stream("aac", AUDIO_SAMPLE_RATE)
        DEDENT
        else :
        INDENT
            astream = container.add_stream(audio_codec, AUDIO_SAMPLE_RATE)
            while not a_packet :
            INDENT
                a_packets = astream.encode(
                    generate_audio_frame(pcm_mulaw = audio_codec == "pcm_mulaw"))
                if a_packets :
                INDENT
                    a_packet = a_packets [0]

                DEDENT
            DEDENT
        DEDENT
    DEDENT
    for packet in av_source.demux(video = 0) :
    INDENT
        if not packet.dts :
        INDENT
            continue
        DEDENT
        container.mux(packet)
        if a_packet is not None :
        INDENT
            a_packet.pts = int(packet.dts * packet.time_base / a_packet.time_base)
            while (
                a_packet.pts * a_packet.time_base
                < (packet.dts + packet.duration) * packet.time_base) :
            INDENT
                a_packet.dts = a_packet.pts
                if (
                    a_packet.dts > last_a_dts) :
                INDENT
                    container.mux(a_packet)
                    last_a_dts = a_packet.dts
                DEDENT
                a_packet.pts += a_packet.duration

            DEDENT
        DEDENT
    DEDENT
    container.close()
    output.seek(0)
    return output

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="161" endline="175">
def assert_mp4_has_transform_matrix(mp4 : bytes, orientation : Orientation) :
INDENT
    moov_location = next(find_box(mp4, b"moov"))
    mvhd_location = next(find_box(mp4, b"trak", moov_location))
    tkhd_location = next(find_box(mp4, b"tkhd", mvhd_location))
    tkhd_length = int.from_bytes(
        mp4 [tkhd_location : tkhd_location + 4], byteorder = "big")
    assert (
        mp4 [tkhd_location + tkhd_length - 44 : tkhd_location + tkhd_length - 8]
        == TRANSFORM_MATRIX_TOP [orientation] + XYW_ROW)
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/stream/common.py" startline="176" endline="178">
def dynamic_stream_settings() :
INDENT
    return DynamicStreamSettings()
DEDENT
</source>
<source file="systems/Home Assistant/tests/components/counter/common.py" startline="20" endline="26">
def async_increment(hass, entity_id) :
INDENT
    hass.async_add_job(
        hass.services.async_call(DOMAIN, SERVICE_INCREMENT, {ATTR_ENTITY_ID : entity_id}))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/counter/common.py" startline="29" endline="35">
def async_decrement(hass, entity_id) :
INDENT
    hass.async_add_job(
        hass.services.async_call(DOMAIN, SERVICE_DECREMENT, {ATTR_ENTITY_ID : entity_id}))

DEDENT
</source>
<source file="systems/Home Assistant/tests/components/counter/common.py" startline="38" endline="42">
def async_reset(hass, entity_id) :
INDENT
    hass.async_add_job(
        hass.services.async_call(DOMAIN, SERVICE_RESET, {ATTR_ENTITY_ID : entity_id}))
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_version.py" startline="14" endline="25">
def integration() :
INDENT
    integration = Integration("")
    integration._manifest = {
        "domain" : "test",
        "documentation" : "https://example.com",
        "name" : "test",
        "codeowners" : ["@awesome"],
        }
    return integration

DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_version.py" startline="26" endline="33">
def test_validate_version_no_key(integration : Integration) -> None :
INDENT
    validate_version(integration)
    assert "No 'version' key in the manifest file." in [
        x.error for x in integration.errors
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_version.py" startline="34" endline="47">
def test_validate_custom_integration_manifest(integration : Integration) -> None :
INDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        integration.manifest ["version"] = "lorem_ipsum"
        CUSTOM_INTEGRATION_MANIFEST_SCHEMA(integration.manifest)
    DEDENT
    with pytest.raises(vol.Invalid) :
    INDENT
        integration.manifest ["version"] = None
        CUSTOM_INTEGRATION_MANIFEST_SCHEMA(integration.manifest)
    DEDENT
    integration.manifest ["version"] = "1"
    schema = CUSTOM_INTEGRATION_MANIFEST_SCHEMA(integration.manifest)
    assert schema ["version"] == "1"
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="12" endline="26">
def integration() :
INDENT
    integration = Integration(
        path = Path("homeassistant/components/test"),
        _manifest = {
            "domain" : "test",
            "documentation" : "https://example.com",
            "name" : "test",
            "codeowners" : ["@awesome"],
            "requirements" : [],
            },
        )
    return integration

DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="27" endline="36">
def test_validate_requirements_format_with_space(integration : Integration) -> None :
INDENT
    integration.manifest ["requirements"] = ["test_package == 1"]
    assert not validate_requirements_format(integration)
    assert len(integration.errors) == 1
    assert 'Requirement "test_package == 1" contains a space' in [
        x.error for x in integration.errors
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="37" endline="46">
def test_validate_requirements_format_wrongly_pinned(integration : Integration) -> None :
INDENT
    integration.manifest ["requirements"] = ["test_package>=1"]
    assert not validate_requirements_format(integration)
    assert len(integration.errors) == 1
    assert 'Requirement test_package>=1 need to be pinned "<pkg name>==<version>".' in [
        x.error for x in integration.errors
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="47" endline="64">
def test_validate_requirements_format_ignore_pin_for_custom(
integration : Integration,
) -> None :
INDENT
    integration.manifest ["requirements"] = [
        "test_package>=1",
        "test_package",
        "test_package>=1.2.3,<3.2.1",
        "test_package~=0.5.0",
        "test_package>=1.4.2,<1.4.99,>=1.7,<1.8.99",
        "test_package>=1.4.2,<1.9,!=1.5",
        "test_package>=1.4.2;python_version<'3.11'",
        ]
    integration.path = Path("")
    assert validate_requirements_format(integration)
    assert len(integration.errors) == 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="65" endline="74">
def test_validate_requirements_format_invalid_version(integration : Integration) -> None :
INDENT
    integration.manifest ["requirements"] = ["test_package==invalid"]
    assert not validate_requirements_format(integration)
    assert len(integration.errors) == 1
    assert "Unable to parse package version (invalid) for test_package." in [
        x.error for x in integration.errors
        ]
DEDENT
</source>
<source file="systems/Home Assistant/tests/hassfest/test_requirements.py" startline="75" endline="83">
def test_validate_requirements_format_successful(integration : Integration) -> None :
INDENT
    integration.manifest ["requirements"] = [
        "test_package==1.2.3",
        "test_package[async]==1.2.3",
        "test_package[async,encrypted]==1.2.3",
        ]
    assert validate_requirements_format(integration)
    assert len(integration.errors) == 0
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/test_jwt_wrapper.py" startline="9" endline="12">
async def test_reject_access_token_with_impossible_large_size() -> None :
INDENT
    with pytest.raises(jwt.DecodeError) :
    INDENT
        jwt_wrapper.unverified_hs256_token_decode("a" * 10000)
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="18" endline="24">
def test_entities_none() -> None :
INDENT
    policy = None
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="25" endline="32">
def test_entities_empty() -> None :
INDENT
    policy = {}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="33" endline="39">
def test_entities_false() -> None :
INDENT
    policy = False
    with pytest.raises(vol.Invalid) :
    INDENT
        ENTITY_POLICY_SCHEMA(policy)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="40" endline="47">
def test_entities_true() -> None :
INDENT
    policy = True
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="48" endline="55">
def test_entities_domains_true() -> None :
INDENT
    policy = {"domains" : True}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="56" endline="64">
def test_entities_domains_domain_true() -> None :
INDENT
    policy = {"domains" : {"light" : True}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("switch.kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="65" endline="71">
def test_entities_domains_domain_false() -> None :
INDENT
    policy = {"domains" : {"light" : False}}
    with pytest.raises(vol.Invalid) :
    INDENT
        ENTITY_POLICY_SCHEMA(policy)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="72" endline="79">
def test_entities_entity_ids_true() -> None :
INDENT
    policy = {"entity_ids" : True}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="80" endline="86">
def test_entities_entity_ids_false() -> None :
INDENT
    policy = {"entity_ids" : False}
    with pytest.raises(vol.Invalid) :
    INDENT
        ENTITY_POLICY_SCHEMA(policy)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="87" endline="95">
def test_entities_entity_ids_entity_id_true() -> None :
INDENT
    policy = {"entity_ids" : {"light.kitchen" : True}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("switch.kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="96" endline="102">
def test_entities_entity_ids_entity_id_false() -> None :
INDENT
    policy = {"entity_ids" : {"light.kitchen" : False}}
    with pytest.raises(vol.Invalid) :
    INDENT
        ENTITY_POLICY_SCHEMA(policy)

    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="103" endline="112">
def test_entities_control_only() -> None :
INDENT
    policy = {"entity_ids" : {"light.kitchen" : {"read" : True}}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("light.kitchen", "control") is False
    assert compiled("light.kitchen", "edit") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="113" endline="122">
def test_entities_read_control() -> None :
INDENT
    policy = {"domains" : {"light" : {"read" : True, "control" : True}}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("light.kitchen", "control") is True
    assert compiled("light.kitchen", "edit") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="123" endline="132">
def test_entities_all_allow() -> None :
INDENT
    policy = {"all" : True}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("light.kitchen", "control") is True
    assert compiled("switch.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="133" endline="142">
def test_entities_all_read() -> None :
INDENT
    policy = {"all" : {"read" : True}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
    assert compiled("light.kitchen", "control") is False
    assert compiled("switch.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="143" endline="153">
def test_entities_all_control() -> None :
INDENT
    policy = {"all" : {"control" : True}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is False
    assert compiled("light.kitchen", "control") is True
    assert compiled("switch.kitchen", "read") is False
    assert compiled("switch.kitchen", "control") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="154" endline="185">
def test_entities_device_id_boolean(hass : HomeAssistant) -> None :
INDENT
    entity_registry = mock_registry(
        hass,
        {
            "test_domain.allowed" : RegistryEntry(
                entity_id = "test_domain.allowed",
                unique_id = "1234",
                platform = "test_platform",
                device_id = "mock-allowed-dev-id",
                ),
            "test_domain.not_allowed" : RegistryEntry(
                entity_id = "test_domain.not_allowed",
                unique_id = "5678",
                platform = "test_platform",
                device_id = "mock-not-allowed-dev-id",
                ),
            },
        )
    device_registry = mock_device_registry(hass)
    policy = {"device_ids" : {"mock-allowed-dev-id" : {"read" : True}}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(
        policy, PermissionLookup(entity_registry, device_registry))
    assert compiled("test_domain.allowed", "read") is True
    assert compiled("test_domain.allowed", "control") is False
    assert compiled("test_domain.not_allowed", "read") is False
    assert compiled("test_domain.not_allowed", "control") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="186" endline="193">
def test_entities_areas_true() -> None :
INDENT
    policy = {"area_ids" : True}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(policy, None)
    assert compiled("light.kitchen", "read") is True
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_entities.py" startline="194" endline="219">
def test_entities_areas_area_true(hass : HomeAssistant) -> None :
INDENT
    entity_registry = mock_registry(
        hass,
        {
            "light.kitchen" : RegistryEntry(
                entity_id = "light.kitchen",
                unique_id = "1234",
                platform = "test_platform",
                device_id = "mock-dev-id",
                )},
        )
    device_registry = mock_device_registry(
        hass, {"mock-dev-id" : DeviceEntry(id = "mock-dev-id", area_id = "mock-area-id")})
    policy = {"area_ids" : {"mock-area-id" : {"read" : True, "control" : True}}}
    ENTITY_POLICY_SCHEMA(policy)
    compiled = compile_entities(
        policy, PermissionLookup(entity_registry, device_registry))
    assert compiled("light.kitchen", "read") is True
    assert compiled("light.kitchen", "control") is True
    assert compiled("light.kitchen", "edit") is False
    assert compiled("switch.kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_system_policies.py" startline="10" endline="20">
def test_admin_policy() -> None :
INDENT
    POLICY_SCHEMA(system_policies.ADMIN_POLICY)
    perms = PolicyPermissions(system_policies.ADMIN_POLICY, None)
    assert perms.check_entity("light.kitchen", "read")
    assert perms.check_entity("light.kitchen", "control")
    assert perms.check_entity("light.kitchen", "edit")
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_system_policies.py" startline="21" endline="31">
def test_user_policy() -> None :
INDENT
    POLICY_SCHEMA(system_policies.USER_POLICY)
    perms = PolicyPermissions(system_policies.USER_POLICY, None)
    assert perms.check_entity("light.kitchen", "read")
    assert perms.check_entity("light.kitchen", "control")
    assert perms.check_entity("light.kitchen", "edit")
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_system_policies.py" startline="32" endline="40">
def test_read_only_policy() -> None :
INDENT
    POLICY_SCHEMA(system_policies.READ_ONLY_POLICY)
    perms = PolicyPermissions(system_policies.READ_ONLY_POLICY, None)
    assert perms.check_entity("light.kitchen", "read")
    assert not perms.check_entity("light.kitchen", "control")
    assert not perms.check_entity("light.kitchen", "edit")
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_util.py" startline="6" endline="12">
def test_test_all() -> None :
INDENT
    for val in (None, {}, {"all" : None}, {"all" : {}}) :
    INDENT
        assert util.test_all(val, "read") is False
    DEDENT
    for val in (True, {"all" : True}, {"all" : {"read" : True}}) :
    INDENT
        assert util.test_all(val, "read") is True
    DEDENT
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_merge.py" startline="6" endline="18">
def test_merging_permissions_true_rules_dict() -> None :
INDENT
    policy1 = {
        "something_else" : True,
        "entities" : {"entity_ids" : {"light.kitchen" : True}},
        }
    policy2 = {"entities" : {"entity_ids" : True}}
    assert merge_policies([policy1, policy2]) == {
        "something_else" : True,
        "entities" : {"entity_ids" : True},
        }
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/permissions/test_merge.py" startline="19" endline="27">
def test_merging_permissions_multiple_subcategories() -> None :
INDENT
    policy1 = {"entities" : None}
    policy2 = {"entities" : {"entity_ids" : True}}
    policy3 = {"entities" : True}
    assert merge_policies([policy1, policy2]) == policy2
    assert merge_policies([policy1, policy3]) == policy3
    assert merge_policies([policy2, policy3]) == policy3
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/test_models.py" startline="6" endline="14">
def test_owner_fetching_owner_permissions() -> None :
INDENT
    group = models.Group(name = "Test Group", policy = {})
    owner = models.User(
        name = "Test User", perm_lookup = None, groups = [group], is_owner = True)
    assert owner.permissions is permissions.OwnerPermissions
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/test_models.py" startline="15" endline="31">
def test_permissions_merged() -> None :
INDENT
    group = models.Group(
        name = "Test Group", policy = {"entities" : {"domains" : {"switch" : True}}})
    group2 = models.Group(
        name = "Test Group", policy = {"entities" : {"entity_ids" : {"light.kitchen" : True}}})
    user = models.User(name = "Test User", perm_lookup = None, groups = [group, group2])
    assert user.permissions is user.permissions
    assert user.permissions.check_entity("switch.bla", "read") is True
    assert user.permissions.check_entity("light.kitchen", "read") is True
    assert user.permissions.check_entity("light.not_kitchen", "read") is False
DEDENT
</source>
<source file="systems/Home Assistant/tests/auth/test_models.py" startline="32" endline="63">
def test_cache_cleared_on_group_change() -> None :
INDENT
    group = models.Group(
        name = "Test Group", policy = {"entities" : {"domains" : {"switch" : True}}})
    admin_group = models.Group(
        name = "Admin group", id = models.GROUP_ID_ADMIN, policy = {"entities" : {}})
    user = models.User(
        name = "Test User", perm_lookup = None, groups = [group], is_active = True)
    assert user.permissions is user.permissions
    assert user.is_admin is user.is_admin
    assert user.is_active is True
    user.groups = []
    assert user.groups == []
    assert user.is_admin is False
    user.is_owner = True
    assert user.is_admin is True
    user.is_owner = False
    assert user.is_admin is False
    user.groups = [admin_group]
    assert user.is_admin is True
    user.is_active = False
    assert user.is_admin is False
DEDENT
</source>
