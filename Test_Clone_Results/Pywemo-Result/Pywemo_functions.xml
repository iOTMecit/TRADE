<source file="systems/Pywemo/tests/test_util.py" startline="10" endline="17">
def test_interface_addresses() :
INDENT
    addresses = util.interface_addresses()
    for address in addresses :
    INDENT
        assert address ! = "127.0.0.1"
        assert ":" not in address
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_util.py" startline="30" endline="39">
def test_signal_strength_to_dbm(test_input, expected) :
INDENT
    signal_strength = {"SignalStrength" : f"{test_input}"}
    assert util.signal_strength_to_dbm(signal_strength) == expected
    assert (
        util.signal_strength_to_dbm(signal_strength ["SignalStrength"])
        == expected)
DEDENT
</source>
<source file="systems/Pywemo/tests/test_util.py" startline="40" endline="76">
def test_meta_info() :
INDENT
    meta_info = {
        "MetaInfo" : "|".join(
            [
                "MAC_ADDRESS",
                "SERIAL_NUMBER",
                "Plugin Device",
                "WeMo_WW_2.00.11532.PVT-OWRT-Insight",
                "WeMo.Insight.684",
                "Insight",
                ])}
    expected = util.MetaInfo(
        mac = "MAC_ADDRESS",
        serial_number = "SERIAL_NUMBER",
        device_sku = "Plugin Device",
        firmware_version = "WeMo_WW_2.00.11532.PVT-OWRT-Insight",
        access_point_ssid = "WeMo.Insight.684",
        model_name = "Insight",
        )
    assert util.MetaInfo.from_meta_info(meta_info) == expected
    assert util.MetaInfo.from_meta_info(meta_info ["MetaInfo"]) == expected
    assert (
        util.MetaInfo.from_meta_info(meta_info ["MetaInfo"] + "|extra")
        == expected)
    with pytest.raises(ValueError) :
    INDENT
        util.MetaInfo.from_meta_info("")
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        util.MetaInfo.from_meta_info("\b")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_util.py" startline="77" endline="113">
def test_ext_meta_info() :
INDENT
    ext_meta_info = {
        "ExtMetaInfo" : "1|0|1|0|1579:8:42|4|1640081818|123456|1|Insight"}
    expected = util.ExtMetaInfo(
        current_client_state = 1,
        ice_running = 0,
        nat_initialized = 1,
        last_auth_value = 0,
        uptime = timedelta(hours = 1579, minutes = 8, seconds = 42),
        firmware_update_state = 4,
        utc_time = datetime(
            year = 2021, month = 12, day = 21, hour = 10, minute = 16, second = 58),
        home_id = "123456",
        remote_access_enabled = True,
        model_name = "Insight",
        )
    assert util.ExtMetaInfo.from_ext_meta_info(ext_meta_info) == expected
    assert (
        util.ExtMetaInfo.from_ext_meta_info(ext_meta_info ["ExtMetaInfo"])
        == expected)
    assert (
        util.ExtMetaInfo.from_ext_meta_info(
            ext_meta_info ["ExtMetaInfo"] + "|extra")
        == expected)
    with pytest.raises(ValueError) :
    INDENT
        util.ExtMetaInfo.from_ext_meta_info("")
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        util.ExtMetaInfo.from_ext_meta_info("\b")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="15" endline="20">
def device(vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11408.PVT-OWRT-Insight.yaml") :
    INDENT
        return Insight("http://192.168.1.100:49153/setup.xml")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="22" endline="26">
def bridge(vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11057.PVT-OWRT-Link.yaml") :
    INDENT
        return Bridge("http://192.168.1.100:49153/setup.xml")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="28" endline="32">
def light_switch(vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11408.PVT-OWRT-LS") :
    INDENT
        return LightSwitch("http://192.168.1.100:49153/setup.xml")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="37" endline="45">
def outer(self) :
INDENT
    obj = mock.create_autospec(
        subscribe.SubscriptionRegistry, instance = True)
    obj._subscriptions = {}
    obj._subscription_paths = {}
    return obj
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="47" endline="73">
def http_server(self, outer) :
INDENT
    server = HTTPServer(("localhost", 0), subscribe.RequestHandler)
    server.outer = outer
    exception = None
    def run_server() :
    INDENT
        try :
        INDENT
            server.serve_forever(poll_interval = 0.1)
        DEDENT
        except Exception as exp :
        INDENT
            nonlocal exception
            exception = exp
            raise
        DEDENT
    DEDENT
    thread = threading.Thread(target = run_server, name = "Server Thread")
    try :
    INDENT
        thread.start()
        yield server
    DEDENT
    finally :
    INDENT
        server.shutdown()
        thread.join()
        server.server_close()

        if exception is not None :
        INDENT
            raise exception
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="53" endline="60">
def run_server() :
INDENT
    try :
    INDENT
        server.serve_forever(poll_interval = 0.1)
    DEDENT
    except Exception as exp :
    INDENT
        nonlocal exception
        exception = exp
        raise
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="75" endline="78">
def server_address(self, http_server) :
INDENT
    return http_server.server_address [0]
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="80" endline="84">
def server_url(self, http_server) :
INDENT
    host, port = http_server.server_address
    return f"http://{host}:{port}"
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="86" endline="89">
def mock_light_switch(self) :
INDENT
    return mock.create_autospec(LightSwitch, instance = True)
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="90" endline="95">
def test_NOTIFY_unknown_device(self, server_url) :
INDENT
    response = requests.request("NOTIFY", f"{server_url}")
    assert response.status_code == 200
    assert response.content == subscribe.RESPONSE_SUCCESS.encode("UTF-8")
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="96" endline="123">
def test_NOTIFY_known_device(
self, outer, server_address, server_url, mock_light_switch
) :
INDENT
    mock_light_switch.host = server_address
    subscription = mock.create_autospec(
        subscribe.Subscription, instance = True)
    subscription.device = mock_light_switch
    outer._subscription_paths ["/path"] = subscription
    response = requests.request(
        "NOTIFY",
        f"{server_url}/path",
        data = """<e:propertyset xmlns:e="urn:schemas-upnp-org:event-1-0">
<e:property>
<BinaryState>0</BinaryState>
</e:property>
</e:propertyset>""",
        )
    assert response.status_code == 200
    assert response.content == subscribe.RESPONSE_SUCCESS.encode("UTF-8")
    outer.event.assert_called_once_with(
        mock_light_switch,
        subscribe.EVENT_TYPE_BINARY_STATE,
        "0",
        path = "/path",
        )
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="124" endline="129">
def test_GET_setup_xml(self, server_url) :
INDENT
    xml = requests.get(f"{server_url}/setup.xml")
    assert xml.status_code == 200
    assert xml.content == subscribe.VIRTUAL_SETUP_XML.encode("UTF-8")
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="130" endline="134">
def test_GET_default_404(self, server_url) :
INDENT
    response = requests.get(f"{server_url}/")
    assert response.status_code == 404
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="135" endline="142">
def test_POST_unknown_device(self, server_url) :
INDENT
    response = requests.post(f"{server_url}/upnp/control/basicevent1")
    assert response.status_code == 200
    assert response.content == subscribe.ERROR_SOAP_ACTION_RESPONSE.encode(
        "UTF-8")
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="143" endline="171">
def test_POST_known_device(
self, outer, server_address, server_url, mock_light_switch
) :
INDENT
    mock_light_switch.host = server_address
    outer._subscriptions [mock_light_switch] = []
    action = '"urn:Belkin:service:basicevent:1#SetBinaryState"'
    response = requests.post(
        f"{server_url}/upnp/control/basicevent1",
        headers = {"SOAPACTION" : action},
        data = """<?xml version="1.0" encoding="utf-8"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
<s:Body>
<u:SetBinaryState xmlns:u="urn:Belkin:service:basicevent:1">
<BinaryState>0</BinaryState>
</u:SetBinaryState>
</s:Body>
</s:Envelope>""",
        )
    assert response.status_code == 200
    assert response.content == subscribe.SOAP_ACTION_RESPONSE [
        action].encode("UTF-8")
    assert response.headers ["Content-Type"] == 'text/xml; charset="utf-8"'
    assert "UPnP/1.0" in response.headers ["Server"]
    outer.event.assert_called_once_with(
        mock_light_switch, subscribe.EVENT_TYPE_LONG_PRESS, "0")
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="172" endline="176">
def test_POST_default_404(self, server_url) :
INDENT
    response = requests.post(f"{server_url}/")
    assert response.status_code == 404
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="177" endline="186">
def test_POST_from_pywemo(self, server_url, light_switch) :
INDENT
    light_switch.session.url = server_url
    assert light_switch.get_state(True) == 0
    light_switch.on()
    assert light_switch.get_state() == 1
    assert light_switch.get_state(True) == 0
    with pytest.raises(exceptions.SOAPFault) :
    INDENT
        light_switch.basicevent.GetFriendlyName()
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="187" endline="200">
def test_SUBSCRIBE_state(self, server_url) :
INDENT
    response = requests.request(
        "SUBSCRIBE", f"{server_url}/upnp/event/basicevent1")
    assert response.status_code == 200
    assert response.content == b""
    assert response.headers ["CONTENT-LENGTH"] == "0"
    assert response.headers ["TIMEOUT"] == "Second-1801"
    assert (
        response.headers ["SID"]
        == "uuid:a74b23d5-34b9-4f71-9f87-bed24353f304")
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="201" endline="205">
def test_SUBSCRIBE_default_404(self, server_url) :
INDENT
    response = requests.request("SUBSCRIBE", f"{server_url}/")
    assert response.status_code == 404
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="206" endline="214">
def test_UNSUBSCRIBE_state(self, server_url) :
INDENT
    response = requests.request(
        "UNSUBSCRIBE", f"{server_url}/upnp/event/basicevent1")
    assert response.status_code == 200
    assert response.content == b""
    assert response.headers ["CONTENT-LENGTH"] == "0"
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="215" endline="219">
def test_UNSUBSCRIBE_default_404(self, server_url) :
INDENT
    response = requests.request("UNSUBSCRIBE", f"{server_url}/")
    assert response.status_code == 404
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="220" endline="232">
def test_SUBSCRIBE_and_UNSUBSCRIBE_from_subscription(
self, server_url, light_switch, http_server
) :
INDENT
    light_switch.session.url = server_url
    subscription = subscribe.Subscription(
        light_switch, http_server.server_address [0], "basicevent")
    subscription.default_timeout_seconds = 3600
    assert subscription.maintain() == 1801
    subscription._unsubscribe()

DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="239" endline="245">
def get_callback_address(self) :
INDENT
    with mock.patch(
        "pywemo.subscribe.get_callback_address") as mock_ip_address :
    INDENT
        mock_ip_address.return_value = f"192.168.1.1:{self.http_port}"
        yield mock_ip_address
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="249" endline="255">
def subscription(self, request, device, bridge) :
INDENT
    if request.param == "bridge" :
    INDENT
        return subscribe.Subscription(
            bridge, self.http_port, request.param)
    DEDENT
    return subscribe.Subscription(device, self.http_port, request.param)
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="256" endline="259">
def test_url(self, subscription) :
INDENT
    base_url = "http://192.168.1.100:49153/upnp/event"
    assert subscription.url == f"{base_url}/{subscription.service_name}1"
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="261" endline="346">
def test_maintain(self, mock_request, subscription) :
INDENT
    mock_response = mock.create_autospec(requests.Response, instance = True)
    mock_response.headers = {"SID" : "uuid:123", "TIMEOUT" : "Second-222"}
    mock_response.status_code = requests.codes.ok
    mock_request.return_value = mock_response
    assert subscription.maintain() == 222
    assert subscription.subscription_id == "uuid:123"
    assert subscription.expiration_time == pytest.approx(
        time.time() + 222, abs = 2)
    mock_request.assert_called_once_with(
        method = "SUBSCRIBE",
        url = subscription.url,
        headers = {
            "CALLBACK" : f"<http://192.168.1.1:8989{subscription.path}>",
            "NT" : "upnp:event",
            "TIMEOUT" : "Second-300",
            },
        timeout = subscribe.REQUESTS_TIMEOUT,
        )

    mock_request.reset_mock()
    mock_response.headers = {"SID" : "uuid:321", "TIMEOUT" : "Second-765"}
    mock_response.status_code = requests.codes.ok
    mock_request.return_value = mock_response
    assert subscription.maintain() == 300
    assert subscription.subscription_id == "uuid:321"
    assert subscription.expiration_time == pytest.approx(
        time.time() + 300, abs = 2)
    mock_request.assert_called_once_with(
        method = "SUBSCRIBE",
        url = subscription.url,
        headers = {"SID" : "uuid:123", "TIMEOUT" : "Second-300"},
        timeout = subscribe.REQUESTS_TIMEOUT,
        )

    mock_request.reset_mock()
    mock_request.side_effect = requests.ReadTimeout
    with pytest.raises(requests.ReadTimeout) :
    INDENT
        subscription.maintain()
    DEDENT
    assert subscription.subscription_id == "uuid:321"
    mock_request.reset_mock(side_effect = True)
    mock_response = mock.Mock()
    mock_response.headers = {"SID" : "uuid:222", "TIMEOUT" : "Second-333"}
    type(mock_response).status_code = mock.PropertyMock(
        side_effect = [412, requests.codes.ok, requests.codes.ok])
    mock_request.return_value = mock_response
    assert subscription.maintain() == 300
    assert subscription.subscription_id == "uuid:222"
    assert subscription.expiration_time == pytest.approx(
        time.time() + 300, abs = 2)
    mock_request.assert_any_call(
        method = "SUBSCRIBE",
        url = subscription.url,
        headers = {"SID" : "uuid:321", "TIMEOUT" : "Second-300"},
        timeout = subscribe.REQUESTS_TIMEOUT,
        )
    mock_request.assert_any_call(
        method = "UNSUBSCRIBE",
        url = subscription.url,
        headers = {"SID" : "uuid:321"},
        timeout = subscribe.REQUESTS_TIMEOUT,
        )
    mock_request.assert_called_with(
        method = "SUBSCRIBE",
        url = subscription.url,
        headers = {
            "CALLBACK" : f"<http://192.168.1.1:8989{subscription.path}>",
            "NT" : "upnp:event",
            "TIMEOUT" : "Second-300",
            },
        timeout = subscribe.REQUESTS_TIMEOUT,
        )
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="348" endline="351">
def test_maintain_requests_exception(self, mock_request, subscription) :
INDENT
    with pytest.raises(requests.ReadTimeout) :
    INDENT
        subscription.maintain()
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="353" endline="356">
def test_maintain_bad_status_code(self, subscription) :
INDENT
    with pytest.raises(requests.HTTPError) :
    INDENT
        subscription.maintain()
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="358" endline="372">
def test_unsubscribe(self, mock_request, subscription) :
INDENT
    subscription.subscription_id = "uuid:321"
    subscription._unsubscribe()
    mock_request.assert_called_once_with(
        method = "UNSUBSCRIBE",
        url = subscription.url,
        headers = {"SID" : "uuid:321"},
        timeout = subscribe.REQUESTS_TIMEOUT,
        )
    assert subscription.subscription_id is None
    mock_request.reset_mock()
    subscription._unsubscribe()
    mock_request.assert_not_called()
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="373" endline="392">
def test_update_subscription(self, subscription) :
INDENT
    subscription._update_subscription({})
    assert subscription.subscription_id is None
    assert subscription.expiration_time == pytest.approx(
        time.time() + 300, abs = 2)
    subscription._update_subscription({"SID" : "uuid:123"})
    assert subscription.subscription_id == "uuid:123"
    assert subscription.expiration_time == pytest.approx(
        time.time() + 300, abs = 2)
    subscription._update_subscription({"TIMEOUT" : "Second-200"})
    assert subscription.subscription_id == "uuid:123"
    assert subscription.expiration_time == pytest.approx(
        time.time() + 200, abs = 2)
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="396" endline="402">
def _wait_for_registry(self, subscription_registry) :
INDENT
    ready = threading.Event()
    subscription_registry._sched.enter(0, 100, ready.set)
    ready.wait()
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="404" endline="435">
def test_register_unregister(self, device, subscription_registry) :
INDENT
    subscription_registry.register(device)
    self._wait_for_registry(subscription_registry)
    basic = subscription_registry._sched.queue [0]
    assert basic.time == pytest.approx(time.time() + 225, abs = 2)
    assert basic.action == subscription_registry._resubscribe
    insight = subscription_registry._sched.queue [1]
    assert insight.time == pytest.approx(time.time() + 225, abs = 2)
    assert insight.action == subscription_registry._resubscribe
    device._state = 1
    assert subscription_registry.is_subscribed(device) is False
    paths = list(subscription_registry._subscription_paths)
    assert len(paths) == 2
    subscription_registry.event(device, "", "", path = paths [0])
    assert subscription_registry.is_subscribed(device) is False
    subscription_registry.event(device, "", "", path = paths [1])
    assert subscription_registry.is_subscribed(device) is True
    device._state = 0
    assert subscription_registry.is_subscribed(device) is False
    subscription_registry.event(device, "", "", path = "invalid_path")
    assert device in subscription_registry._subscriptions
    subscription_registry.unregister(device)
    self._wait_for_registry(subscription_registry)
    assert len(subscription_registry._sched.queue) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="439" endline="474">
def test_subscribe_read_timeout_and_reconnect(
self, mock_request, device, subscription_registry
) :
INDENT
    subscription_registry.register(device)
    self._wait_for_registry(subscription_registry)
    basic = subscription_registry._sched.queue [0]
    assert basic.time == pytest.approx(
        time.time() + subscribe.SUBSCRIPTION_RETRY, abs = 2)
    assert basic.action == subscription_registry._resubscribe
    subscription_registry._sched.cancel(basic)
    with mock.patch.object(device, "reconnect_with_device") as reconnect :
    INDENT
        def change_url() :
        INDENT
            device.session.url = "http://192.168.1.100:1234/"
        DEDENT
        reconnect.side_effect = change_url
        basic.action(* basic.argument, ** basic.kwargs)

        basic = subscription_registry._sched.queue [- 1]
        subscription_registry._sched.cancel(basic)
        basic.action(* basic.argument, ** basic.kwargs)
    DEDENT
    mock_request.assert_called_with(
        method = "SUBSCRIBE",
        url = "http://192.168.1.100:1234/upnp/event/basicevent1",
        headers = mock.ANY,
        timeout = 10,
        )
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="456" endline="458">
def change_url() :
INDENT
    device.session.url = "http://192.168.1.100:1234/"
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="475" endline="487">
def test_start_stop(self) :
INDENT
    registry = subscribe.SubscriptionRegistry(requested_port = 0)
    registry.start()
    port = registry.port
    try :
    INDENT
        response = requests.request("NOTIFY", f"http://127.0.0.1:{port}/")
        assert response.status_code == 200
    DEDENT
    finally :
    INDENT
        registry.stop()
    DEDENT
    with pytest.raises(requests.ConnectionError) :
    INDENT
        requests.request("NOTIFY", f"http://127.0.0.1:{port}/", timeout = 5)
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_subscribe.py" startline="488" endline="491">
def test_deprecations(self) :
INDENT
    registry = subscribe.SubscriptionRegistry(requested_port = 0)
    with pytest.deprecated_call() :
    INDENT
        registry.devices
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/atheris_stub.py" startline="13" endline="14">
def instrument_imports() :
INDENT
    yield
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="13" endline="17">
def bridge(vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11057.PVT-OWRT-Link.yaml") :
    INDENT
        return Bridge("http://192.168.1.100:49153/setup.xml")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="19" endline="24">
def light(bridge) :
INDENT
    assert LIGHT_ID in bridge.lights
    light = bridge.lights [LIGHT_ID]
    return light

DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="26" endline="31">
def group(bridge) :
INDENT
    assert GROUP_ID in bridge.groups
    group = bridge.groups [GROUP_ID]
    return group

DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="33" endline="38">
def test_light_turn_on(light) :
INDENT
    light.turn_on(level = 120)
    assert light.get_state(force_update = True) ["onoff"] == 1
    assert light.get_state() ["level"] == 120
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="40" endline="44">
def test_light_turn_off(light) :
INDENT
    light.turn_off()
    assert light.get_state(force_update = True) ["onoff"] == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="46" endline="52">
def test_light_color_fade(light) :
INDENT
    light.set_color((0.701, 0.299), 5, False)
    color_xy = light.get_state(force_update = True) ["color_xy"]
    assert color_xy == pytest.approx((0.701, 0.299), rel = 1e-3)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="54" endline="58">
def test_light_color_temperature(light) :
INDENT
    light.set_temperature(kelvin = 5000)
    assert light.get_state(force_update = True) ["temperature_kelvin"] == 5000
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="60" endline="64">
def test_light_start_ramp(light) :
INDENT
    light.start_ramp("1", 100)
    light.get_state(force_update = True)

DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="66" endline="70">
def test_group_turn_on(group) :
INDENT
    group.turn_on()
    assert group.get_state(force_update = True) ["onoff"] == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="72" endline="76">
def test_group_turn_off(group) :
INDENT
    group.turn_off()
    assert group.get_state(force_update = True) ["onoff"] == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="78" endline="83">
def test_group_toggle(group) :
INDENT
    orig_onoff = group.get_state() ["onoff"]
    group.toggle()
    assert group.get_state(force_update = True) ["onoff"] ! = orig_onoff
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="85" endline="104">
def test_bridge_getdevicestatus(bridge) :
INDENT
    status = bridge.bridge_getdevicestatus(LIGHT_ID)
    expected = b"".join(
        [
            b"<DeviceStatus>",
            b"<IsGroupAction>NO</IsGroupAction>",
            b'<DeviceID available="YES">F0D1B8000001420C</DeviceID>',
            b"<CapabilityID>",
            b"10006,10008,10300,30008,30009,3000A,30301",
            b"</CapabilityID>",
            b"<CapabilityValue>",
            b"0,120:0,45940:19594:50,,,,200:0",
            b"</CapabilityValue>",
            b"<LastEventTimeStamp>0</LastEventTimeStamp>",
            b"</DeviceStatus>",
            ])
    assert et.tostring(status) == expected
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="106" endline="111">
def test_bridge_unavailable_light(bridge, light) :
INDENT
    assert light.get_state() ["available"] is True
    bridge.bridge_update(force_update = True)
    assert light.get_state() ["available"] is False
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="324" endline="330">
def test_subscription_update(update, expected_updated, expected_state, bridge) :
INDENT
    updated = bridge.subscription_update("StatusChange", update)
    assert updated == expected_updated
    if updated :
    INDENT
        assert bridge.lights [LIGHT_ID].get_state() == expected_state
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_bridge.py" startline="331" endline="335">
def test_deprecation_warnings(bridge) :
INDENT
    with pytest.deprecated_call() :
    INDENT
        assert isinstance(bridge.Lights, dict)
    DEDENT
    with pytest.deprecated_call() :
    INDENT
        assert isinstance(bridge.Groups, dict)
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="23" endline="27">
def temp_file_name() :
INDENT
    with tempfile.TemporaryDirectory(prefix = "wemorules_") as temp_dir :
    INDENT
        yield os.path.join(temp_dir, "rules.db")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="29" endline="38">
def sqldb(temp_file_name) :
INDENT
    rules_db._create_empty_db(temp_file_name)
    try :
    INDENT
        conn = sqlite3.connect(temp_file_name)
        conn.row_factory = sqlite3.Row
        yield conn
    DEDENT
    finally :
    INDENT
        conn.close()

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="39" endline="59">
def test_create_empty_db(sqldb) :
INDENT
    statements = set(
        line for line in sqldb.iterdump() if line.startswith("CREATE TABLE")
        )
    assert statements == set(
        [
            "CREATE TABLE RULES(RuleID PRIMARY KEY, Name TEXT NOT NULL, Type TEXT NOT NULL, RuleOrder INTEGER, StartDate TEXT, EndDate TEXT, State TEXT, Sync INTEGER);",
            "CREATE TABLE RULEDEVICES(RuleDevicePK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, DeviceID TEXT, GroupID INTEGER, DayID INTEGER, StartTime INTEGER, RuleDuration INTEGER, StartAction REAL, EndAction REAL, SensorDuration INTEGER, Type INTEGER, Value INTEGER, Level INTEGER, ZBCapabilityStart TEXT, ZBCapabilityEnd TEXT, OnModeOffset INTEGER, OffModeOffset INTEGER, CountdownTime INTEGER, EndTime INTEGER);",
            "CREATE TABLE DEVICECOMBINATION(DeviceCombinationPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, SensorID TEXT, SensorGroupID INTEGER, DeviceID TEXT, DeviceGroupID INTEGER);",
            "CREATE TABLE GROUPDEVICES(GroupDevicePK INTEGER PRIMARY KEY AUTOINCREMENT, GroupID INTEGER, DeviceID TEXT);",
            "CREATE TABLE LOCATIONINFO(LocationPk INTEGER PRIMARY KEY AUTOINCREMENT, cityName TEXT, countryName TEXT, latitude TEXT, longitude TEXT, countryCode TEXT, region TEXT);",
            "CREATE TABLE BLOCKEDRULES(Primarykey INTEGER PRIMARY KEY AUTOINCREMENT, ruleId TEXT);",
            "CREATE TABLE RULESNOTIFYMESSAGE(RuleID INTEGER PRIMARY KEY AUTOINCREMENT, NotifyRuleID INTEGER, Message TEXT, Frequency INTEGER);",
            "CREATE TABLE SENSORNOTIFICATION(SensorNotificationPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, NotifyRuleID INTEGER, NotificationMessage TEXT, NotificationDuration INTEGER);",
            "CREATE TABLE TARGETDEVICES(TargetDevicesPK INTEGER PRIMARY KEY AUTOINCREMENT, RuleID INTEGER, DeviceID TEXT, DeviceIndex INTEGER);",
            ])
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="60" endline="80">
def test_pack_unpack_db(temp_file_name, sqldb) :
INDENT
    orig_statements = set(
        line for line in sqldb.iterdump() if line.startswith("CREATE TABLE")
        )
    sqldb.close()
    packed = rules_db._pack_db(temp_file_name, "inner.db")
    inner_name = rules_db._unpack_db(base64.b64decode(packed), temp_file_name)
    assert inner_name == "inner.db"
    conn = sqlite3.connect(temp_file_name)
    try :
    INDENT
        unpacked_statements = set(
            line for line in conn.iterdump() if line.startswith("CREATE TABLE")
            )
    DEDENT
    finally :
    INDENT
        conn.close()
    DEDENT
    assert orig_statements == unpacked_statements
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="81" endline="91">
def test_auto_primary_key(sqldb) :
INDENT
    cursor = sqldb.cursor()
    row1 = rules_db.TargetDevicesRow(RuleID = 12)
    row2 = rules_db.TargetDevicesRow(RuleID = 34)
    row1.update_db(cursor)
    row2.update_db(cursor)
    assert row1.TargetDevicesPK + 1 == row2.TargetDevicesPK
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="92" endline="127">
def test_add_remove(sqldb) :
INDENT
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)

    assert len(db._rules) == 0
    rule = db.add_rule(
        rules_db.RulesRow(
            RuleID = 501,
            Name = "Long Press Rule",
            Type = MOCK_RULE_TYPE,
            State = 1,
            ))
    assert len(db._rules) == 1
    db.remove_rule(rule)
    assert len(db._rules) == 0
    assert len(db._rule_devices) == 0
    device = db.add_rule_devices(
        rules_db.RuleDevicesRow(RuleDevicePK = 1, RuleID = 501, DeviceID = MOCK_UDN))
    assert len(db._rule_devices) == 1
    db.remove_rule_devices(device)
    assert len(db._rule_devices) == 0
    assert len(db._target_devices) == 0
    target = db.add_target_devices(
        rules_db.TargetDevicesRow(RuleID = 501, DeviceID = MOCK_TARGET_UDN))
    assert len(db._target_devices) == 1
    db.remove_target_devices(target)
    assert len(db._target_devices) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="128" endline="159">
def test_clear_all(sqldb) :
INDENT
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    rule = db.add_rule(
        rules_db.RulesRow(
            RuleID = 501,
            Name = "Long Press Rule",
            Type = MOCK_RULE_TYPE,
            State = 1,
            ))
    assert len(db._rules) == 1
    assert len(db._rule_devices) == 0
    device = db.add_rule_devices(
        rules_db.RuleDevicesRow(RuleDevicePK = 1, RuleID = 501, DeviceID = MOCK_UDN))
    assert len(db._rule_devices) == 1
    assert len(db._target_devices) == 0
    target = db.add_target_devices(
        rules_db.TargetDevicesRow(RuleID = 501, DeviceID = MOCK_TARGET_UDN))
    assert len(db._target_devices) == 1
    db.clear_all()
    assert len(db._rules) == 0
    assert len(db._rule_devices) == 0
    assert len(db._target_devices) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="160" endline="181">
def test_update_if_modified_field_changed(sqldb) :
INDENT
    cursor = sqldb.cursor()
    rules_db.RulesRow(
        RuleID = 501,
        Name = "Long Press Rule",
        Type = MOCK_RULE_TYPE,
        State = 1,
        ).update_db(cursor)
    rules_db.RuleDevicesRow(
        RuleDevicePK = 1, RuleID = 501, DeviceID = MOCK_UDN).update_db(cursor)
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    rule, device = db.rules_for_device() [0]
    assert db.update_if_modified() is False
    rule.State = 0
    assert db.update_if_modified() is True
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="182" endline="191">
def test_update_if_modified_new_entry(sqldb) :
INDENT
    rule = rules_db.RulesRow(RuleID = 501)
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    assert db.update_if_modified() is False
    db.add_target_device_to_rule(rule, MOCK_TARGET_UDN)
    assert db.update_if_modified() is True
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="192" endline="203">
def test_add_remove_target_device_to_rule(sqldb) :
INDENT
    rule = rules_db.RulesRow(RuleID = 501)
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    assert MOCK_TARGET_UDN not in db.get_target_devices_for_rule(rule)
    db.add_target_device_to_rule(rule, MOCK_TARGET_UDN)
    assert MOCK_TARGET_UDN in db.get_target_devices_for_rule(rule)
    db.remove_target_device_from_rule(rule, MOCK_TARGET_UDN)
    assert MOCK_TARGET_UDN not in db.get_target_devices_for_rule(rule)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="204" endline="215">
def test_get_target_devices_for_rule(sqldb) :
INDENT
    cursor = sqldb.cursor()
    rule = rules_db.RulesRow(RuleID = 501)
    rules_db.TargetDevicesRow(
        RuleID = rule.RuleID,
        DeviceID = MOCK_TARGET_UDN,
        ).update_db(cursor)
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    assert db.get_target_devices_for_rule(rule) == frozenset([MOCK_TARGET_UDN])
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="216" endline="231">
def test_entry_with_no_primary_key(sqldb) :
INDENT
    sqldb.cursor().execute("DROP TABLE RULEDEVICES")
    sqldb.cursor().execute(
        """CREATE TABLE RULEDEVICES (RuleDevicePK UNIQUE, RuleID INTEGER, DeviceID, GroupID, DayID INTEGER, StartTime,RuleDuration, StartAction INTEGER, EndAction INTEGER, SensorDuration,Type,Value,Level,ZBCapabilityStart TEXT DEFAULT "", ZBCapabilityEnd TEXT  DEFAULT "", OnModeOffset INTEGER  DEFAULT 0,OffModeOffset INTEGER DEFAULT 0,CountdownTime INTEGER DEFAULT 0,EndTime INTEGER DEFAULT 0, ProductName TEXT  DEFAULT "")""")
    sqldb.cursor().execute(
        "INSERT INTO RULEDEVICES VALUES(NULL,22,'uuid:Lightswitch-1_0','0',1,'60','86280',0,0,'0','-1','-1','-1','-1','-1',0,0,1800,86340,'')")
    db = rules_db.RulesDb(sqldb, MOCK_UDN, MOCK_NAME)
    assert len(db.rule_devices) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="232" endline="276">
def test_rules_db_from_device(temp_file_name, sqldb) :
INDENT
    rules_db.RulesRow(RuleID = 501, Name = "", Type = "").update_db(sqldb.cursor())
    sqldb.commit()
    sqldb.close()
    zip_content = base64.b64decode(
        rules_db._pack_db(temp_file_name, "inner.db"))
    mock_response = create_autospec(urllib3.HTTPResponse, instance = True)
    mock_response.status = 200
    mock_response.data = zip_content
    store_rules = []
    class Device :
    INDENT
        name = MOCK_NAME
        udn = MOCK_UDN
        session = Session("http://localhost/")
        class rules :
        INDENT
            @ staticmethod
            def FetchRules() :
            INDENT
                return {
                    "ruleDbVersion" : "1",
                    "ruleDbPath" : "http://localhost/rules.db",
                    }
            DEDENT
            @ staticmethod
            def StoreRules(** kwargs) :
            INDENT
                store_rules.append(kwargs)
            DEDENT
        DEDENT
    DEDENT
    with patch(
        "urllib3.PoolManager.request", return_value = mock_response) as mock_request :
    INDENT
        with rules_db.rules_db_from_device(Device) as db :
        INDENT
            mock_request.assert_called_once_with(
                method = "GET", url = "http://localhost/rules.db")
            assert len(db._rules) == 1
            db._rules [501].State = 1
        DEDENT
    DEDENT
    assert len(store_rules) == 1
    assert store_rules [0] ["ruleDbVersion"] == 2
    assert len(store_rules [0] ["ruleDbBody"]) > 1000
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="251" endline="256">
def FetchRules() :
INDENT
    return {
        "ruleDbVersion" : "1",
        "ruleDbPath" : "http://localhost/rules.db",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="258" endline="260">
def StoreRules(** kwargs) :
INDENT
    store_rules.append(kwargs)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="277" endline="307">
def test_rules_db_from_device_404() :
INDENT
    mock_response = create_autospec(urllib3.HTTPResponse, instance = True)
    mock_response.status = 404
    class Device :
    INDENT
        name = MOCK_NAME
        udn = MOCK_UDN
        session = Session("http://localhost/")
        class rules :
        INDENT
            @ staticmethod
            def FetchRules() :
            INDENT
                return {
                    "ruleDbVersion" : "1",
                    "ruleDbPath" : "http://localhost/rules.db",
                    }
            DEDENT
        DEDENT
    DEDENT
    completed_with_no_exceptions = False
    with patch(
        "urllib3.PoolManager.request", return_value = mock_response) as mock_request :
    INDENT
        with rules_db.rules_db_from_device(Device) as db :
        INDENT
            mock_request.assert_called_once_with(
                method = "GET", url = "http://localhost/rules.db")
        DEDENT
        assert len(db.rules) == 0
        completed_with_no_exceptions = True
    DEDENT
    assert completed_with_no_exceptions
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="288" endline="293">
def FetchRules() :
INDENT
    return {
        "ruleDbVersion" : "1",
        "ruleDbPath" : "http://localhost/rules.db",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="308" endline="323">
def test_rules_db_from_device_raises_http_exception() :
INDENT
    device = Mock()
    device.session = Session("http://localhost/")
    device.rules = Mock()
    device.rules.FetchRules.return_value = {
        "ruleDbVersion" : 1,
        "ruleDbPath" : "http://localhost/",
        }
    with patch(
        "urllib3.PoolManager.request", side_effect = urllib3.exceptions.HTTPError) :
    INDENT
        with pytest.raises(HTTPException) :
        INDENT
            with rules_db.rules_db_from_device(device) :
            INDENT
                pass
            DEDENT
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="324" endline="346">
def test_sqlite_errors_raised() :
INDENT
    mock_response = create_autospec(urllib3.HTTPResponse, instance = True)
    mock_response.status = 404
    class Device :
    INDENT
        name = MOCK_NAME
        udn = MOCK_UDN
        session = Session("http://localhost/")
        class rules :
        INDENT
            @ staticmethod
            def FetchRules() :
            INDENT
                return {
                    "ruleDbVersion" : "1",
                    "ruleDbPath" : "http://localhost/rules.db",
                    }
            DEDENT
        DEDENT
    DEDENT
    with patch(
        "urllib3.PoolManager.request", return_value = mock_response) as mock_request :
    INDENT
        with pytest.raises(RulesDbQueryError) :
        INDENT
            with rules_db.rules_db_from_device(Device) as db :
            INDENT
                raise sqlite3.OperationalError("test")
            DEDENT
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/test_rules.py" startline="335" endline="340">
def FetchRules() :
INDENT
    return {
        "ruleDbVersion" : "1",
        "ruleDbPath" : "http://localhost/rules.db",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="20" endline="37">
def rules_db_from_device(self, device) :
INDENT
    with tempfile.TemporaryDirectory(prefix = "wemorules_") as temp_dir :
    INDENT
        rules_file_name = os.path.join(temp_dir, "rules.db")
        rules_db._create_empty_db(rules_file_name)
        try :
        INDENT
            conn = sqlite3.connect(rules_file_name)
            conn.row_factory = sqlite3.Row
            rdb = rules_db.RulesDb(conn, device.udn, device.name)
            @ contextlib.contextmanager
            def yield_rdb(* _) :
            INDENT
                yield rdb
            DEDENT
            with patch(TestLongPress.method, side_effect = yield_rdb) :
            INDENT
                yield rdb
            DEDENT
        DEDENT
        finally :
        INDENT
            conn.close()
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="30" endline="32">
def yield_rdb(* _) :
INDENT
    yield rdb
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="38" endline="41">
def test_supports_long_press(self, device) :
INDENT
    assert device.supports_long_press()
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="43" endline="51">
def test_list_add_remove_long_press_udns(self, device) :
INDENT
    udns = frozenset(["uuid:1", "uuid:2"])
    device.add_long_press_udns(udns)
    assert device.list_long_press_udns() == udns
    device.remove_long_press_udns(udns)
    assert device.list_long_press_udns() == frozenset()
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="53" endline="59">
def test_get_set_long_press_action(self, device) :
INDENT
    assert device.get_long_press_action() is None
    device.set_long_press_action(long_press.ActionType.OFF)
    assert device.get_long_press_action() == long_press.ActionType.OFF
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="61" endline="72">
def test_ensure_remove_long_press_virtual_device(self, device) :
INDENT
    assert device.list_long_press_udns() == frozenset()
    device.ensure_long_press_virtual_device()
    assert device.list_long_press_udns() == frozenset(
        [long_press.VIRTUAL_DEVICE_UDN])
    device.remove_long_press_virtual_device()
    assert device.list_long_press_udns() == frozenset()
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/api/unit/long_press_helpers.py" startline="73" endline="79">
def test_required_services(self, device) :
INDENT
    assert (
        long_press.RequiredService(
            name = "rules", actions = ["FetchRules", "StoreRules"])
        in device._required_services)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="16" endline="19">
def test_turn_on(self, dimmer) :
INDENT
    dimmer.on()
    assert dimmer.get_state(force_update = True) == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="21" endline="24">
def test_turn_off(self, dimmer) :
INDENT
    dimmer.off()
    assert dimmer.get_state(force_update = True) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="30" endline="36">
def test_set_brightness(
self, dimmer, brightness, expected_state, expected_brightness
) :
INDENT
    dimmer.set_brightness(brightness)
    assert dimmer.get_state(force_update = True) == expected_state
    assert dimmer.get_brightness() == expected_brightness
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="38" endline="41">
def test_brightness_on_startup(self, dimmer) :
INDENT
    dimmer.on()
    assert dimmer.get_brightness() ! = 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="42" endline="52">
def test_subscription_update_brightness(self, dimmer) :
INDENT
    assert dimmer.subscription_update("Brightness", "invalid") is False
    assert dimmer.subscription_update("BinaryState", "1") is True
    assert dimmer.subscription_update("Brightness", "52") is True
    assert dimmer.get_state() == 1
    assert dimmer.get_brightness() == 52
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="57" endline="63">
def dimmer(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11453.PVT-OWRT-Dimmer") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Dimmer-1_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="71" endline="77">
def dimmer(self, vcr) :
INDENT
    with vcr.use_cassette("WEMO_WW_2.00.20110904.PVT-RTOS-DimmerV2") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Dimmer-2_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_dimmer.py" startline="79" endline="112">
def test_is_subscribed(self, dimmer, subscription_registry) :
INDENT
    subscription_registry.register(dimmer)
    path = list(subscription_registry._subscription_paths) [0]

    ready = threading.Event()
    subscription_registry._sched.enter(0.1, 0, ready.set)
    ready.wait()

    subscription_registry.on(
        dimmer, None, lambda a, b, c : dimmer.subscription_update(b, c))

    subscription_registry.event(
        dimmer,
        EVENT_TYPE_BINARY_STATE,
        "1",
        path,
        )
    assert dimmer.get_state() == 1
    assert subscription_registry.is_subscribed(dimmer) is False
    subscription_registry.event(
        dimmer,
        EVENT_TYPE_BINARY_STATE,
        "0",
        path,
        )
    assert dimmer.get_state() == 0
    assert subscription_registry.is_subscribed(dimmer)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="14" endline="18">
def humidifier(vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11423.PVT-OWRT-Smart.yaml") :
    INDENT
        return Humidifier("http://192.168.1.100:49153/setup.xml")

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="20" endline="27">
def test_on(humidifier) :
INDENT
    humidifier.on()
    assert humidifier.fan_mode == FanMode.Minimum
    assert humidifier.fan_mode_string == "Minimum"
    assert humidifier.get_state() == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="29" endline="36">
def test_off(humidifier) :
INDENT
    humidifier.off()
    assert humidifier.fan_mode == FanMode.Off
    assert humidifier.fan_mode_string == "Off"
    assert humidifier.get_state() == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="38" endline="45">
def test_desired_humidity(humidifier) :
INDENT
    humidifier.on()
    humidifier.set_humidity(DesiredHumidity.FiftyFivePercent)
    assert humidifier.desired_humidity == DesiredHumidity.FiftyFivePercent
    assert humidifier.desired_humidity_percent == "55"
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="47" endline="66">
def test_set_fan_mode_and_humidity(humidifier) :
INDENT
    humidifier.set_fan_mode_and_humidity(
        FanMode.Medium, DesiredHumidity.FortyFivePercent)
    assert humidifier.fan_mode == FanMode.Medium
    assert humidifier.fan_mode_string == "Medium"
    assert humidifier.desired_humidity == DesiredHumidity.FortyFivePercent
    assert humidifier.desired_humidity_percent == "45"
    assert humidifier.get_state() == 1
    with pytest.raises(ValueError) :
    INDENT
        humidifier.set_fan_mode_and_humidity(fan_mode = 99)
    DEDENT
    with pytest.raises(ValueError) :
    INDENT
        humidifier.set_fan_mode_and_humidity(desired_humidity = 99)

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="68" endline="75">
def test_reset_filter_life(humidifier) :
INDENT
    assert humidifier.filter_life_percent == pytest.approx(59.62)
    humidifier.reset_filter_life()
    assert humidifier.filter_life_percent == pytest.approx(100.0)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="76" endline="79">
def test_filter_expired(humidifier) :
INDENT
    assert humidifier.filter_expired is False
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="80" endline="83">
def test_current_humidity_percent(humidifier) :
INDENT
    assert humidifier.current_humidity_percent == pytest.approx(42.0)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_humidifier.py" startline="84" endline="86">
def test_water_level(humidifier) :
INDENT
    assert humidifier.water_level == WaterLevel.Good
    assert humidifier.water_level_string == "Good"
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="12" endline="15">
def test_turn_on(self, maker) :
INDENT
    maker.on()
    assert maker.get_state(force_update = True) == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="17" endline="20">
def test_turn_off(self, maker) :
INDENT
    maker.off()
    assert maker.get_state(force_update = True) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="21" endline="27">
def test_maker_params(self, maker) :
INDENT
    assert maker.switch_state == 0
    assert maker.sensor_state == 1
    assert maker.switch_mode == 1
    assert maker.has_sensor == 1
    assert maker.get_state() == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="28" endline="31">
def test_maker_device_type(self, maker) :
INDENT
    assert maker.device_type == "Maker"
    assert repr(maker) == '<WeMo Maker "WeMo Device">'
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="32" endline="34">
def test_maker_unexpected_subscription_type(self, maker) :
INDENT
    assert maker.subscription_update("", "") is False
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="147" endline="163">
def test_subscription_update(
self,
update,
has_sensor,
sensor_state,
switch_mode,
switch_state,
maker,
) :
INDENT
    updated = maker.subscription_update("attributeList", update)
    assert updated is True
    assert maker.has_sensor == has_sensor
    assert maker.sensor_state == sensor_state
    assert maker.switch_mode == switch_mode
    assert maker.switch_state == switch_state
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_maker.py" startline="165" endline="167">
def maker(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11423.PVT-OWRT-Maker.yaml") :
    INDENT
        return Maker("http://192.168.1.100:49153/setup.xml")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="12" endline="15">
def test_turn_on(self, switch) :
INDENT
    switch.on()
    assert switch.get_state(force_update = True) == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="17" endline="21">
def test_turn_off(self, switch) :
INDENT
    switch.off()
    assert switch.get_state(force_update = True) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="26" endline="29">
def switch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_US_2.00.2769.PVT.yaml") :
    INDENT
        return Switch("http://192.168.1.100:49153/setup.xml")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="31" endline="38">
def test_config_any(self, switch) :
INDENT
    assert switch._config_any == {
        "binaryState" : "0",
        "firmwareVersion" : "WeMo_US_2.00.2769.PVT",
        "iconVersion" : "0|49153",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="43" endline="46">
def switch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11420.PVT-OWRT-SNSV2.yaml") :
    INDENT
        return Switch("http://192.168.1.100:49153/setup.xml")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="48" endline="58">
def test_config_any(self, switch) :
INDENT
    assert switch._config_any == {
        "binaryState" : "0",
        "firmwareVersion" : "WeMo_WW_2.00.11420.PVT-OWRT-SNSV2",
        "hkSetupCode" : "012-34-567",
        "hwVersion" : "v3",
        "iconVersion" : "2|49153",
        "new_algo" : "1",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="63" endline="66">
def switch(self, vcr) :
INDENT
    with vcr.use_cassette("WEMO_WW_4.00.20101902.PVT-RTOS-SNSV4.yaml") :
    INDENT
        return Switch("http://192.168.1.100:49153/setup.xml")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_switch.py" startline="68" endline="77">
def test_config_any(self, switch) :
INDENT
    assert switch._config_any == {
        "binaryState" : "0",
        "firmwareVersion" : "WEMO_WW_4.00.20101902.PVT-RTOS-SNSV4",
        "hkSetupCode" : "012-34-567",
        "hwVersion" : "v4",
        "iconVersion" : "1|49152",
        "new_algo" : "1",
        "rtos" : "1",
        }
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="14" endline="17">
def test_turn_on(self, lightswitch) :
INDENT
    lightswitch.on()
    assert lightswitch.get_state(force_update = True) == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="19" endline="23">
def test_turn_off(self, lightswitch) :
INDENT
    lightswitch.off()
    assert lightswitch.get_state(force_update = True) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="28" endline="34">
def lightswitch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11408.PVT-OWRT-LS") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Lightswitch-1_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="42" endline="48">
def lightswitch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11563.PVT-OWRT-LIGHTV2-WLS040") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Lightswitch-2_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="56" endline="62">
def lightswitch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11563.PVT-OWRT-LIGHTV2-WLS0403") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Lightswitch-3_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_lightswitch.py" startline="70" endline="75">
def lightswitch(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.2263.PVT") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:Lightswitch-1_0-SERIALNUMBER",
            "http://192.168.1.100:49153/Lightsetup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="16" endline="19">
def insight(self, vcr) :
INDENT
    with vcr.use_cassette("WeMo_WW_2.00.11408.PVT-OWRT-Insight.yaml") :
    INDENT
        return Insight("http://192.168.1.100:49153/setup.xml")
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="21" endline="26">
def test_turn_on(self, insight) :
INDENT
    insight.on()
    assert insight.get_state() == 8
    assert insight.standby_state == StandbyState.STANDBY
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="28" endline="33">
def test_turn_off(self, insight) :
INDENT
    insight.off()
    assert insight.get_state() == 0
    assert insight.standby_state == StandbyState.OFF
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="35" endline="54">
def test_insight_params(self, insight) :
INDENT
    insight.update_insight_params()
    assert insight.today_kwh == pytest.approx(0.0194118)
    assert insight.total_kwh == pytest.approx(1.6638418)
    assert insight.current_power == 0
    assert insight.current_power_watts == 0.0
    assert insight.wifi_power == 8
    assert insight.threshold_power == 8000
    assert insight.threshold_power_watts == pytest.approx(8.0)
    assert insight.today_on_time == 300
    assert insight.on_for == 231
    assert insight.total_on_time == 183183
    assert insight.last_change.astimezone(datetime.timezone.utc) == (
        datetime.datetime(
            2021, 1, 25, 0, 2, 4, tzinfo = datetime.timezone.utc))
    assert insight.today_on_time == 300
    assert insight.standby_state == StandbyState.OFF
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="56" endline="101">
def test_subscribe(self, insight, subscription_registry) :
INDENT
    subscription_registry.register(insight)

    ready = threading.Event()
    subscription_registry._sched.enter(0.1, 0, ready.set)
    ready.wait()

    subscription_registry.on(
        insight, None, lambda a, b, c : insight.subscription_update(b, c))
    subscription_registry.event(
        insight,
        EVENT_TYPE_BINARY_STATE,
        "1",
        )
    assert insight.get_state() == 1
    subscription_registry.event(
        insight,
        EVENT_TYPE_INSIGHT_PARAMS,
        "8|1611105078|2607|0|12416|1209600|328|500|457600|69632638|9500",
        )
    assert insight.today_kwh == pytest.approx(0.0076266668)
    assert insight.total_kwh == pytest.approx(1.1605439898)
    assert insight.current_power == 500
    assert insight.current_power_watts == pytest.approx(0.5)
    assert insight.wifi_power == 328
    assert insight.threshold_power == 9500
    assert insight.threshold_power_watts == pytest.approx(9.5)
    assert insight.today_on_time == 0
    assert insight.on_for == 2607
    assert insight.total_on_time == 12416
    assert insight.last_change.astimezone(datetime.timezone.utc) == (
        datetime.datetime(
            2021, 1, 20, 1, 11, 18, tzinfo = datetime.timezone.utc))
    assert insight.today_on_time == 0
    assert insight.standby_state == StandbyState.STANDBY
    subscription_registry.unregister(insight)
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_insight.py" startline="102" endline="110">
def test_subscription_update(self, insight) :
INDENT
    assert insight.subscription_update("BinaryState", "8") is True
    assert insight.subscription_update("BinaryState", "1") is True
    assert insight.subscription_update("BinaryState", "0") is False
    params = (
        "8|1611105078|2607|0|12416|1209600|328|500|457600|69632638|9500")
    assert insight.subscription_update("InsightParams", params) is True
    assert insight.subscription_update("UnknownParam", "1") is False
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_outdoor_plug.py" startline="12" endline="15">
def test_turn_on(self, outdoor_plug) :
INDENT
    outdoor_plug.on()
    assert outdoor_plug.get_state(force_update = True) == 1
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_outdoor_plug.py" startline="17" endline="21">
def test_turn_off(self, outdoor_plug) :
INDENT
    outdoor_plug.off()
    assert outdoor_plug.get_state(force_update = True) == 0
DEDENT
</source>
<source file="systems/Pywemo/tests/ouimeaux_device/test_outdoor_plug.py" startline="26" endline="31">
def outdoor_plug(self, vcr) :
INDENT
    with vcr.use_cassette("WEMO_WW_1.00.20081401.PVT-RTOS-OutdoorV1") :
    INDENT
        return device_from_uuid_and_location(
            "uuid:OutdoorPlug-1_0-SERIALNUMBER",
            "http://192.168.1.100:49153/setup.xml",
            )
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="18" endline="24">
def mock_interface_addresses() :
INDENT
    addresses = ["127.0.0.1"]
    with mock.patch("pywemo.ssdp.interface_addresses", return_value = addresses) :
    INDENT
        yield addresses

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="26" endline="33">
def mock_get_callback_address() :
INDENT
    with mock.patch(
        "pywemo.ssdp.get_callback_address", return_value = MOCK_CALLBACK_ADDRESS) :
    INDENT
        yield MOCK_CALLBACK_ADDRESS

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="35" endline="41">
def mock_socket() :
INDENT
    sock = mock.create_autospec(socket.socket, instance = True)
    with mock.patch("socket.socket", return_value = sock) :
    INDENT
        yield sock

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="43" endline="58">
def mock_select() :
INDENT
    return_queue = queue.Queue()
    def do_select(* _) :
    INDENT
        return return_queue.get()
    DEDENT
    with mock.patch("select.select", side_effect = do_select) :
    INDENT
        yield return_queue

    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="52" endline="54">
def do_select(* _) :
INDENT
    return return_queue.get()
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="60" endline="125">
def discovery_responder(
mock_select,
mock_socket,
mock_interface_addresses,
mock_get_callback_address,
) :
INDENT
    sendto_count = 0
    def do_once(req, source, expect_sendto = True, sendto_exception = None) :
    INDENT
        nonlocal sendto_count
        if sendto_exception :
        INDENT
            sendto_count += 1
            expect_sendto = False
            mock_socket.sendto.side_effect = sendto_exception
        DEDENT
        if expect_sendto :
        INDENT
            sendto_count += 1
            send_queue = queue.Queue()
            def sendto(msg, addr) :
            INDENT
                send_queue.put((msg, addr))
            DEDENT
            mock_socket.sendto.side_effect = sendto
        DEDENT
        mock_socket.recvfrom.return_value = (req.encode("UTF-8"), source)

        with mock.patch(
            "pywemo.ssdp.format_date_time", return_value = MOCK_DATE) :
        INDENT
            mock_select.put(([mock_socket],))
            if expect_sendto :
            INDENT
                return send_queue.get()
            DEDENT
        DEDENT
    DEDENT
    resp = ssdp.DiscoveryResponder(callback_port = MOCK_CALLBACK_PORT)
    resp._notify_enabled = False
    resp._nls_uuid = "UUID"
    resp.start()
    try :
    INDENT
        yield do_once
    DEDENT
    finally :
    INDENT
        resp._exit.set()
        mock_select.put(([],))

        resp.stop()

        assert mock_socket.sendto.call_count == sendto_count
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="82" endline="106">
def do_once(req, source, expect_sendto = True, sendto_exception = None) :
INDENT
    nonlocal sendto_count
    if sendto_exception :
    INDENT
        sendto_count += 1
        expect_sendto = False
        mock_socket.sendto.side_effect = sendto_exception
    DEDENT
    if expect_sendto :
    INDENT
        sendto_count += 1
        send_queue = queue.Queue()
        def sendto(msg, addr) :
        INDENT
            send_queue.put((msg, addr))
        DEDENT
        mock_socket.sendto.side_effect = sendto
    DEDENT
    mock_socket.recvfrom.return_value = (req.encode("UTF-8"), source)

    with mock.patch(
        "pywemo.ssdp.format_date_time", return_value = MOCK_DATE) :
    INDENT
        mock_select.put(([mock_socket],))
        if expect_sendto :
        INDENT
            return send_queue.get()
        DEDENT
    DEDENT
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="93" endline="95">
def sendto(msg, addr) :
INDENT
    send_queue.put((msg, addr))
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="126" endline="141">
def test_discovery_responder_notify(
mock_socket, mock_interface_addresses, mock_get_callback_address
) :
INDENT
    resp = ssdp.DiscoveryResponder(callback_port = MOCK_CALLBACK_PORT)
    resp.send_notify("ssdp:alive")
    params = {
        "callback" : MOCK_CALLBACK_ADDRESS,
        "nls" : resp._nls_uuid,
        "nts" : "ssdp:alive",
        }
    mock_socket.sendto.assert_called_with(
        (ssdp.SSDP_NOTIFY % params).encode("utf-8"),
        ("239.255.255.250", 1900),
        )

DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="142" endline="165">
def test_discovery_responder_responds_to_wemo(discovery_responder) :
INDENT
    from_addr = ("1.2.3.4", 54321)
    msg = """M-SEARCH * HTTP/1.1
ST: urn:Belkin:service:basicevent:1
MX: 1
MAN: "ssdp:discover"
HOST: 239.255.255.250:1900

"""
    resp_msg, resp_to_addr = discovery_responder(msg, from_addr)
    params = {
        "callback" : MOCK_CALLBACK_ADDRESS,
        "nls" : "UUID",
        "date" : MOCK_DATE,
        }
    expected_response = ssdp.SSDP_REPLY % params
    assert resp_msg.decode("UTF-8") == expected_response
    assert resp_to_addr == from_addr
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="166" endline="184">
def test_discovery_responder_ignores_notify(discovery_responder) :
INDENT
    from_addr = ("1.2.3.4", 54321)
    msg = (
        """NOTIFY * HTTP/1.1
HOST: 239.255.255.250:1900
CACHE-CONTROL: max-age=1800
LOCATION: http://%s:%d/setup.xml
SERVER: Unspecified, UPnP/1.0, Unspecified
NT: urn:Belkin:service:basicevent:1
NTS: ssdp:alive
USN: uuid:Socket-1_0-SERIALNUMBER::urn:Belkin:service:basicevent:1

"""
        % from_addr)
    discovery_responder(msg, from_addr, expect_sendto = False)

DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="185" endline="197">
def test_discovery_responder_ignores_non_wemo(discovery_responder) :
INDENT
    from_addr = ("1.2.3.4", 54321)
    msg = """M-SEARCH * HTTP/1.1
ST: ssdp:all
MX: 2
MAN: "ssdp:discover"
HOST: 239.255.255.250:1900

"""
    discovery_responder(msg, from_addr, expect_sendto = False)

DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="198" endline="213">
def test_discovery_responder_ignores_sendto_exception(discovery_responder) :
INDENT
    from_addr = ("1.2.3.4", 54321)
    msg = """M-SEARCH * HTTP/1.1
ST: urn:Belkin:service:basicevent:1
MX: 1
MAN: "ssdp:discover"
HOST: 239.255.255.250:1900

"""
    discovery_responder(msg, from_addr, sendto_exception = OSError)

    test_discovery_responder_responds_to_wemo(discovery_responder)

DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="251" endline="268">
def test_scan(
self,
mock_interface_addresses,
mock_socket,
mock_select,
kwargs,
expected_count,
) :
INDENT
    mock_socket.recv.side_effect = [self._R1, self._R1, self._R2]
    mock_select.put(([mock_socket],))
    mock_select.put(([mock_socket],))
    mock_select.put(([mock_socket],))
    mock_select.put(([],))
    entries = ssdp.scan(st = ssdp.ST, timeout = 0, ** kwargs)
    assert len(entries) == expected_count
DEDENT
</source>
<source file="systems/Pywemo/tests/test_ssdp.py" startline="275" endline="291">
def test_properties(self) :
INDENT
    r1 = ssdp.UPNPEntry.from_response(self._R1)
    assert r1.st == "urn:Belkin:service:basicevent:1"
    assert (
        r1.usn == "uuid:Socket-1_0-SERIAL::urn:Belkin:service:basicevent:1")
    assert r1.udn == "uuid:Socket-1_0-SERIAL"
    assert r1.location == "http://192.168.1.100:49158/setup.xml"
    r2 = ssdp.UPNPEntry.from_response(self._R2)
    assert r1 ! = r2
    r1_2 = ssdp.UPNPEntry.from_response(self._R1)
    assert r1_2 == r1
    items = set((r1, r2, r1_2))
    assert len(items) == 2
DEDENT
</source>
