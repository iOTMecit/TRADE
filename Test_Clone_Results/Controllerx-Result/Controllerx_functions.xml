<source file="systems/Controllerx/tests/unit_tests/cx_devices/muller_licht_test.py" startline="43" endline="46">
def test_zha_action_MLI404002(data : EventData, expected_action : str) -> None :
INDENT
    sut = MLI404002LightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/philips_test.py" startline="14" endline="17">
def test_zha_action_HueDimmerController(data : EventData, expected_action : str) -> None :
INDENT
    sut = HueDimmerController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aqara_test.py" startline="25" endline="32">
def test_zha_action_MFKZQ01LMLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = MFKZQ01LMLightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aqara_test.py" startline="47" endline="54">
def test_zha_action_WXKG01LMLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = WXKG01LMLightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aqara_test.py" startline="64" endline="71">
def test_zha_action_WXKG11LMRemoteLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = WXKG11LMRemoteLightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aqara_test.py" startline="82" endline="89">
def test_zha_action_WXKG11LMSensorSwitchLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = WXKG11LMSensorSwitchLightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aqara_test.py" startline="90" endline="93">
def test_type_WXCJKG13LMMediaPlayerController() -> None :
INDENT
    sut = WXCJKG13LMMediaPlayerController()
    assert isinstance(sut, MediaPlayerController)
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/aurora_test.py" startline="17" endline="22">
def test_zha_action_WXKG01LMLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = AUA1ZBR2GWLightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/legrand_test.py" startline="19" endline="23">
def test_get_zha_action_LegrandWallController(
data : EventData, expected_action : str
) -> None :
INDENT
    action = get_zha_action_LegrandWallController(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_devices/rgb_genie_test.py" startline="19" endline="24">
def test_zha_action_MFKZQ01LMLightController(
data : EventData, expected_action : str
) -> None :
INDENT
    sut = ZB5122LightController(** {})
    action = sut.get_zha_action(data)
    assert action == expected_action
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/action-types/predefined_action_type_test.py" startline="19" endline="26">
def test_get_action(
test_input : TypeAction,
expected : ActionFunctionWithParams,
) -> None :
INDENT
    output = _get_action(test_input)
    assert output == expected
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/action-types/predefined_action_type_test.py" startline="87" endline="101">
def test_get_arguments_general(
action_args : ActionParams,
user_args : Dict [str, Any],
expected : Optional [Tuple [ActionParams, Dict [str, Any]]],
) -> None :
INDENT
    async def test_fn(a : str, b : int = 2) -> None :
    INDENT
        pass
    DEDENT
    with wrap_execution(error_expected = expected is None, exception = ValueError) :
    INDENT
        output = _get_arguments(test_fn, action_args, user_args, None)
    DEDENT
    if expected is not None :
    INDENT
        assert expected == output
    DEDENT
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/action-types/predefined_action_type_test.py" startline="92" endline="94">
async def test_fn(a : str, b : int = 2) -> None :
INDENT
    pass
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/action-types/predefined_action_type_test.py" startline="125" endline="138">
def test_get_arguments_with_extra(
action_args : ActionParams,
user_args : Dict [str, Any],
extra : Optional [EventData],
expected : Optional [Tuple [ActionParams, Dict [str, Any]]],
) -> None :
INDENT
    async def test_fn(a : str, b : int, extra : Optional [EventData] = None) -> None :
    INDENT
        pass
    DEDENT
    with wrap_execution(error_expected = expected is None, exception = ValueError) :
    INDENT
        output = _get_arguments(test_fn, action_args, user_args, extra)
    DEDENT
    if expected is not None :
    INDENT
        assert expected == output
    DEDENT
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/action-types/predefined_action_type_test.py" startline="131" endline="133">
async def test_fn(a : str, b : int, extra : Optional [EventData] = None) -> None :
INDENT
    pass
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/color_helper_test.py" startline="16" endline="18">
def test_get_color_wheel(colors : Colors, error_expected : bool) -> None :
INDENT
    with wrap_execution(error_expected = error_expected, exception = ValueError) :
    INDENT
        colors = get_color_wheel(colors)
    DEDENT
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/bounce_stepper_test.py" startline="26" endline="38">
def test_bounce_stepper(
min_max : MinMax,
value : int,
steps : int,
direction : Literal ["up", "down"],
expected_value : int,
expected_direction : Literal ["up", "down"],
) -> None :
INDENT
    stepper = BounceStepper(min_max, steps)
    stepper_output = stepper.step(value, direction)
    assert stepper_output.next_value == expected_value
    assert stepper_output.next_direction == expected_direction
    assert not stepper_output.exceeded
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/loop_stepper_test.py" startline="28" endline="38">
def test_loop_stepper(
min_max : MinMax,
value : int,
steps : int,
direction : Literal ["up", "down"],
expected_value : int,
) -> None :
INDENT
    stepper = LoopStepper(min_max, steps)
    stepper_output = stepper.step(value, direction)
    assert stepper_output.next_value == expected_value
    assert not stepper_output.exceeded
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stop_stepper_test.py" startline="107" endline="125">
def test_stop_stepper_get_direction(
min_max : MinMax,
value : int,
direction : str,
previous_direction : str,
expected_direction : str,
expected_new_previous_direction : str,
) -> None :
INDENT
    stepper = StopStepper(min_max, 10)
    stepper.previous_direction = previous_direction

    new_direction = stepper.get_direction(value, direction)

    assert new_direction == expected_direction
    assert stepper.previous_direction == expected_new_previous_direction
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stop_stepper_test.py" startline="141" endline="154">
def test_stop_stepper_step(
min_max : MinMax,
value : int,
steps : int,
direction : Literal ["up", "down"],
expected_value : int,
expected_exceeded : bool,
) -> None :
INDENT
    stepper = StopStepper(min_max, steps)
    stepper_output = stepper.step(value, direction)
    assert stepper_output.next_value == expected_value
    assert stepper_output.exceeded == expected_exceeded
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stepper_test.py" startline="7" endline="9">
def __init__(self) -> None :
INDENT
    super().__init__(MinMax(0, 1), 1)
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stepper_test.py" startline="10" endline="13">
def step(self, value : Number, direction : str) -> StepperOutput :
INDENT
    return StepperOutput(next_value = 0, next_direction = None)

DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stepper_test.py" startline="25" endline="35">
def test_get_direction(
direction_input : str, previous_direction : str, expected_direction : str
) -> None :
INDENT
    stepper = FakeStepper()
    stepper.previous_direction = previous_direction
    direction_output = stepper.get_direction(0, direction_input)
    assert direction_output == expected_direction
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stepper_test.py" startline="45" endline="50">
def test_sign(direction_input : str, expected_sign : int) -> None :
INDENT
    stepper = FakeStepper()
    sign_output = stepper.sign(direction_input)
    assert sign_output == expected_sign
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/stepper_test.py" startline="60" endline="65">
def test_apply_sign(
value : Number, direction_input : str, expected_value : Number
) -> None :
INDENT
    stepper = FakeStepper()
    value_output = stepper.apply_sign(value, direction_input)
    assert value_output == expected_value
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/cx_core/stepper/index_loop_stepper_test.py" startline="20" endline="29">
def test_index_loop_stepper(
size : int,
value : int,
direction : Literal ["up", "down"],
expected_value : int,
) -> None :
INDENT
    stepper = IndexLoopStepper(size)
    stepper_output = stepper.step(value, direction)
    assert stepper_output.next_value == expected_value
    assert not stepper_output.exceeded
DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/conftest.py" startline="10" endline="15">
def fake_controller() -> Controller :
INDENT
    c = Controller(** {})
    c.args = {}
    return c

DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/conftest.py" startline="17" endline="22">
def fake_type_controller() -> LightController :
INDENT
    c = LightController(** {})
    c.args = {}
    return c

DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/conftest.py" startline="24" endline="27">
async def run(self, extra : Optional [EventData] = None) -> None :
INDENT
    return None

DEDENT
</source>
<source file="systems/Controllerx/tests/unit_tests/conftest.py" startline="29" endline="30">
def fake_action_type(fake_controller : Controller) -> ActionType :
INDENT
    return FakeActionType(fake_controller, {})
DEDENT
</source>
