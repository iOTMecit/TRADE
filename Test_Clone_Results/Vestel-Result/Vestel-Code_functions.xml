<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="5" endline="14">
def test(api) :
INDENT
    try :
    INDENT
        EPG_TC01(api)
        EPG_TC02(api)
        EPG_TC03(api)
        EPG_TC04(api)
        EPG_TC06(api)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="15" endline="24">
def doFTI_ImportChList(api, c) :
INDENT
    try :
    INDENT
        global ftiCompleted
        api.doPowerCycle(api)
        api.doFTI(api)
        api.sendKeys(api.IMPORT_CHANNEL_LIST)
        ftiCompleted = 1
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="25" endline="295">
def EPG_TC01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('EPG_TC01_01')
    api.setTestCaseDescription('EPG - Enter/Exit - MHEG to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+10'])
            api.sendKeys(['red+5'])
            api.testImages('BbcOne_MHEG-ref', msg = 'BBC ONE MHEG acildigi gorulmelidir.')
            api.sendKeys(['mheg_epg+3'])
            api.testImages('BbcOne_EPG-ref', mask = api.EPGChannelNameMask, msg = 'EPG ye girebilmelidir, Mheg kapanmalidir.')
            api.sendKeys(['mheg_epg+10', 'info+0.5'])
            api.testImages('_BbcOne-ref', mask = api.infoBarMask, msg = 'Mevcut kanala geri donmelidir. MHEG acik olmamalidir.')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['red+3'])
            api.testImages('BbcOne_MHEG-ref', msg = 'BBC ONE MHEG acildigi gorulmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_02')
    api.setTestCaseDescription('EPG - Enter/Exit - Subtitle On to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['subtitles+15'])
            api.grabImage('BbcOne_SubtitleOn', delay = 5, count = 3, nView = 3, msg = 'Subtitle acildigi gorulmelidir.')
            api.sendKeys(['mheg_epg+3'])
            api.grabImage('BbcOne_EPG_NoSubtitle', delay = 5, count = 3, nView = 3, msg = 'EPG ye girmelidir, subtitle EPG uzerine dokulmemelidir.')
            api.sendKeys(['mheg_epg+10', 'info+0.5'])
            api.testImages('_BbcOne-ref', mask = api.infoBarMask, msg = 'Mevcut kanala geri donmelidir')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.grabImage('BbcOne_SubtitleOn', delay = 5, count = 3, nView = 3, msg = 'Subtitle acik olmali ve ekranda gorulmelidir.')
            api.sendKeys(['subtitles+3'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_03')
    api.setTestCaseDescription('EPG - Enter/Exit - Teletext to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['817+7'])
            api.sendKeys(['text+3'])
            api.testImages('Arte_Teletext-ref', msg = 'Arte kanalinda teletext acildigi gorulmelidir.')
            api.sendKeys(['mheg_epg+3'])
            api.testImages('Arte_Teletext1-ref', msg = 'Teletext sayfasi gorulmelidir, EPG acilmamalidir.')
            api.sendKeys(['text+1*2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_04')
    api.setTestCaseDescription('EPG - Enter/Exit - Record to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['record+7', 'ok+5', 'info+1'])
            api.testImages('BbcOne_Record-ref', mask = api.infoBarMask, msg = 'Channel 4 kanalinda record yapildigi gorulmelidir.')
            api.sendKeys(['mheg_epg+3'])
            api.testImages('BbcOne_EPG-ref', mask = api.EPGChannelNameMask, msg = 'EPG ye girebilmelidir.')
            api.sendKeys(['exit2+2 ', 'stop+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_05')
    api.setTestCaseDescription('EPG - Enter/Exit - Timeshift to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['stop+5', 'pause+15', 'info+1'])
            api.testImages('BbcOne_Timeshift-ref', mask = api.timeshiftInfoBar, msg = 'Channel 4 kanalinda timeshift yapildigi gorulmelidir.')
            api.sendKeys(['info+1', 'mheg_epg+0.5'])
            api.testImages('BbcOne_NoEPGBecauseTimeshift-ref', mask = api.timeshiftNotAvailable, msg = 'EPG ye girememelidir.')
            api.sendKeys(['exit2+2*2', 'stop+6'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_06')
    api.setTestCaseDescription('EPG - Enter/Exit - Fluke to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_07')
    api.setTestCaseDescription('EPG - Enter/Exit - Astro to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_08')
    api.setTestCaseDescription('EPG - Enter/Exit - Wait HBBTV Red icon for EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['816+7'])
            api.sendKeys(['mheg_epg+3'])
            api.testImages('DasErsteHD_EPG-ref', mask = api.EPGChannelNameMask, msg = 'EPG ye girmelidir.')
            api.sendKeys(['exit2+2*2+10', 'info+0.5'])
            api.testImages('_DasErsteHd-ref', mask = api.infoBarMask, msg = 'Das Erste HD kanalina geri donmelidir.')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_09')
    api.setTestCaseDescription('EPG - Enter/Exit - HBBTV to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['816+10'])
            api.sendKeys(['red+3'])
            api.testImages('DasErsteHD_HBBTV-ref', msg = 'HBBTV acilmalidir.')
            api.sendKeys(['mheg_epg+3'])
            api.testImages('DasErsteHD_EPG-ref', mask = api.EPGChannelNameMask, msg = 'EPG ye girmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_10')
    api.setTestCaseDescription('EPG - Enter/Exit - Astro to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_11')
    api.setTestCaseDescription('EPG - Enter/Exit - Portal to EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_12')
    api.setTestCaseDescription('EPG - Enter/Exit - Analog Channel EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_13')
    api.setTestCaseDescription('EPG - Enter/Exit - Unplug RF Cable')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['5+10'])
            api.sendKeys(['RFSIGNALOFF', 'exit2+2*2'])
            api.testImages('_noSignal-ref', msg = 'TV, No Signal durumunda olmalidir.')
            api.sendKeys(['exit2+2*2+60', 'mheg_epg+5'])
            api.testImages('_noSignal-ref', msg = 'EPG ye girmemelidir. Tv, No Signal durumunda olmalidir.')
            api.sendKeys(['exit2+2*2', 'RFSIGNALON', 'progup+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC01_14')
    api.setTestCaseDescription('EPG - Enter/Exit - Only Analog Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="296" endline="787">
def EPG_TC02(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 1
    api.setTestCaseName('EPG_TC02_01')
    api.setTestCaseDescription('EPG Type - Now-Next - Right/Left Operations')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10'])
            controlImage = []
            api.testImages('Mheg_CurrentEvent-ref', limit = 80, msg = 'Current Event secili olmalidir.')
            api.sendKeys(['right+1'])
            api.testImages('Mheg_NextEvent-ref', limit = 80, msg = 'Next Event secili olmalidir.')
            api.sendKeys(['left+1'])
            api.testImages('Mheg_CurrentEvent-ref', limit = 80, msg = 'Current Event secili olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_02')
    api.setTestCaseDescription('EPG Type - Now-Next - Down/Up Operations')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10'])
            api.testImages('Mheg_1-ref', limit = 80, msg = 'Dogrudan secili olan kanal EPG de gorulmelidir.')
            api.sendKeys(['down+1*15'])
            api.testImages('Mheg_2-ref', limit = 80, msg = 'Mevcut kanaldan 15 kanal asagi inilmelidir.')
            api.sendKeys(['up+1*5'])
            api.testImages('Mheg_3-ref', limit = 80, msg = '5 kanal yukari cikilmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_03')
    api.setTestCaseDescription('EPG Type - Now-Next - Now-Next to List Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10'])
            api.testImages('Mheg_NowNext-ref', limit = 80, msg = 'Now-Next gorunumu gorulmelidir.')
            api.sendKeys(['green+10'])
            api.testImages('Mheg_ListSchedule-ref', limit = 80, msg = 'List Schedule gorunumu gorulmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_04')
    api.setTestCaseDescription('EPG Type - Now-Next - Now-Next to Timeline Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10'])
            api.testImages('Mheg_NowNext-ref', limit = 80, msg = 'Now-Next gorunumu gorulmelidir.')
            api.sendKeys(['yellow+10'])
            api.testImages('Mheg_Timeline-ref', limit = 65, msg = 'Timeline gorunumu gorulmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_05')
    api.setTestCaseDescription('EPG Type - Now-Next - Event Details')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10', 'info+3'])
            api.testImages('EventDetails-ref', limit = 80, msg = 'Ekranin yukarisinda program ile ilgili detaylar acilmali.')
            api.sendKeys(['info+3'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_06')
    api.setTestCaseDescription('EPG Type - Now-Next - Close Event Details')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'red+10', 'info+3*2'])
            api.testImages('NowNext-ref', limit = 80, msg = 'Event Detaylari yukarida acilan kisimdan kaybolmali, Now And Next EPG gorunumune donmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_07')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Radio Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', tvRadio = 'Radio Only')
            api.testImages(['EPG_RadioOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_08')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Text Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', tvRadio = 'Text Only')
            api.testImages(['EPG_TextOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de text kanallari varsa sadece onlar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_09')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / TV Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', tvRadio = 'TV Only')
            api.testImages(['EPG_TVOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de text kanallari varsa sadece onlar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_10')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', tvRadio = 'All')
            api.testImages(['EPG_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Tum digital kanallar EPG listesinde gorunur olmalidir, (TV -Radio ve varsa Text)')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_11')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Encrypted')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', freeCas = 'Encrypted')
            api.testImages(['EPG_Encrypted-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de Encrypted kanallari varsa sadece onlar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_12')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Free')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', freeCas = 'Free')
            api.testImages(['EPG_Free-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece Free kanallar bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_13')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', freeCas = 'All')
            api.testImages(['EPG_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir ve hem Free hem de Encrypted kanallar listede bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_14')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Numeric')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', sort = 'Numeric')
            api.testImages(['EPG_Numeric-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listedeki kanallar numerik siralanmis olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_15')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Alphabetic')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', sort = 'Alphabetic')
            api.testImages(['EPG_Alphabetic-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir ve hem Free hem de Encrypted kanallar listede bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_16')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / SD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', hdsd = 'Sd')
            api.testImages(['EPG_SD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece SD kanallar bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_17')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / HD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', hdsd = 'Hd')
            api.testImages(['EPG_HD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece HD kanallar bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_18')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / HD/SD (All)')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', hdsd = 'All')
            api.testImages(['EPG_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede tum kanallar hd ve sd bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_19')
    api.setTestCaseDescription('EPG Type - Now-Next - Filter / Z')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])

            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'NowNext', az = 'Z')
            api.testImages(['EPG_AZ_Z-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'B harfi ile baslayan kanallar siralanmis olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_20')
    api.setTestCaseDescription('EPG Type - Now-Next - Timer / Timer Conflict')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])
            api.sendKeys(['down+1*3', 'right+1'])
            api.testImages('EPG_NextEvent-ref', msg = 'EPG de Next Event secili olmalidir.')
            api.sendKeys(['ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_NextEvent_SetTimer-ref', msg = 'EPG de Next Event icin timer kuruldugu gorulmelidir.')
            api.sendKeys(api.TIMERS)
            api.testImages('TimerMenu_Timers-ref', mask = api.TimerMask, msg = 'Timer Menu de timer kuruldugu gorulmelidir.')
            api.sendKeys(['exit2+2*2', 'mheg_epg+3', 'red+10', 'down+1*2', 'right+1'])
            api.sendKeys(['ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_TimerConflict-ref', msg = 'Cakisma oldugunu gosteren sayfa acilmalidir.')

            api.sendKeys(['red+1', 'down+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_21')
    api.setTestCaseDescription('EPG Type - Now-Next - Record Next Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+10'])
            api.sendKeys(['right+1', 'ok+1', 'down+1', 'ok+10'])
            api.testImages('EPG_RecordNextEvent-ref', limit = 90, msg = 'Record kurulan event EPG listesinde isaretlenmeli, zamani geldiginde record kurulan yayina gidip kayda baslamali.')
            api.sendKeys(['ok+1', 'down+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_22')
    api.setTestCaseDescription('EPG Type - Now-Next - Select Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['down+1*3', 'right+1', 'ok+1*2', 'exit+10', 'info+0.5'])
            api.testImages('_ZdfNeo-ref', mask = api.infoBarMask, msg = 'Secilen kanala gitmeli')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_23')
    api.setTestCaseDescription('EPG Type - Now-Next - Record Current Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+3'])
            api.sendKeys(['ok+1', 'up+1', 'ok*3+10', 'info+0.8'])
            api.testImages('Zdf_Record-ref', mask = api.infoBarMask, limit = 95, msg = 'Record kurulan yayina gitmeli, record baslamali.')
            api.sendKeys(api.TIMERS + ['down+1', 'ok+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2+2*2', 'mheg_epg+3'])
            if api.testImages('EPGInfoOpen-ref', recordResults = False, limit = 50) [0] :
            INDENT
                api.sendKeys(['info+1'])
            DEDENT
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC02_24')
    api.setTestCaseDescription('EPG Type - Now-Next - Exit EPG with Return or Back')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.sendKeys(['back+10', 'info+0.5'])
            api.testImages('_ZdfNeo-ref', mask = api.infoBarMask, limit = 95, msg = 'Secilen kanala gitmeli')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (8, 0, 8), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="788" endline="1341">
def EPG_TC03(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 1
    api.setTestCaseName('EPG_TC03_01')
    api.setTestCaseDescription('EPG Type - List - 3 Days Later')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'green+3', 'progup+1*3'])
            api.testImages('EPG_3DaysLater-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 3 gun sonraki program bilgileri gorunur olmali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_02')
    api.setTestCaseDescription('EPG Type - List - 1 Day Before')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'progdown+1'])
            api.testImages('EPG_1DaysBefore-ref', msg = 'Event bilgileri degisikligi olmali. Geri gidilen gune ait program bilgileri gorunur olmali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_03')
    api.setTestCaseDescription('EPG Type - List - Event Details')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'right+1', 'down+1', 'info+1'])
            api.testImages('EPG_EventDetails-ref', msg = 'Ekranin yukarisinda program ile ilgili detayla acilmali.')
            api.sendKeys(['info+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_04')
    api.setTestCaseDescription('EPG Type - List - Event Details More')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'right+1', 'down+1', 'info+1', 'progdown+1*2'])
            api.testImages('EPG_EventDetails_Down-ref', msg = 'More Event Info icin Program Up ve Program Down tusunu kullanin')
            api.sendKeys(['progup+1'])
            api.testImages('EPG_EventDetails_Up-ref', msg = 'More Event Info icin Program Up ve Program Down tusunu kullanin')

            api.sendKeys(['info+1'])
            api.testImages('EPG_EventDetails-ref', msg = 'Event Detaylari yukarida acilan kisimdan kaybolmali, List Schedule EPG gorunumune donmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_05')
    api.setTestCaseDescription('EPG Type - List - Timer')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'green+3', 'down+1*3', 'right+1', 'down+1*2', 'ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_SetTimer-ref', msg = 'Timer kurulmali, timer kurulan event EPG de belli olmali.')
            api.sendKeys(api.TIMERS)
            api.testImages('EPG_TimerMenu-ref', mask = api.TimerMask, msg = 'Timer kurulmali, timers menuden gorunmeli, zamani geldiginde kayda baslamali.')
            api.sendKeys(['down+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_06')
    api.setTestCaseDescription('EPG Type - List - Timer Conflict')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'right+1', 'ok+1', 'up+1', 'ok+1', 'exit2+3'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'down+1', 'right+1', 'ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_NoMoreTimer-ref', msg = 'Cakisma oldugunu gosteren sayfa acilmalidir.')
            api.sendKeys(['ok+1'] + api.TIMERS + ['down+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_07')
    api.setTestCaseDescription('EPG Type - List - Record Next Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'right+1', 'down+1*2', 'ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_Record-ref', msg = 'Record kurulan event EPG listesinde isaretlenmeli.')
            api.sendKeys(api.TIMERS + ['down+1'])
            forceBreak = 0
            while True :
            INDENT
                forceBreak += 1
                if api.testImages('EPG_RecordStart-ref', recordResults = False, msg = 'Zamani geldiginde record kurulan yayina gidip kayda baslamali.') [0] :
                INDENT
                    api.updateTestResult('PASS')
                    break
                DEDENT
                elif forceBreak == 10 :
                INDENT
                    api.updateTestResult('FAIL')
                    break
                DEDENT
                else :
                INDENT
                    api.sendKeys(['+5'])
                DEDENT
            DEDENT
            api.sendKeys(api.TIMERS + ['down+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_08')
    api.setTestCaseDescription('EPG Type - List - Select Channel Option')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'green+3', 'down+1*3', 'right+1', 'down+1*2', 'ok+1*2', '+10', 'info+0.5'])
            api.testImages('_ZdfNeo-ref', mask = api.infoBarMask, msg = 'Secilen kanala gitmelidir.')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_09')
    api.setTestCaseDescription('EPG Type - List - Filter / Radio Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'List', tvRadio = 'Radio Only')
            api.testImages(['EPG_RadioOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_10')
    api.setTestCaseDescription('EPG Type - List - Filter / Text Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'List', tvRadio = 'Text Only')
            api.testImages(['EPG_TextOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_11')
    api.setTestCaseDescription('EPG Type - List - Filter / TV Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'List', tvRadio = 'Tv Only')
            api.testImages(['EPG_TvOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_12')
    api.setTestCaseDescription('EPG Type - List - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'List', tvRadio = 'All')
            api.testImages(['EPG_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_13')
    api.setTestCaseDescription('EPG Type - List - Filter / Encrypted')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'Digital Cable Only', fromView = 'List', freeCas = 'Encrypted')
            api.testImages(['EPG_Encrypted-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_14')
    api.setTestCaseDescription('EPG Type - List - Filter / Free')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', freeCas = 'Free')
            api.testImages(['EPG_Free-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_15')
    api.setTestCaseDescription('EPG Type - List - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', freeCas = 'All')
            api.testImages(['EPG_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_16')
    api.setTestCaseDescription('EPG Type - List - Filter / Numeric')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', sort = 'Numeric')
            api.testImages(['EPG_Numeric-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_17')
    api.setTestCaseDescription('EPG Type - List - Filter / Alphabetic')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', sort = 'Alphabetic')
            api.testImages(['EPG_Alphabetic-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_18')
    api.setTestCaseDescription('EPG Type - List - Filter / SD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', hdsd = 'SD')
            api.testImages(['EPG_SD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_19')
    api.setTestCaseDescription('EPG Type - List - Filter / HD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', hdsd = 'HD')
            api.testImages(['EPG_HD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_20')
    api.setTestCaseDescription('EPG Type - List - Filter / Z')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'List', az = 'Z')
            api.testImages(['EPG_AZ_Z-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_21')
    api.setTestCaseDescription('EPG Type - List - Select Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'green+3', '9+3'])
            api.testImages('EPG_Channel9-ref', msg = '9 numarali kanali EPG de listede gostermeli. Kanala ait event bilgileri gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_22')
    api.setTestCaseDescription('EPG Type - List - Changing Navigation')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'down+1*6', 'up+1*5'])
            api.testImages('EPG_Navigation-ref', msg = 'Asagi iniste sayfa degisikligi olmali, degisen sayfadaki kanallara ait event ler gorunmeli. Navigasyon yapilabilmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_23')
    api.setTestCaseDescription('EPG Type - List - Next Time Slice')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'green+1'])
            api.testImages('EPG_ListSch_NextTimeSlice1-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 1 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['green+1'])
            api.testImages('EPG_ListSch_NextTimeSlice2-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 2 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['green+1'])
            api.testImages('EPG_ListSch_NextTimeSlice3-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 3 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_24')
    api.setTestCaseDescription('EPG Type - List - Previous Time Slice')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'green+1'])
            api.testImages('EPG_ListSch_NextTimeSlice1-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 1 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['green+1'])
            api.testImages('EPG_ListSch_NextTimeSlice2-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 2 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['red+1'])
            api.testImages('EPG_ListSch_PreviousTimeSlice1-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 1 zaman dilimi sonrasinin program bilgileri gorunur olmali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_25')
    api.setTestCaseDescription('EPG Type - List - List to Now-Next Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'blue+3'])
            api.testImages('EPG_TimetoNowNext-ref', msg = 'Now-Next gorunumune gecmeli, List Schedule gorunumunde event leri gorunen kanallarin event bilgileri Now-Next gorunumunde de gorulmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_26')
    api.setTestCaseDescription('EPG Type - List - Record Current Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.sendKeys(['right+1', 'down+1', 'ok+1', 'up+1', 'ok*3+10', 'info+0.8'])
            api.testImages('EPG_GoChannel-ref', mask = api.infoBarMask, msg = 'Record kurulan yayina gitmeli, record baslamali.')
            api.sendKeys(api.TIMERS + ['down+1', 'ok+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit+1*2', 'mheg_epg+3'])
            if api.testImages('EPGInfoOpen-ref', recordResults = False, limit = 50) [0] :
            INDENT
                api.sendKeys(['info+1'])
            DEDENT
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_27')
    api.setTestCaseDescription('EPG Type - List - List to Now-Next Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3', 'yellow+3'])
            api.testImages('EPG_ListtoTimeLine-ref', limit = 70, msg = 'Timeline gorunumune gecmeli, List Schedule gorunumunde event leri gorunen kanallarin event bilgileri Timeline gorunumunde de gorulmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC03_28')
    api.setTestCaseDescription('EPG Type - List - Exit EPG with Return or Back')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.sendKeys(['back+10', 'info+0.5'])
            api.testImages('EPG_GoChannel-ref', mask = api.infoBarMask, msg = 'Mevcut kanala geri donmeli, kanalda goruntu ve ses kontrol edilmeli, bir problem olmamali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="1342" endline="2033">
def EPG_TC04(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 1
    api.setTestCaseName('EPG_TC04_01')
    api.setTestCaseDescription('EPG Type - Timeline - 3 Days Later')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'progup+1*3'])
            api.testImages('EPG_3DaysLater-ref', msg = 'Event bilgileri degisikligi olmali. Kanala ait 3 gun sonraki program bilgileri gorunur olmali.')
            api.sendKeys(['progdown+1'])
            api.testImages('EPG_1DayBefore-ref', msg = 'Event bilgileri degisikligi olmali. Geri gidilen gune ait program bilgileri gorunur olmali.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_02')
    api.setTestCaseDescription('EPG Type - Timeline - Event Details')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'info+1'])
            api.testImages('EPG_TimelineSchedule_EventDetails-ref', msg = 'Ekranin yukarisinda program ile ilgili detayla acilmali.')
            api.sendKeys(['info+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_03')
    api.setTestCaseDescription('EPG Type - Timeline - Event Details More')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+5', 'info+3'])
            api.sendKeys(['progdown+2'])
            api.testImages('EPG_EventDetailsMore_Down-ref', msg = 'More Event Info icin Program down tusunu kullanin')
            api.sendKeys(['progup+2'])
            api.testImages('EPG_EventDetailsMore_Up-ref', msg = 'More Event Info icin Program up tusunu kullanin')
            api.sendKeys(['info+3'])
            api.testImages('EPG_TimelineSchedule-ref', limit = 75, msg = 'Event Detaylari yukarida acilan kisimdan kaybolmali, Timeline Schedule EPG gorunumune donmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_04')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Radio Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', tvRadio = 'Radio Only')
            api.testImages(['EPG_TimelineSchedule_RadioOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de sadece Radio kanallari gorunmelidir. Uygun kanal yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_05')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Text Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', tvRadio = 'Text Only')
            api.testImages(['EPG_TimelineSchedule_TextOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de text kanallari varsa sadece onlar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_06')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / TV Only')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', tvRadio = 'TV Only')
            api.testImages(['EPG_TimelineSchedule_TVOnly-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de tv kanallari varsa sadece onlar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_07')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', tvRadio = 'All')
            api.testImages(['EPG_TimelineSchedule_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG de butun kanallar gorunmelidir, yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_08')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Encrypted')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', freeCas = 'Encrypted')
            api.testImages(['EPG_TimelineSchedule_Encyrpted-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece Encrypted kanallar bulunmalidir. Uygun kanal yoksa "no channels match filter" uyarisi gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_09')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Free')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', freeCas = 'Free')
            api.testImages(['EPG_TimelineSchedule_Free-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece Free kanallar bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_10')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / All')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', freeCas = 'All')
            api.testImages(['EPG_TimelineSchedule_All-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir ve hem Free hem de Encrypted kanallar listede bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_11')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Numeric')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', sort = 'Numeric')
            api.testImages(['EPG_TimelineSchedule_SortNumeric-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listedeki kanallar numerik siralanmis olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_12')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Alphabetic')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', sort = 'Alphabetic')
            api.testImages(['EPG_TimelineSchedule_SortAlphabetic-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listedeki kanallar numerik siralanmis olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_13')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / SD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', hdsd = 'SD')
            api.testImages(['EPG_TimelineSchedule_SD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece SD kanallar bulunmalidir')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_14')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / HD')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', hdsd = 'HD')
            api.testImages(['EPG_TimelineSchedule_HD-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'EPG ye geri donmelidir, ve listede sadece HD kanallar bulunmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_15')
    api.setTestCaseDescription('EPG Type - Timeline - Filter / Z')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.setEPGFilter(api, networkType = 'digital cable only', fromView = 'Timeline', az = 'z')
            api.testImages(['EPG_TimelineSchedule_Z-ref', '_epgNoChannelsMatchFilter-ref'], mask = api.EPGChannelListMask, limit = 90, msg = 'Z harfi ile baslayan kanallar siralanmis olmalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_16')
    api.setTestCaseDescription('EPG Type - Timeline - Timer')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['down+1*3', 'right+1', 'ok+1', 'up+1', 'ok+1'])
            api.testImages('EPG_TimelineSchedule_EPGTimer-ref', limit = 70, msg = 'Next Event e timer kurun, timers menuden kurulan timer in olup olmadigini kontrol edin.')
            api.sendKeys(api.TIMERS)
            api.testImages('EPG_TimelineSchedule_Timers-ref', mask = api.TimerMask, limit = 70, msg = 'Next Event e timer kurun, timers menuden kurulan timer in olup olmadigini kontrol edin.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_17')
    api.setTestCaseDescription('EPG Type - Timeline - Timer Conflict')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['down+1*2', 'right+1*3', 'ok+1', 'up+1', 'ok+1*2'])
            api.testImages('EPG_TimelineSchedule_TimerConflict-ref', limit = 70, msg = 'Cakisma oldugunu gosteren sayfa acilmalidir.')
            api.sendKeys(['ok+1'] + api.TIMERS + ['down+1', 'red+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_18')
    api.setTestCaseDescription('EPG Type - Timeline - Record Next Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['right+1', 'ok+1', 'down*2+1', 'ok+10'])
            api.testImages('EPG_GuideSearch_RecordNextEvent-ref', limit = 70, msg = 'Record kurulan event EPG listesinde isaretlenmeli, zamani geldiginde record kurulan yayina gidip kayda baslamali.')
            api.sendKeys(['ok+1', 'down+1', 'ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_19')
    api.setTestCaseDescription('EPG Type - Timeline - Select Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])

            api.sendKeys(['mheg_epg+3', 'down+1*3', 'right+1', 'ok+1*2', '+10', 'info+0.8'])
            api.testImages('_ZdfNeo-ref', mask = api.infoBarMask, msg = 'Secilen kanala gitmeli')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_20')
    api.setTestCaseDescription('EPG Type - Timeline - Select Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['9+10'])
            api.testImages('EPG_Channel9-ref', msg = 'Numarasi yazilan kanali EPG de listede gostermeli. Kanala ait event bilgileri gorunmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_21')
    api.setTestCaseDescription('EPG Type - Timeline - Swap Now')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['right+1*12'])
            api.testImages('EPG_TimelineSchedule_Next4Hour-ref', msg = 'Sag yon tusu ile mevcut zaman diliminden 4 saat sonraya gidiniz')
            api.sendKeys(['previous+1'])
            api.testImages('EPG_TimelineSchedule_SwapNow-ref', limit = 70, msg = 'Sistem saatinin oldugu zaman dilimine geri donmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_22')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday Contains L')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['text+1', 'down+1*2', 'right+1*4', 'down+1', 'right+1', 'down+1', '5+1*4', 'down+1', 'ok+1'])
            api.testImages('EPG_GuideSearch_TodaySaturdayContains_L-ref', msg = 'Icerisinde -L- harfi gecen tum programlar listelenmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_23')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Children')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['text+1', 'up+1*2', 'ok+1', 'down+1*2'])
            api.testImages('EPG_GuideSearch_MatchOn_Children-ref', msg = 'Search By dan Genre yi secip, Match on dan genre secimi(Children) yapiniz ve search e basiniz.')
            api.sendKeys(['ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_ResultChildren-ref', msg = 'Secilen genre ye (Children) uygun programlar listelenmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_24')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['text+1', 'right+1', 'down+1*3', 'right+1*4', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodaySaturday-ref', msg = 'Today-Saturday arasindaki tum TV kanallarini listelemelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_25')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday-AllChannel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['text+1', 'left+1*3', 'down+1*2', 'right+1*4', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodaySaturday_AllChannel-ref', msg = 'Today-Saturday arasindaki tum kanallari ve programlari listelemelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_26')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday-AllTvChannel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['text+1', 'left+1*2', 'down+1*2', 'right+1*4', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodaySaturday_AllTvChannel-ref', msg = 'Today-Saturday arasindaki tum TV kanallarini ve programlari listelemelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_27')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday-AllRadioChannel')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['text+1', 'left+1', 'down+1*2', 'right+1*4', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodaySaturday_AllRadioChannel-ref', msg = 'Today-Saturday arasindaki tum Radio kanallarini ve programlari listelemelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_28')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Saturday-Current Channel List')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['text+1', 'down+1*2', 'right+1*4', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodaySaturday_CurrentChannelList-ref', msg = 'Today-Saturday arasindaki mevcut kanal listesindeki kanallari listelemelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_29')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Today-Tuesday-Current Channel List')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['text+1', 'down+1*2', 'left+1', 'down+1*2', 'ok+1', 'down+1*2', 'ok+1', 'down+1', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodayTuesday_CurrentChannelList-ref', msg = 'Mevcut kanal listesindeki kanallarda Today-Tuesday arasi bulunan tum programlar listelenmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_30')
    api.setTestCaseDescription('EPG Type - Timeline - Guide Search / Tuesday-Sunday-WarningScreen')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])

            api.sendKeys(['text+1', 'down+1', 'left+1', 'down+1', 'left+1*3', 'down+1*3', 'ok+5'])
            api.testImages('EPG_GuideSearch_TodayTuesday_CurrentChannelList-ref', msg = 'Arama kritlerine uyarak tekrar search yapiniz uyarisi gelmelidir.')
            api.sendKeys(['ok+1'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_31')
    api.setTestCaseDescription('EPG Type - Timeline - Timeline Schedule to Now-Next Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'red+3'])
            api.testImages('EPG_TimeLinetoNowNext-ref', msg = 'Now-Next gorunumune gecmeli, Timeline Schedule gorunumunde event leri gorunen kanallarin event bilgileri Now-Next gorunumunde de gorulmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_32')
    api.setTestCaseDescription('EPG Type - Timeline - Record Current Event')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'ok+1', 'up+1', 'ok+10', 'exit+5', 'info+0.8'])
            api.testImages('EPG_TimelineSchedule_RecordCurrentEvent-ref', mask = api.infoBarMask, msg = 'Record kurulan yayina gitmeli, record baslamali.')
            api.sendKeys(['exit2+2*2', 'mheg_epg+3'])
            if api.testImages('EPGInfoOpen-ref', recordResults = False, limit = 50) [0] :
            INDENT
                api.sendKeys(['info+1'])
            DEDENT
            api.sendKeys(['ok+1', 'down+1', 'ok+1*2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_33')
    api.setTestCaseDescription('EPG Type - Timeline - Timeline Schedule to List Schedule')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3', 'green+3'])
            api.testImages('EPG_TimeLinetoList-ref', msg = 'List Schedule gorunumune gecmeli, Timeline Schedule gorunumunde event leri gorunen kanallarin event bilgileri List Schedule gorunumunde de gorulmeli.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC04_34')
    api.setTestCaseDescription('EPG Type - Timeline - Exit EPG with Return or Back')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                doFTI_ImportChList(api, 'GERMANY')
            DEDENT
            api.sendKeys(['1+7'])
            api.sendKeys(['mheg_epg+3'])
            api.sendKeys(['back+10', 'info+0.5'])
            api.testImages('EPG_GoChannel-ref', mask = api.infoBarMask, msg = 'Mevcut kanala geri donmeli, kanalda goruntu ve ses kontrol edilmeli, bir problem olmamali.')
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (5, 0, 5), msg = 'Goruntude problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__5_tcg.py" startline="2034" endline="2072">
def EPG_TC06(api) :
INDENT
    api.setTestCaseName('EPG_TC06_01')
    api.setTestCaseDescription('EPG - Day Mode - Check 21 Days EPG Data')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.doFTI(api)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH25)
            api.sendKeys(['1008+7'])
            api.sendKeys(['mheg_epg+3'])
            for i in range(21) :
            INDENT
                api.testImages('EPG_Day_' + str(i) + '-ref')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('EPG_TC06_02')
    api.setTestCaseDescription('EPG Day Mode - Check 14 Days EPG Data')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.doFTI(api)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH26)
            api.sendKeys(['1000+7'])
            api.sendKeys(['mheg_epg+3'])
            for i in range(14) :
            INDENT
                api.testImages('EPG_Day_' + str(i) + '-ref')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="108" endline="140">
def test(api) :
INDENT
    global reportID
    try :
    INDENT
        api.activateDevices(** devConf)
        try :
        INDENT
            api.manual = Manual(1)
            print '\nMANUAL_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        if auto_getReportID or auto_readTVInfo :
        INDENT
            readTVInfo(api)
        DEDENT
        setDeviceParameters(api)
        if test_Devices :
        INDENT
            checkTestDevices(api)
        DEDENT
        if auto_getReportID :
        INDENT
            msg = 'ReportID almak icin gonderilen bilgiler:\n-------------------------------------------\n'
            for i in WebMonitor_NewTest_dict :
            INDENT
                msg += str(i) + ': ' + str(WebMonitor_NewTest_dict [i]) + '\n'
            DEDENT
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
            api.manual.getResult()
            reportID = getReportID(WebMonitor_NewTest_dict)
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; REPORTID: ' + str(reportID)])
            api.manual.getResult()
        DEDENT
        if not reportID :
        INDENT
            api.writeToLog('###### getReportID ERROR ######\n Web arayuzunden reportID alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            reportID = 0
        DEDENT
        makeTVSettingsGlobal(api)
        readyForTest(api)
        api.getTV_IP = _getTV_IP
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="141" endline="161">
def setDeviceParameters(api) :
INDENT
    try :
    INDENT
        api.setCaptureDevice(deviceSettings [0])
        if (deviceSettings [0] == 3) :
        INDENT
            tvIP = _getTV_IP(api) [0]
            api.setTvIP(tvIP)
        DEDENT
        api.setPictureAlgorithm(deviceSettings [1])
        if (deviceSettings [1] == 1) :
        INDENT
            api.setPSNRLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        elif (deviceSettings [1] == 4) :
        INDENT
            api.setSSIMLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        api.setResizeCapture(deviceSettings [2])
        api.setRotateCapture(deviceSettings [3])
        api.setAudioCaptureDevice(deviceSettings [4])
        api.setVideoAnalysisDevice(deviceSettings [5])
        api.generateTCSequence(0)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="162" endline="179">
def checkTestDevices(api) :
INDENT
    try :
    INDENT
        api.setReportId(0, testName = 'DEVICE_CONTROL')
        api.setTestCaseName('init')
        api.setTestCaseDescription('Test and Device Configuration')
        if not api.start(force = True) :
        INDENT
            try :
            INDENT
                print api.grabImage('test1')
                sleep(1)
                print api.grabImage('test2')
            DEDENT
            except :
            INDENT
                api.printError()
            DEDENT
            api.end(False)
            print 'END: init'
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="180" endline="189">
def makeTVSettingsGlobal(api) :
INDENT
    try :
    INDENT
        api.projectName = projectName.lower()
        api.UIName = UIName.lower()
        api.customerName = customerName
        api.countryName = countryName
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="190" endline="199">
def readyForTest(api) :
INDENT
    try :
    INDENT
        masterPath = os.path.join(vestaMasterPath, 'EPG', UIName.lower(), projectName.title())
        testName = testSuiteName + '_' + projectName.title() + '_' + SWVersion + '_svn' + SVNNumber
        api.setTestMasterPath(masterPath)
        api.setReportId(reportID, testName)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="200" endline="344">
def readTVInfo(api) :
INDENT
    try :
    INDENT
        global SWVersion, SVNNumber, projectName, hardwareName, UIName, countryName, customerName, WebMonitor_NewTest_dict
        _SWVersion = _SVNNumber = _projectName = _UIName = _hardwareName = ramSize = PMVersion = mbootVersion = mfcVersion = languageName = ''
        langList = {
            'dan' : 'danish', 'ger' : 'german', 'est' : 'estonian', 'eng' : 'english', 'spa' : 'spanish', 'gre' : 'greek',
            'fre' : 'french', 'gla' : 'gaelic', 'hrv' : 'croatian', 'ita' : 'italian', 'lav' : 'latvian', 'lit' : 'lithuanian',
            'hun' : 'hungarian', 'dut' : 'dutch', 'nor' : 'norwegian', 'pol' : 'polish', 'por' : 'portuguese', 'rus' : 'russian',
            'rum' : 'romanian', 'alb' : 'albanian', 'slv' : 'slovanian', 'slo' : 'slovak', 'srp' : 'serbian', 'fin' : 'finnish',
            'swe' : 'swedish', 'tur' : 'turkish', 'cze' : 'czech', 'ukr' : 'ukranian', 'bul' : 'bulgarian', 'ara' : 'arabic',
            'per' : 'persian', 'heb' : 'hebrew', 'bel' : 'belarussian', 'mac' : 'macedonian', 'mon' : 'montenegrin',
            'kaz' : 'kazakh', 'tha' : 'Thai'}
        countryList = {
            'aus' : 'australia', 'dnk' : 'denmark', 'fin' : 'finland', 'fra' : 'france', 'deu' : 'germany', 'ita' : 'italy',
            'nld' : 'netherlands', 'nor' : 'norway', 'pol' : 'poland', 'prt' : 'portugal', 'esp' : 'spain', 'swe' : 'sweden',
            'gbr' : 'united_kingdom', 'alb' : 'albania', 'aut' : 'austria', 'bel' : 'belgium', 'bgr' : 'bulgaria', 'chn' : 'china',
            'cze' : 'czech_republic', 'est' : 'estonia', 'grc' : 'greece', 'hun' : 'hungary', 'isr' : 'israel', 'lva' : 'latvia',
            'ltu' : 'lithuania', 'mkd' : 'macedonia', 'rou' : 'romania', 'rus' : 'russia', 'srb' : 'serbia', 'svk' : 'slovakia',
            'svn' : 'slovenia', 'che' : 'switzerland', 'tur' : 'turkey', 'hrv' : 'croatia', 'ice' : 'iceland', 'lux' : 'luxembourg',
            'ita' : 'san_marino', 'nzl' : 'new_zealand', 'mne' : 'montenegro', 'ukr' : 'ukraine', 'imn' : 'isle_of_man',
            'sau' : 'saudi_arabia', 'irn' : 'persia', 'are' : 'united_arab_emirates', 'kwt' : 'kuwait', 'omn' : 'oman',
            'bhr' : 'bahrain', 'qat' : 'qatar', 'blr' : 'belarussia', 'irl' : 'ireland', 'irq' : 'iraq', 'jor' : 'jordan',
            'lbn' : 'lebanon', 'ind' : 'india', 'col' : 'colombia', 'cyp' : 'cyprus', 'tha' : 'thailand', 'gha' : 'ghana',
            'egy' : 'egypt', 'lbr' : 'liberia', 'tgo' : 'togo', 'sle' : 'sierra_leone', 'civ' : 'cote_d_ivoire', 'ken' : 'kenya',
            'tza' : 'tanzania', 'moz' : 'mozambique', 'cod' : 'congo', 'sen' : 'senegal', 'nga' : 'nigeria', 'eth' : 'ethiopia',
            'zmb' : 'zambia', 'uga' : 'uganda', 'arg' : 'argentina', 'ang' : 'angola'}
        result = api.logKeywordsSearch(
            ['TV INFO', '#*project:', '#*hardware:', '#*ram:', '#*sw version:',
                '#*svn no:', '#*mboot ver:', '#*mfc ver:', '#*ip address:',
                '#*ui name:', '#*lang:', '#*country:', '#*customer:', 'Stbc ver:'],
            command = ['UART_uartexit', 'UART_GETTVINFO+0.5'], counts = 1, sTypes = 1, timeout = 2, portIndex = 0)
        print '-----------> ', result, '<-------------'
        msg = 'GETTVINFO komutuyla alinan bilgiler:\n-------------------------------------------\n'
        for i in range(len(result [0])) :
        INDENT
            msg += str(result [0] [i]) + '\n'
        DEDENT
        api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
        api.manual.getResult()
        if result [0] [0] and result [0] [0] [0].find('TV INFO') > - 1 :
        INDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                _projectName = result [0] [1] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _hardwareName = result [0] [2] [0].split(': ') [1].strip().upper().replace('NC', '')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                ramSize = result [0] [3] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _SWVersion = result [0] [4] [0].split(': ') [1].strip().replace('V.', 'v')
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _SVNNumber = result [0] [5] [0].split(': ') [1].strip()
            DEDENT
            if result [0] [6] and result [0] [6] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [6] [0].rsplit(':', 1)
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1].strip()
                    DEDENT
                    aaa [0] = aaa [0].rsplit(': ', 1) [1].split('-')
                    mbootVersion = aaa [0] [1].split(' ') [0]
                    _hardwareName = aaa [0] [0].replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [7] and result [0] [7] [0] :
            INDENT
                mfcVersion = result [0] [7] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [8] and result [0] [8] [0] :
            INDENT
                tvIP = result [0] [8] [0].split(': ') [1].strip().upper()
                api.setTvIP(tvIP)
            DEDENT
            if result [0] [9] and result [0] [9] [0] :
            INDENT
                _UIName = result [0] [9] [0].split(': ') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [10] and result [0] [10] [0] :
            INDENT
                languageName = result [0] [10] [0].split(': ') [1].strip().title()
            DEDENT
            if result [0] [11] and result [0] [11] [0] :
            INDENT
                countryName = result [0] [11] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [12] and result [0] [12] [0] :
            INDENT
                customerName = result [0] [12] [0].split(': ') [1].strip().upper()
            DEDENT
        DEDENT
        else :
        INDENT
            result = api.logKeywordsSearch(
                ['MBoot Version:', 'DDR  Size:        ', '\#\*V\.|\#\*SW_VER: V\.', '#*Build info', '#*UI name:', '_hwprofile\.bin'],
                patterns = [' MB\d{1,5}\-\d{1,6} PM ver: \d{1,6}| MB\d{1,6}NC\-\d{1,5} PM ver: \d{1,6}| MB\d{1,5}\-\d{1,6}| MB\d{1,6}NC\-\d{1,5}',
                    '\d{1,5}MB|\d{1,5}\.\d{1,5}GB', 'V\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|V\.\d{1,3}\.\d{1,3}\.\d{1,3}[a-zA-Z]', '\[ \d{1,6}\]|\[\d{1,7}\]',
                    '', ' MB\d{1,5}_hwprofile\.bin| mb\d{1,5}_hwprofile\.bin| t\d{1,5}_hwprofile\.bin| T\d{1,5}_hwprofile\.bin'],
                command = ['poweroff+5', 'poweron+10', '00+35', 'UART_aa', 'UART_GETSWVERSION+1', 'UART_aa', 'UART_BUILDINFO+1', 'UART_aa', 'UART_GETUINAME+1', 'UART_aa', 'UART_ls ../conf+1', 'UART_aa', 'UART_ls /conf+1'], counts = 1, sTypes = 1, timeout = 1, portIndex = 0)
            if result [0] [0] and result [0] [0] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [0] [0].split(': ')
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1]
                    DEDENT
                    mbootVersion = aaa [0].replace('PM ver', '').strip().split('-') [1]
                    _hardwareName = aaa [0].replace('PM ver', '').strip().split('-') [0].upper().replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                ramSize = result [0] [1] [0]
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _SWVersion = result [0] [2] [0].replace('V.', 'v')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                _SVNNumber = result [0] [3] [0].replace('[', '').replace(']', '').strip()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _UIName = result [0] [4] [0].split('#*UI name:') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _hardwareName = result [0] [5] [0].split('_') [0].upper().strip().replace('NC', '')

            DEDENT
        DEDENT
        if not projectName :
        INDENT
            projectName = _projectName
        DEDENT
        if not SWVersion :
        INDENT
            SWVersion = _SWVersion
        DEDENT
        if not SVNNumber :
        INDENT
            SVNNumber = _SVNNumber
        DEDENT
        if not UIName :
        INDENT
            UIName = _UIName
        DEDENT
        if not projectN_vs_hardwareN_dict.get(projectName.lower(), False) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a project: %s\n' % (projectName.lower()), fileName = 'ERROR')
            return
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = _hardwareName
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = projectN_vs_hardwareN_dict.get(projectName.lower(), False).upper()
            if not hardwareName :
            INDENT
                api.writeToLog('Please Update Project Hardware Dict! Since there is no hardware for project: %s\n' % (projectName.lower()), fileName = 'ERROR')
                return
            DEDENT
        DEDENT
        if not (hardwareName in projectN_vs_hardwareN_dict.get(projectName.lower(), False)) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a hardware: %s\n' % (hardwareName), fileName = 'ERROR')
            return
        DEDENT
        if not SWVersion or not SVNNumber or not UIName :
        INDENT
            api.writeToLog('###### ERROR ######\n version, SVN, UI ve hardware bilgisi alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            api.writeToLog('version: %s SVN: %s UI: %s\n' % (SWVersion, SVNNumber, UIName), fileName = 'ERROR', timestamp = False)
            return
        DEDENT
        languageName = langList.get(languageName.lower(), 'English').title()
        countryName = countryList.get(countryName.lower(), countryName).title()

        WebMonitor_NewTest_dict ['project'] = projectName
        WebMonitor_NewTest_dict ['hardware_name'] = hardwareName
        WebMonitor_NewTest_dict ['hardware'] = hardwareName + ' ' + ramSize
        WebMonitor_NewTest_dict ['version'] = SWVersion
        WebMonitor_NewTest_dict ['SVN'] = SVNNumber
        WebMonitor_NewTest_dict ['pm'] = PMVersion
        WebMonitor_NewTest_dict ['romboot'] = mbootVersion
        WebMonitor_NewTest_dict ['mfc'] = mfcVersion
        WebMonitor_NewTest_dict ['ui'] = UIName
        WebMonitor_NewTest_dict ['language'] = languageName

    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="345" endline="354">
def getReportID(data) :
INDENT
    import urllib, urllib2
    url = 'http://veargd13262/vesta2/add_test.php'
    data = urllib.urlencode(data)
    content = urllib2.urlopen(url = url, data = data).read()
    reportID = 0
    if str(content).isdigit() :
    INDENT
        reportID = int(content)
    DEDENT
    return reportID
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__1_init.py" startline="355" endline="370">
def _getTV_IP(api) :
INDENT
    try :
    INDENT
        api.TV_IP = ['']
        if api.captureDevice == 3 :
        INDENT
            for i in range(5) :
            INDENT
                result = api.logKeywordsSearch(['#*IPaddr:|#*IP|addr:'], 1, command = ['UART_aa', 'UART_get_IP_address'], sTypes = 1, patterns = ['(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'])
                api.TV_IP = eval(str(result).replace('[[]]', "''").replace("[['", "'").replace("']]", "'"))
                print 'TV IP: ' + ''.join(api.TV_IP).replace('10.108', ', 10.108') [2 :].replace('10.108', ', 10.108').replace('192.168', ', 192.168') [2 :]
                if '' in api.TV_IP :
                INDENT
                    sleep(3)
                DEDENT
                else :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
    return api.TV_IP
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__3_macro.py" startline="2" endline="31">
def test(api) :
INDENT
    try :
    INDENT
        if api.UIName in ['amazon', 'toshiba18'] :
        INDENT
            api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down+1*2', 'right+1*4', 'ok+2', 'down+1', 'gofirstitemgroup+1']
            api.MANUAL_CHANNEL_SCAN = api.INSTALL_MENU + ['down*1', 'ok+2', 'gofirstitemgroup+1', 'gofirstitem+1']
            api.IMPORT_CHANNEL_LIST = api.INSTALL_MENU + ['golastitemgroup', 'up+1*2', 'ok+40', 'clearosd+3']
            api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH25 = api.MANUAL_CHANNEL_SCAN + ['down+1', '25+10', 'ok+40']
            api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH26 = api.MANUAL_CHANNEL_SCAN + ['down+1', '26+10', 'ok+40']
            api.TIMERS = ['exit2+2*2', 'menu+2', 'down+1', 'right+1*3', 'ok+2']
        DEDENT
        else :
        INDENT
            api.INSTALL_MENU = api.SETTINGS_MENU = []
            if api.UIName == 'carbon' :
            INDENT
                api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
                api.SETTINGS_MENU = ['exit2+2*2', 'menu+2', 'right+1', 'up+1', 'ok+1', 'gofirstitemgroup+1']
            DEDENT
            if api.UIName == 'panasonic' :
            INDENT
                api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down*3', 'ok+2', 'gofirstitemgroup+1']
                api.SETTINGS_MENU = ['exit2+2*2', 'menu+2', 'down*2', 'ok+2', 'gofirstitemgroup+1']
            DEDENT
            elif api.UIName == 'titanium' :
            INDENT
                api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
                api.SETTINGS_MENU = ['exit2+2*2', 'menu+2', 'ok+5', 'right+1*2', 'ok+2', 'gofirstitemgroup+1']
            DEDENT
            api.MANUAL_CHANNEL_SCAN = api.INSTALL_MENU + ['down*1', 'ok+2', 'gofirstitemgroup+1', 'gofirstitem+1']
            api.IMPORT_CHANNEL_LIST = api.INSTALL_MENU + ['up+1*2', 'ok+20', 'clearosd+3']
            api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH25 = api.MANUAL_CHANNEL_SCAN + ['down+1', '25+10', 'ok+40']
            api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH26 = api.MANUAL_CHANNEL_SCAN + ['down+1', '26+10', 'ok+40']
            api.TIMERS = api.SETTINGS_MENU + ['down+1*3', 'ok+3']
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__2_mask.py" startline="2" endline="22">
def test(api) :
INDENT
    try :
    INDENT
        api.EPGChannelNameMask = ['EPGChannelName-mask', (1, 1, 1919, 1079), (1550, 65, 1919, 130, 1), (1, 190, 1919, 260, 1), (1, 260, 1919, 340, 1), (1, 340, 1919, 950, 1)]
        api.timeshiftInfoBar = ['timeshiftInfoBar-mask', (5, 910, 1180, 960)]
        api.TimerMask = ['Timer-mask', (110, 150, 1800, 830)]
        if api.UIName == 'carbon' or api.UIName == 'titanium' :
        INDENT
            api.timeshiftNotAvailable = ['timeshiftNotAvailable-mask', (670, 320, 1270, 615)]
            api.infoBarMask = ['infoBar-mask', (1, 840, 1919, 1079), (1, 920, 1919, 1015, 1), (1600, 860, 1760, 915, 1)]
            api.EPGChannelListMask = ['EPGChannelList-mask', (30, 200, 620, 965)]
            api.EPGFilterMask = ['EPGFilter-mask', (315, 170, 1605, 905)]
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            if projectName == 'michelangelo' :
            INDENT
                api.timeshiftNotAvailable = ['timeshiftNotAvailable-mask', (665, 405, 1280, 620)]
            DEDENT
            elif projectName == 'raphael' :
            INDENT
                api.timeshiftNotAvailable = ['timeshiftNotAvailable-mask', (550, 410, 1260, 670)]
            DEDENT
            api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1760, 850, 1910, 1075, 1)]
            api.EPGChannelListMask = ['EPGChannelList-mask', (70, 265, 545, 950)]
            api.EPGFilterMask = ['EPGFilter-mask', (400, 200, 1565, 920)]
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__4_method.py" startline="2" endline="9">
def test(api) :
INDENT
    try :
    INDENT
        api.doFTI = _doFTI
        api.doPowerCycle = _doPowerCycle
        api.setEPGFilter = _setEPGFilter
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__4_method.py" startline="10" endline="15">
def _doFTI(api, countryName = 'GERMANY') :
INDENT
    try :
    INDENT
        api.sendKeys(['STARTFTI+5', 'left+1', 'ok+50', 'SETCOUNTRY ' + countryName.upper() + '+2', 'ok+1*7'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__4_method.py" startline="16" endline="22">
def _doPowerCycle(api) :
INDENT
    try :
    INDENT
        api.sendKeys(['poweroff+15', 'poweron+45', 'RNS_0+15'])
        api.setTvIP(api.getTV_IP(api) [0])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/EPG/epg__4_method.py" startline="23" endline="94">
def _setEPGFilter(api, fromView = 'NowNext', networkType = 'Digital Aerial Only', tvRadio = 'All', freeCas = 'All', az = 'All', sort = 'Numeric', hdsd = 'All', favourites = 'None') :
INDENT
    try :
    INDENT
        fromView = fromView.lower()
        if fromView == 'nownext' or fromView == 'timeline' :
        INDENT
            api.sendKeys(['blue+2', 'gofirstitemgroup+1'])
        DEDENT
        elif fromView == 'list' :
        INDENT
            api.sendKeys(['text+2', 'gofirstitemgroup+1'])
        DEDENT
        networkType = networkType.lower()
        if networkType == 'digital cable only' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif networkType == 'satellite only' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
        DEDENT
        api.sendKeys(['down+1'])
        tvRadio = tvRadio.lower()
        if tvRadio == 'tv only' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif tvRadio == 'radio only' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1*2'])
        DEDENT
        elif tvRadio == 'text only' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
        DEDENT
        api.sendKeys(['down+1'])
        freeCas = freeCas.lower()
        if freeCas == 'free' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif freeCas == 'encrypted' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
        DEDENT
        api.sendKeys(['down+1'])
        az = az.lower()
        if az == 'a' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif az == 'b' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1*2'])
        DEDENT
        elif az == 'z' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
        DEDENT
        api.sendKeys(['down+1'])
        sort = sort.lower()
        if sort == 'alphabetic' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
        DEDENT
        api.sendKeys(['down+1'])
        hdsd = hdsd.lower()
        if hdsd == 'sd' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif hdsd == 'hd' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['gofirstitem+1'])
            api.sendKeys(['down+1'])
            favourites = favourites.lower()
        DEDENT
        if favourites == 'favourites1' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'right+1'])
        DEDENT
        elif favourites == 'favourites3' :
        INDENT
            api.sendKeys(['gofirstitem+1', 'left+1*2'])
        DEDENT
        api.testImages('currentEPGFilter-ref', mask = api.EPGFilterMask, limit = 90, msg = 'EPG filtresinin dogru oldugu gorulmelidir.')
        api.sendKeys(['exit+1'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__4_method.py" startline="2" endline="9">
def test(api) :
INDENT
    try :
    INDENT
        api.doFTI = _doFTI
        api.doPowerCycle = _doPowerCycle
        api.doStandByCycle = _doStandByCycle
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__4_method.py" startline="10" endline="15">
def _doFTI(api, countryName = 'GERMANY') :
INDENT
    try :
    INDENT
        api.sendKeys(['STARTFTI+5', '4725+1', 'left+1', 'ok+50', 'SETCOUNTRY ' + countryName.upper() + '+2', 'ok+1', 'up+0.5*5', 'gofirstitem+2', 'ok*2+1', '1+0.5*8+5', 'ok+1*5'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__4_method.py" startline="16" endline="22">
def _doPowerCycle(api) :
INDENT
    try :
    INDENT
        api.sendKeys(['poweroff+15', 'poweron+45', 'RNS_0+15'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__4_method.py" startline="23" endline="29">
def _doStandByCycle(api, offTime = 40, onTime = 40) :
INDENT
    try :
    INDENT
        api.sendKeys(['standby+' + str(offTime), 'RNS_0+' + str(onTime), 'exit2+2'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__3_macro.py" startline="2" endline="65">
def test(api) :
INDENT
    try :
    INDENT
        api.defaultParentKey = '0000'
        api.defaultParentKey_France = '1111'
        api.INSTALL_MENU = api.SETTINGS_MENU = []
        if api.UIName == 'carbon' :
        INDENT
            api.INSTALL_MENU = ['exit2+2*2', 'menu+2', 'down+1', 'ok+1', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit2+2*2', 'menu+2', 'right+1', 'up+1', 'ok+1', 'gofirstitemgroup+1']
            api.PICTURE_MENU = ['exit2+2*2', 'menu+2', 'right+1', 'ok+1', 'gofirstitemgroup+1']
            api.SOUND_MENU = ['exit2+2*2', 'menu+2', 'right+1', 'down+1', 'ok+1', 'gofirstitemgroup+1']
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down*3', 'ok+2', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit+2*2', 'menu+2', 'down*2', 'ok+2', 'gofirstitemgroup+1']
            api.PICTURE_MENU = ['exit+2*2', 'menu+2', 'ok+2', 'gofirstitemgroup+1']
            api.SOUND_MENU = ['exit+2*2', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit+2*2', 'menu+2', 'ok+5', 'right+1*2', 'ok+2', 'gofirstitemgroup+1']
            api.PICTURE_MENU = ['exit+2*2', 'menu+2', 'ok+5*2', 'gofirstitemgroup+1']
            api.SOUND_MENU = ['exit+2*2', 'menu+2', 'ok+5', 'right+1', 'ok+2', 'gofirstitemgroup+1']
        DEDENT
        api.MANUAL_CHANNEL_SCAN = api.INSTALL_MENU + ['down+0.5', 'ok+2', 'gofirstitemgroup+1', 'gofirstitem+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE = api.MANUAL_CHANNEL_SCAN + ['gofirstitem+1', 'right+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '746+2', 'down*2', '6875+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_738FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '738+2', 'down*2', '6875+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '730+2', 'down*2', '6875+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '722+2', 'down*2', '6900+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_706FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '706+2', 'down*2', '6875+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '698+2', 'down*2', '6875+10', 'ok*2+5']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_690FREG_6875SYMB = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '690+2', 'down*2', '6875+10', 'ok*2+5']
        api.PARENTAL_MENU = api.SETTINGS_MENU + ['down*2', 'ok+1']
        api.MATURITY_LOCK_PSWRD_0000 = api.PARENTAL_MENU + ['0000+1', 'down+1', 'gofirstitem+1']
        api.MATURITY_LOCK_PSWRD_1111 = api.PARENTAL_MENU + ['1111+1', 'down+1', 'gofirstitem+1']
        api.PARENTALMENU_MATURITY_PSWRD0000_OFF = api.MATURITY_LOCK_PSWRD_0000 + ['exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE4 = api.MATURITY_LOCK_PSWRD_0000 + ['right+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE10 = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*7', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE12 = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*7', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE16 = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*3', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE17 = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AGE18 = api.MATURITY_LOCK_PSWRD_0000 + ['left+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_C = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_M = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*4', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_MA = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*3', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_AV = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_R = api.MATURITY_LOCK_PSWRD_0000 + ['left+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_P = api.MATURITY_LOCK_PSWRD_0000 + ['right+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_PG = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*4', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_G = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*3', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD1111_AGE10 = api.MATURITY_LOCK_PSWRD_1111 + ['exit+5']
        api.PARENTALMENU_MATURITY_PSWRD1111_AGE12 = api.MATURITY_LOCK_PSWRD_1111 + ['right+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD1111_AGE16 = api.MATURITY_LOCK_PSWRD_1111 + ['right+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD1111_AGE18 = api.MATURITY_LOCK_PSWRD_1111 + ['left+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD1111_PARENTALAPPROVAL = api.MATURITY_LOCK_PSWRD_1111 + ['left+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE7 = api.MATURITY_LOCK_PSWRD_0000 + ['right+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE13 = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE18 = api.MATURITY_LOCK_PSWRD_0000 + ['left+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_XRATED = api.MATURITY_LOCK_PSWRD_0000 + ['left+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_YOUTH = api.MATURITY_LOCK_PSWRD_0000 + ['right+1*2', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_ADULT = api.MATURITY_LOCK_PSWRD_0000 + ['left+1', 'exit+5']
        api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_CHILDREN = api.MATURITY_LOCK_PSWRD_0000 + ['right+1', 'exit+5']
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="5" endline="13">
def init(api, country) :
INDENT
    try :
    INDENT
        global ftiCompleted
        api.doPowerCycle(api)
        api.doFTI(api, countryName = country)
        ftiCompleted = 1
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="14" endline="31">
def test(api) :
INDENT
    try :
    INDENT
        global ftiCompleted
        ftiCompleted = 0
        ParentalRating_01_01(api)
        ParentalRating_02_01(api)
        ParentalRating_03_01(api)
        ParentalRating_04_01(api)
        ParentalRating_05_01(api)
        ParentalRating_06_01(api)
        ParentalRating_07_01(api)
        ParentalRating_08_01(api)
        ParentalRating_09_01(api)
        ParentalRating_10_01(api)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="32" endline="643">
def ParentalRating_01_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_01_01')
    api.setTestCaseDescription('ParentalRating Germany Control - AgeOff')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['3+5'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (0, 0, 8), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_02')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 4')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['5+5'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE4)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_03')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 10')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['4+5'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE10)
            api.testImages('_enterPin-ref', msg = 'Audio-Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (3, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_04')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 12')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['7+5'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE12)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (0, 0, 10), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_05')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 16')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['2+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE16)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_06')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 17')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['1+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE17)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_07')
    api.setTestCaseDescription('ParentalRating Germany Control - Age 18')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_08')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Standby Off/On Scart Out Connect TV')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_09')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Standby Off/On HeadPhone')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_10')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Power Off/On Scart Out Connect TV')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_11')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Power Off/On HeadPhone')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_12')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Manuel Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+10'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18 + ['0000+10'])
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            api.sendKeys(['6+15'])
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+10'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_13')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After YouTube')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(['mybutton+20'])
            controlImage = []
            controlImage.append(api.grabImage('youTubeMainPage') [0])
            api.sendKeys(['ok+10*2', 'ok+0.5'])
            controlImage.append(api.grabImage('youTubeFirstVideoPlay') [0])
            api.showImages(controlImage, nView = 2, msg = 'Youtube uygulamasina giris yapilabilmelidir ve video oynatilabilmelidir.')
            api.sendKeys(['exit2*2+15'])
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+10'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_14')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Portal')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(['pippap+50', 'down*40', 'ok+10*3'])
            controlImage = []
            controlImage.append(api.grabImage('portalMainPage') [0])
            api.sendKeys(['exit2*2+10'])
            api.testImages('_enterPin-ref', msg = 'Kanala geri donuldugunde PIN sorgusu ekranda olmalidir. Video olmamalidir.')
            api.checkAudio(expectMatch = False, msg = 'Kanalda audio olmamalidir.')
            api.sendKeys(['pippap+50', 'blue+3', 'right+5', 'ok+40'])
            controlImage.append(api.grabImage('firstApplicationInPortal') [0])
            api.showImages(controlImage, nView = 2, msg = '1:Portal"a giris yapilabilmelidir. 2:Herhangi bir uygulama acilmalidir.')
            api.sendKeys(['exit2*2+20'])
            api.testImages('_enterPin-ref', msg = 'Kanala geri donuldugunde PIN sorgusu ekranda olmalidir. Video olmamalidir.')
            api.checkAudio(expectMatch = False, msg = 'Kanalda audio olmamalidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_15')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Wrong Password')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(['88888+1'])
            api.testImages('_wrongPin-ref', msg = '4"ten fazla digit girilmesine izin verilmemelidir. Sifrenin yanlis girildigine dair uyari mesaji vermelidir.')
            api.sendKeys(['exit2*2+5', '0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_16')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Opening Teletext')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(['text+20'])
            api.testImages('_enterPin-ref', msg = 'Teletext acilmamalidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_17')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Opening HBBTV')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(['red+20'])
            api.testImages('_enterPin-ref', msg = 'HBBTV acilmamalidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_18')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Changing TV Source')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB + ['ok+7'])
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.selectSource(source = 'EXT1')
            api.sendKeys(['exit2*2', 'aux+1'])
            api.testImages('_sourceList_Ext1-ref', msg = 'Source listesi gorunmelidir.')
            api.sendKeys(['exit2*2+8', 'info+0.5'])
            api.testImages('source_EXT1-ref', msg = 'Source degisikligi yapilabilmelidir. ( EXT1 )')
            api.sendKeys(['6+10'])
            api.testImages('_enterPin-ref', msg = 'Enter PIN sorgu ekrani cikmalidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_19')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Opening Picture/Sound Menu + EPG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.sendKeys(api.PICTURE_MENU)
            api.testImages('pictureMenu-ref', msg = 'PIN sorgu ekraninda iken Picture Menu acilabilmelidir.')
            api.sendKeys(api.SOUND_MENU)
            api.testImages('soundMenu-ref', msg = 'PIN sorgu ekraninda iken Sound Menu acilabilmelidir.')
            api.sendKeys(['exit2*2+1', 'guide+20'])
            api.testImages('_enterPin-ref', msg = 'EPG acilmamalidir.')
            api.sendKeys(['exit2*2+5'])
            api.sendKeys(['0000+10'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_20')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - Program Up/Down On Pin Screen')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_21')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Standby Search (Pin Screen)')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_22')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Standby Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_23')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - After Changing TV Source (HDMI)')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'GERMANY')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_722FREG_6900SYMB)
            DEDENT
            api.sendKeys(['6+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AGE18)
            api.selectSource(source = 'HDMI1')
            api.sendKeys(['exit2*2', 'aux+1'])
            api.testImages('source_HDMI1-ref', msg = 'Source degisikligi yapilabilmelidir.')
            api.sendKeys(['exit2*2+1', '6+15'])
            api.testImages('_enterPin-ref', msg = 'Enter PIN sorgu ekrani cikmalidir. Goruntu alinmamalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')

            api.sendKeys(['mute+2'])
            api.checkAudio(expectMatch = False, msg = 'Mute kontrolunde ses alinmamalidir.')
            api.sendKeys(['mute+2'])
            api.checkAudio(expectMatch = False, msg = 'Mute kontrolunde ses alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_24')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - System Broadcast - Changing Sources')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_25')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - System Broadcast - DVB-C/S and Analog Channels')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_01_26')
    api.setTestCaseDescription('ParentalRating Germany Control (Other) - System Broadcast - Zapping Test')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="644" endline="675">
def ParentalRating_02_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_02_01')
    api.setTestCaseDescription('ParentalRating Turkey Control - D_Smart Age')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_02_02')
    api.setTestCaseDescription('ParentalRating Turkey Control - D_Smart Subtitle')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="676" endline="1034">
def ParentalRating_03_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_03_01')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock C')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['201+5'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_C)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 30), tolerance = (8, 0, 8), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_02')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock M')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['2+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_M)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 5, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_03')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock MA')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['22+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_MA)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_04')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock AV')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['21+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_AV)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_05')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock R')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['23+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_R)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_06')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock P')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['200+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_P)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_07')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock Off')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_746FREG_6875SYMB)
            DEDENT
            api.sendKeys(['24+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_P)
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir. Pin sorgusu cikmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doPowerCycle(api)
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir. Pin sorgusu cikmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_03_08')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock PG')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_738FREG_6875SYMB)
            DEDENT
            api.sendKeys(['23+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_PG)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_03_09')
    api.setTestCaseDescription('ParentalRating Australia Control - Maturity Lock G')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'AUSTRALIA')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_738FREG_6875SYMB)
            DEDENT
            api.sendKeys(['21+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_G)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys(['0000+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys(['0000+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1035" endline="1243">
def ParentalRating_04_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_04_01')
    api.setTestCaseDescription('ParentalRating France Control - Age 18')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'FRANCE')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB)

            DEDENT
            api.sendKeys(['8+5', '17+8'])
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE18)
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_04_02')
    api.setTestCaseDescription('ParentalRating France Control - Age 10')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'FRANCE')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB)
            DEDENT
            api.sendKeys(['8+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE10)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE18)
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_04_03')
    api.setTestCaseDescription('ParentalRating France Control - Age 12')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'FRANCE')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB)
            DEDENT
            api.sendKeys(['15+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE12)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE18)
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_04_04')
    api.setTestCaseDescription('ParentalRating France Control - Age 16')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'FRANCE')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB)
            DEDENT
            api.sendKeys(['14+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE16)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE18)
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_04_05')
    api.setTestCaseDescription('ParentalRating France Control - Parental Approval')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'FRANCE')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_730FREG_6875SYMB)
            DEDENT
            api.sendKeys(['16+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_PARENTALAPPROVAL)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD1111_AGE18)
            api.sendKeys([api.defaultParentKey_France + '+2'])
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1244" endline="1403">
def ParentalRating_05_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_05_01')
    api.setTestCaseDescription('ParentalRating Spain Control - Age 13')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SPAIN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            DEDENT
            api.sendKeys(['1+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE13)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_05_02')
    api.setTestCaseDescription('ParentalRating Spain Control - Age 18')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SPAIN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            DEDENT
            api.sendKeys(['3+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE18)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_05_03')
    api.setTestCaseDescription('ParentalRating Spain Control - X-Rated')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SPAIN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            DEDENT
            api.sendKeys(['4+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_XRATED)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_05_04')
    api.setTestCaseDescription('ParentalRating Spain Control - Age 7')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SPAIN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            DEDENT
            api.sendKeys(['2+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SPAIN_AGE7)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1404" endline="1527">
def ParentalRating_06_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_06_01')
    api.setTestCaseDescription('ParentalRating Sweden Control - Youth')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SWEDEN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_690FREG_6875SYMB)
            DEDENT
            api.sendKeys(['702+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_YOUTH)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_06_02')
    api.setTestCaseDescription('ParentalRating Sweden Control - Adult')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SWEDEN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_690FREG_6875SYMB)
            DEDENT
            api.sendKeys(['153+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_ADULT)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_06_03')
    api.setTestCaseDescription('ParentalRating Sweden Control - Children')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'SWEDEN')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_690FREG_6875SYMB)
            DEDENT
            api.sendKeys(['4+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_SWEDEN_CHILDREN)
            api.testImages('_enterPin-ref', msg = 'Video kesilmelidir, Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Audio kesilmelidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.videoAnalysis(duration = (20, 0, 20), tolerance = (5, 0, 5), msg = 'Video"da bir problem olmamalidir.')
            api.checkAudio(msg = 'Audio"da bir problem olmamalidir.')
            api.doStandByCycle(api)
            api.testImages('_enterPin-ref', msg = 'Standby on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Standby on sonrasi audio alinmamalidir.')
            api.doPowerCycle(api)
            api.testImages('_enterPin-ref', msg = 'Power on sonrasi video alinmamalidir. Enter PIN sorgu ekrani cikmalidir.')
            api.checkAudio(expectMatch = False, msg = 'Power on sonrasi audio alinmamalidir.')
            api.sendKeys([api.defaultParentKey + '+2'])
            api.sendKeys(api.PARENTALMENU_MATURITY_PSWRD0000_OFF)
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1528" endline="1544">
def ParentalRating_07_01(api) :
INDENT
    api.setTestCaseName('ParentalRating_07_01')
    api.setTestCaseDescription('ParentalRating Austria Control - Default Parental Rating')
    if not api.start() :
    INDENT
        try :
        INDENT
            init(api, 'AUSTRIA')
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_738FREG_6875SYMB)
            api.sendKeys(['ok*3+2'])
            api.sendKeys(api.PARENTAL_MENU + [api.defaultParentKey + '+1'])
            api.testImages('parentalSettings-ref', mask = api.parentMaturityMask, msg = 'Ulke Austria icin default parental rating 18 gelmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1545" endline="1561">
def ParentalRating_08_01(api) :
INDENT
    api.setTestCaseName('ParentalRating_08_01')
    api.setTestCaseDescription('ParentalRating Belgium Control - Default Parental Rating')
    if not api.start() :
    INDENT
        try :
        INDENT
            init(api, 'BELGIUM')
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            api.sendKeys(['ok*3+2'])
            api.sendKeys(api.PARENTAL_MENU + [api.defaultParentKey_France + '+1'])
            api.testImages('parentalSettings-ref', mask = api.parentMaturityMask, msg = 'Ulke Belgium icin default parental rating 17 gelmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1562" endline="1599">
def ParentalRating_09_01(api) :
INDENT
    global ftiCompleted
    ftiCompleted = 0
    api.setTestCaseName('ParentalRating_09_01')
    api.setTestCaseDescription('ParentalRating UK Control - Default Parental Rating')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'UK')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_706FREG_6875SYMB)

            DEDENT
            api.sendKeys(api.PARENTAL_MENU + [api.defaultParentKey + '+1'])
            api.testImages('parentalSettings-ref', mask = api.parentMaturityMask, msg = 'Ulke UK icin parental rating uygulamasi yoktur.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    api.setTestCaseName('ParentalRating_09_02')
    api.setTestCaseDescription('ParentalRating UK Control - EPG Extended Info')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not ftiCompleted :
            INDENT
                init(api, 'UK')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_706FREG_6875SYMB)
            DEDENT
            api.sendKeys(['8+2'])
            api.sendKeys(['exit2*2+2', 'mheg_epg+5', 'info+5'])
            api.testImages('SIT8_guidance_extendedInfo-ref', mask = api.guidanceMhegEpgMask, msg = 'Extended Info"da guidance bilgisi gorulmelidir.')
            api.sendKeys(['info+5', 'exit2*2+2', '1+2', 'mheg_epg+5', 'info+5'])
            api.testImages('SIT1_guidance_extendedInfo-ref', mask = api.guidanceMhegEpgMask, msg = 'Extended Info"da guidance bilgisi olmamalidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__5_tcg.py" startline="1600" endline="1615">
def ParentalRating_10_01(api) :
INDENT
    api.setTestCaseName('ParentalRating_10_01')
    api.setTestCaseDescription('ParentalRating Italy Control - Default Parental Rating')
    if not api.start() :
    INDENT
        try :
        INDENT
            init(api, 'ITALY')
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_698FREG_6875SYMB)
            api.sendKeys(api.PARENTAL_MENU + [api.defaultParentKey_France + '+1'])
            api.testImages('parentalSettings-ref', mask = api.parentMaturityMask, msg = 'Ulke Italy icin default parental rating 18 gelmelidir.')
            api.sendKeys(['exit2*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="105" endline="137">
def test(api) :
INDENT
    global reportID
    try :
    INDENT
        api.activateDevices(** devConf)
        try :
        INDENT
            api.manual = Manual(1)
            print '\nMANUAL_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        if auto_getReportID or auto_readTVInfo :
        INDENT
            readTVInfo(api)
        DEDENT
        setDeviceParameters(api)
        if test_Devices :
        INDENT
            checkTestDevices(api)
        DEDENT
        if auto_getReportID :
        INDENT
            msg = 'ReportID almak icin gonderilen bilgiler:\n-------------------------------------------\n'
            for i in WebMonitor_NewTest_dict :
            INDENT
                msg += str(i) + ': ' + str(WebMonitor_NewTest_dict [i]) + '\n'
            DEDENT
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
            api.manual.getResult()
            reportID = getReportID(WebMonitor_NewTest_dict)
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; REPORTID: ' + str(reportID)])
            api.manual.getResult()
        DEDENT
        if not reportID :
        INDENT
            api.writeToLog('###### getReportID ERROR ######\n Web arayuzunden reportID alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            reportID = 0
        DEDENT
        makeTVSettingsGlobal(api)
        readyForTest(api)
        api.getTV_IP = _getTV_IP
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="138" endline="158">
def setDeviceParameters(api) :
INDENT
    try :
    INDENT
        api.setCaptureDevice(deviceSettings [0])
        if (deviceSettings [0] == 3) :
        INDENT
            tvIP = _getTV_IP(api) [0]
            api.setTvIP(tvIP)
        DEDENT
        api.setPictureAlgorithm(deviceSettings [1])
        if (deviceSettings [1] == 1) :
        INDENT
            api.setPSNRLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        elif (deviceSettings [1] == 4) :
        INDENT
            api.setSSIMLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        api.setResizeCapture(deviceSettings [2])
        api.setRotateCapture(deviceSettings [3])
        api.setAudioCaptureDevice(deviceSettings [4])
        api.setVideoAnalysisDevice(deviceSettings [5])
        api.generateTCSequence(0)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="159" endline="176">
def checkTestDevices(api) :
INDENT
    try :
    INDENT
        api.setReportId(0, testName = 'DEVICE_CONTROL')
        api.setTestCaseName('init')
        api.setTestCaseDescription('Test and Device Configuration')
        if not api.start(force = True) :
        INDENT
            try :
            INDENT
                print api.grabImage('test1')
                sleep(1)
                print api.grabImage('test2')
            DEDENT
            except :
            INDENT
                api.printError()
            DEDENT
            api.end(False)
            print 'END: init'
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="177" endline="186">
def makeTVSettingsGlobal(api) :
INDENT
    try :
    INDENT
        api.projectName = projectName.lower()
        api.UIName = UIName.lower()
        api.customerName = customerName
        api.countryName = countryName
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="187" endline="196">
def readyForTest(api) :
INDENT
    try :
    INDENT
        masterPath = os.path.join(vestaMasterPath, 'ParentalRating', UIName.lower(), projectName.title())
        testName = testSuiteName + '_' + projectName.title() + '_' + SWVersion + '_svn' + SVNNumber
        api.setTestMasterPath(masterPath)
        api.setReportId(reportID, testName)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="197" endline="341">
def readTVInfo(api) :
INDENT
    try :
    INDENT
        global SWVersion, SVNNumber, projectName, hardwareName, UIName, countryName, customerName, WebMonitor_NewTest_dict
        _SWVersion = _SVNNumber = _projectName = _UIName = _hardwareName = ramSize = PMVersion = mbootVersion = mfcVersion = languageName = ''
        langList = {
            'dan' : 'danish', 'ger' : 'german', 'est' : 'estonian', 'eng' : 'english', 'spa' : 'spanish', 'gre' : 'greek',
            'fre' : 'french', 'gla' : 'gaelic', 'hrv' : 'croatian', 'ita' : 'italian', 'lav' : 'latvian', 'lit' : 'lithuanian',
            'hun' : 'hungarian', 'dut' : 'dutch', 'nor' : 'norwegian', 'pol' : 'polish', 'por' : 'portuguese', 'rus' : 'russian',
            'rum' : 'romanian', 'alb' : 'albanian', 'slv' : 'slovanian', 'slo' : 'slovak', 'srp' : 'serbian', 'fin' : 'finnish',
            'swe' : 'swedish', 'tur' : 'turkish', 'cze' : 'czech', 'ukr' : 'ukranian', 'bul' : 'bulgarian', 'ara' : 'arabic',
            'per' : 'persian', 'heb' : 'hebrew', 'bel' : 'belarussian', 'mac' : 'macedonian', 'mon' : 'montenegrin',
            'kaz' : 'kazakh', 'tha' : 'Thai'}
        countryList = {
            'aus' : 'australia', 'dnk' : 'denmark', 'fin' : 'finland', 'fra' : 'france', 'deu' : 'germany', 'ita' : 'italy',
            'nld' : 'netherlands', 'nor' : 'norway', 'pol' : 'poland', 'prt' : 'portugal', 'esp' : 'spain', 'swe' : 'sweden',
            'gbr' : 'united_kingdom', 'alb' : 'albania', 'aut' : 'austria', 'bel' : 'belgium', 'bgr' : 'bulgaria', 'chn' : 'china',
            'cze' : 'czech_republic', 'est' : 'estonia', 'grc' : 'greece', 'hun' : 'hungary', 'isr' : 'israel', 'lva' : 'latvia',
            'ltu' : 'lithuania', 'mkd' : 'macedonia', 'rou' : 'romania', 'rus' : 'russia', 'srb' : 'serbia', 'svk' : 'slovakia',
            'svn' : 'slovenia', 'che' : 'switzerland', 'tur' : 'turkey', 'hrv' : 'croatia', 'ice' : 'iceland', 'lux' : 'luxembourg',
            'ita' : 'san_marino', 'nzl' : 'new_zealand', 'mne' : 'montenegro', 'ukr' : 'ukraine', 'imn' : 'isle_of_man',
            'sau' : 'saudi_arabia', 'irn' : 'persia', 'are' : 'united_arab_emirates', 'kwt' : 'kuwait', 'omn' : 'oman',
            'bhr' : 'bahrain', 'qat' : 'qatar', 'blr' : 'belarussia', 'irl' : 'ireland', 'irq' : 'iraq', 'jor' : 'jordan',
            'lbn' : 'lebanon', 'ind' : 'india', 'col' : 'colombia', 'cyp' : 'cyprus', 'tha' : 'thailand', 'gha' : 'ghana',
            'egy' : 'egypt', 'lbr' : 'liberia', 'tgo' : 'togo', 'sle' : 'sierra_leone', 'civ' : 'cote_d_ivoire', 'ken' : 'kenya',
            'tza' : 'tanzania', 'moz' : 'mozambique', 'cod' : 'congo', 'sen' : 'senegal', 'nga' : 'nigeria', 'eth' : 'ethiopia',
            'zmb' : 'zambia', 'uga' : 'uganda', 'arg' : 'argentina', 'ang' : 'angola'}
        result = api.logKeywordsSearch(
            ['TV INFO', '#*project:', '#*hardware:', '#*ram:', '#*sw version:',
                '#*svn no:', '#*mboot ver:', '#*mfc ver:', '#*ip address:',
                '#*ui name:', '#*lang:', '#*country:', '#*customer:', 'Stbc ver:'],
            command = ['UART_uartexit', 'UART_GETTVINFO+0.5'], counts = 1, sTypes = 1, timeout = 2, portIndex = 0)
        print '-----------> ', result, '<-------------'
        msg = 'GETTVINFO komutuyla alinan bilgiler:\n-------------------------------------------\n'
        for i in range(len(result [0])) :
        INDENT
            msg += str(result [0] [i]) + '\n'
        DEDENT
        api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
        api.manual.getResult()
        if result [0] [0] and result [0] [0] [0].find('TV INFO') > - 1 :
        INDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                _projectName = result [0] [1] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _hardwareName = result [0] [2] [0].split(': ') [1].strip().upper().replace('NC', '')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                ramSize = result [0] [3] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _SWVersion = result [0] [4] [0].split(': ') [1].strip().replace('V.', 'v')
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _SVNNumber = result [0] [5] [0].split(': ') [1].strip()
            DEDENT
            if result [0] [6] and result [0] [6] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [6] [0].rsplit(':', 1)
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1].strip()
                    DEDENT
                    aaa [0] = aaa [0].rsplit(': ', 1) [1].split('-')
                    mbootVersion = aaa [0] [1].split(' ') [0]
                    _hardwareName = aaa [0] [0].replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [7] and result [0] [7] [0] :
            INDENT
                mfcVersion = result [0] [7] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [8] and result [0] [8] [0] :
            INDENT
                tvIP = result [0] [8] [0].split(': ') [1].strip().upper()
                api.setTvIP(tvIP)
            DEDENT
            if result [0] [9] and result [0] [9] [0] :
            INDENT
                _UIName = result [0] [9] [0].split(': ') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [10] and result [0] [10] [0] :
            INDENT
                languageName = result [0] [10] [0].split(': ') [1].strip().title()
            DEDENT
            if result [0] [11] and result [0] [11] [0] :
            INDENT
                countryName = result [0] [11] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [12] and result [0] [12] [0] :
            INDENT
                customerName = result [0] [12] [0].split(': ') [1].strip().upper()
            DEDENT
        DEDENT
        else :
        INDENT
            result = api.logKeywordsSearch(
                ['MBoot Version:', 'DDR  Size:        ', '\#\*V\.|\#\*SW_VER: V\.', '#*Build info', '#*UI name:', '_hwprofile\.bin'],
                patterns = [' MB\d{1,5}\-\d{1,6} PM ver: \d{1,6}| MB\d{1,6}NC\-\d{1,5} PM ver: \d{1,6}| MB\d{1,5}\-\d{1,6}| MB\d{1,6}NC\-\d{1,5}',
                    '\d{1,5}MB|\d{1,5}\.\d{1,5}GB', 'V\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|V\.\d{1,3}\.\d{1,3}\.\d{1,3}[a-zA-Z]', '\[ \d{1,6}\]|\[\d{1,7}\]',
                    '', ' MB\d{1,5}_hwprofile\.bin| mb\d{1,5}_hwprofile\.bin| t\d{1,5}_hwprofile\.bin| T\d{1,5}_hwprofile\.bin'],
                command = ['poweroff+5', 'poweron+10', '00+35', 'UART_aa', 'UART_GETSWVERSION+1', 'UART_aa', 'UART_BUILDINFO+1', 'UART_aa', 'UART_GETUINAME+1', 'UART_aa', 'UART_ls ../conf+1', 'UART_aa', 'UART_ls /conf+1'], counts = 1, sTypes = 1, timeout = 1, portIndex = 0)
            if result [0] [0] and result [0] [0] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [0] [0].split(': ')
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1]
                    DEDENT
                    mbootVersion = aaa [0].replace('PM ver', '').strip().split('-') [1]
                    _hardwareName = aaa [0].replace('PM ver', '').strip().split('-') [0].upper().replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                ramSize = result [0] [1] [0]
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _SWVersion = result [0] [2] [0].replace('V.', 'v')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                _SVNNumber = result [0] [3] [0].replace('[', '').replace(']', '').strip()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _UIName = result [0] [4] [0].split('#*UI name:') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _hardwareName = result [0] [5] [0].split('_') [0].upper().strip().replace('NC', '')

            DEDENT
        DEDENT
        if not projectName :
        INDENT
            projectName = _projectName
        DEDENT
        if not SWVersion :
        INDENT
            SWVersion = _SWVersion
        DEDENT
        if not SVNNumber :
        INDENT
            SVNNumber = _SVNNumber
        DEDENT
        if not UIName :
        INDENT
            UIName = _UIName
        DEDENT
        if not projectN_vs_hardwareN_dict.get(projectName.lower(), False) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a project: %s\n' % (projectName.lower()), fileName = 'ERROR')
            return
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = _hardwareName
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = projectN_vs_hardwareN_dict.get(projectName.lower(), False).upper()
            if not hardwareName :
            INDENT
                api.writeToLog('Please Update Project Hardware Dict! Since there is no hardware for project: %s\n' % (projectName.lower()), fileName = 'ERROR')
                return
            DEDENT
        DEDENT
        if not (hardwareName in projectN_vs_hardwareN_dict.get(projectName.lower(), False)) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a hardware: %s\n' % (hardwareName), fileName = 'ERROR')
            return
        DEDENT
        if not SWVersion or not SVNNumber or not UIName :
        INDENT
            api.writeToLog('###### ERROR ######\n version, SVN, UI ve hardware bilgisi alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            api.writeToLog('version: %s SVN: %s UI: %s\n' % (SWVersion, SVNNumber, UIName), fileName = 'ERROR', timestamp = False)
            return
        DEDENT
        languageName = langList.get(languageName.lower(), 'English').title()
        countryName = countryList.get(countryName.lower(), countryName).title()

        WebMonitor_NewTest_dict ['project'] = projectName
        WebMonitor_NewTest_dict ['hardware_name'] = hardwareName
        WebMonitor_NewTest_dict ['hardware'] = hardwareName + ' ' + ramSize
        WebMonitor_NewTest_dict ['version'] = SWVersion
        WebMonitor_NewTest_dict ['SVN'] = SVNNumber
        WebMonitor_NewTest_dict ['pm'] = PMVersion
        WebMonitor_NewTest_dict ['romboot'] = mbootVersion
        WebMonitor_NewTest_dict ['mfc'] = mfcVersion
        WebMonitor_NewTest_dict ['ui'] = UIName
        WebMonitor_NewTest_dict ['language'] = languageName

    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="342" endline="351">
def getReportID(data) :
INDENT
    import urllib, urllib2
    url = 'http://veargd13262/vesta2/add_test.php'
    data = urllib.urlencode(data)
    content = urllib2.urlopen(url = url, data = data).read()
    reportID = 0
    if str(content).isdigit() :
    INDENT
        reportID = int(content)
    DEDENT
    return reportID
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__1_init.py" startline="352" endline="367">
def _getTV_IP(api) :
INDENT
    try :
    INDENT
        api.TV_IP = ['']
        if api.captureDevice == 3 :
        INDENT
            for i in range(5) :
            INDENT
                result = api.logKeywordsSearch(['#*IPaddr:|#*IP|addr:'], 1, command = ['UART_aa', 'UART_get_IP_address'], sTypes = 1, patterns = ['(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'])
                api.TV_IP = eval(str(result).replace('[[]]', "''").replace("[['", "'").replace("']]", "'"))
                print 'TV IP: ' + ''.join(api.TV_IP).replace('10.108', ', 10.108') [2 :].replace('10.108', ', 10.108').replace('192.168', ', 192.168') [2 :]
                if '' in api.TV_IP :
                INDENT
                    sleep(3)
                DEDENT
                else :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
    return api.TV_IP
DEDENT
</source>
<source file="systems/Vestel-Code/Parental Rating/pr__2_mask.py" startline="2" endline="15">
def test(api) :
INDENT
    try :
    INDENT
        if api.UIName == 'carbon' :
        INDENT
            api.parentMaturityMask = ['parentMaturity-mask', (30, 380, 1070, 440)]
            api.guidanceMhegEpgMask = ['guidanceMhegEpg-mask', (60, 245, 950, 290)]
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            api.parentMaturityMask = ['parentMaturity-mask', (20, 320, 1040, 385)]
            api.guidanceMhegEpgMask = ['guidanceMhegEpg-mask', (670, 400, 1250, 680)]
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            api.parentMaturityMask = ['parentMaturity-mask', (0, 365, 490, 425)]
            api.guidanceMhegEpgMask = ['guidanceMhegEpg-mask', (50, 230, 430, 280)]
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__4_stream.py" startline="2" endline="13">
def test(api) :
INDENT
    try :
    INDENT
        api.DVBS_10750_27500 = ['InputFile; D:/Streams/Teletext/TRT_TXT_221205_0932_12_05.trp', 'Frequency; 1000', 'BitRate; 38014706', 'ModulationType; DVBS', 'Constellation; QPSK', 'ConvolutionalRate; 3/4', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBS_10750_27500_TurkGreek = ['InputFile; D:/Streams/Teletext/larissa_tp53_txt_problem_1min_06_06.ts', 'Frequency; 1000', 'BitRate; 38014706', 'ModulationType; DVBS', 'Constellation; QPSK', 'ConvolutionalRate; 3/4', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBS_10750_27500_East = ['InputFile; D:/Streams/Teletext/hp_tronic_MUX1_3min_dvbc.ts', 'Frequency; 1000', 'BitRate; 38014706', 'ModulationType; DVBS', 'Constellation; QPSK', 'ConvolutionalRate; 3/4', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBS_10750_27500_Cyrillic = ['InputFile; D:/Streams/Teletext/CH30-DVB-T2-LONG-MOSCOW-DVBT.mpg', 'Frequency; 1000', 'BitRate; 38014706', 'ModulationType; DVBS', 'Constellation; QPSK', 'ConvolutionalRate; 3/4', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBS_10750_27500_Arabic = ['InputFile; D:/Streams/Teletext/ch37-1.ts', 'Frequency; 1000', 'BitRate; 38014706', 'ModulationType; DVBS', 'Constellation; QPSK', 'ConvolutionalRate; 3/4', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBT_698Mhz_CH49_Spanish = ['InputFile; D:/Streams/Teletext/20160309_570MHz_TV3HD.ts', 'ModulationType; DVBT', 'Frequency; 698', 'BitRate; 31668449', 'TransmissionMode; 8K', 'Constellation; QAM64', 'ConvolutionalRate; 3/4', 'GuardInterval; 1/32', 'Bandwidth; 8MHz', 'remultiplex; 1', 'ignore_stop; 1']
        api.DVBT_474Mhz_CH21_West = ['InputFile; D:/Streams/Teletext/MHz._ses senkron_undifened.ts', 'ModulationType; DVBT', 'Frequency; 474', 'BitRate; 31668449', 'TransmissionMode; 8K', 'Constellation; QAM64', 'ConvolutionalRate; 7/8', 'GuardInterval; 1/32', 'Bandwidth; 8MHz', 'remultiplex; 1', 'ignore_stop; 1']
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__5_method.py" startline="3" endline="10">
def test(api) :
INDENT
    try :
    INDENT
        api.doPowerCycle = _doPowerCycle
        api.plugInOutRFCable = _plugInOutRFCable
        api.stopPlayStream = _stopPlayStream
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__5_method.py" startline="11" endline="17">
def _doPowerCycle(api) :
INDENT
    try :
    INDENT
        api.sendKeys(['poweroff+15', 'poweron+45', 'RNS_0+15'])
        api.setTvIP(api.getTV_IP(api) [0])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__5_method.py" startline="18" endline="28">
def _plugInOutRFCable(api, plugIn = True) :
INDENT
    try :
    INDENT
        if plugIn :
        INDENT
            api.dta.sendCommands(commandL = ['Play; 1'], devnum = 0)
        DEDENT
        else :
        INDENT
            api.dta.sendCommands(commandL = ['Stop; 0'], devnum = 0)
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__5_method.py" startline="29" endline="42">
def _stopPlayStream(api, streamDevice = 'StreamPlayer', macro = [], delay = 1) :
INDENT
    try :
    INDENT
        if streamDevice == 'StreamPlayer' :
        INDENT
            api.dta107S.sendCommands(commandL = ['Stop; 0'], devnum = 0)
            api.dta107S.sendCommands(commandL = macro, devnum = 0)
            api.dta107S.sendCommands(commandL = ['Play; 1'], devnum = 0)
        DEDENT
        elif streamDevice == 'StreamPlayer2' :
        INDENT
            api.dta.sendCommands(commandL = ['Stop; 0'], devnum = 0)
            api.dta.sendCommands(commandL = macro, devnum = 0)
            api.dta.sendCommands(commandL = ['Play; 1'], devnum = 0)
        DEDENT
        sleep(delay)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="5" endline="49">
def test(api) :
INDENT
    Teletext_001_001_000_new(api)
    Teletext_001_001_001(api)
    Teletext_001_001_002(api)
    Teletext_001_001_003(api)
    Teletext_001_001_004(api)
    Teletext_001_001_005(api)
    Teletext_001_001_006(api)
    Teletext_001_001_007(api)
    Teletext_001_001_008(api)
    Teletext_001_001_009(api)
    Teletext_001_002_001(api)
    Teletext_001_002_002(api)
    Teletext_001_002_003(api)
    Teletext_001_002_004(api)
    Teletext_001_002_005(api)
    Teletext_001_002_006(api)
    Teletext_001_003_001(api)
    Teletext_001_003_002(api)
    Teletext_001_003_003(api)
    Teletext_001_003_005(api)
    Teletext_001_003_006(api)
    Teletext_001_003_007(api)
    Teletext_001_003_008(api)
    Teletext_001_004_001(api)
    Teletext_001_005_001(api)
    Teletext_001_005_002(api)
    Teletext_001_005_003(api)
    Teletext_001_005_004(api)
    Teletext_001_005_005(api)
    Teletext_002_001_001(api)
    Teletext_002_001_002(api)
    Teletext_003_001_001(api)
    Teletext_003_001_002(api)
    Teletext_003_001_003(api)
    Teletext_003_001_004(api)
    Teletext_003_001_005(api)
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="50" endline="76">
def Teletext_001_001_000_new(api) :
INDENT
    resultArray = api.getTestCaseResult(tcID = range(1, 11))
    runPreConditions = 'FAIL' in resultArray or 'INCONCLUSIVE' in resultArray or 'SEMIAUTO' in resultArray or len(resultArray) == 0
    if runPreConditions :
    INDENT
        api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
        api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500)
        api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)
        chnNo = api.getChannelNumber(api.usingChannelName, 0)
        api.sendKeys([str(chnNo) + '+10'])
    DEDENT
    api.setTestCaseName('Teletext_001_001_000_new')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri (Yeni)')
    if not api.start() :
    INDENT
        try :
        INDENT
            chnNo = api.getChannelNumber(api.usingChannelName, 0)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chnNo) + '+10', 'text+3', '100+3'])
                api.grabImage('controlTime_', count = 4, delay = 30, nView = 4, msg = 'Saatin guncellendigini kontrol ediniz. Resimler 30 saniye ara ile cekilmistir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="77" endline="91">
def Teletext_001_001_001(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_001')
    api.setTestCaseDescription('DVB-S Teletext kontrolleri 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+3', 'up+3*10'])
            api.testImages('TRT1HD_Teletext_Page_111-ref', mask = api.txtMask, msg = 'Ilgili page"e geldiginde page sorunsuz acilmali, karakterlerde problem olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="92" endline="106">
def Teletext_001_001_002(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_002')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+3', 'down+1*10'])
            api.testImages('TRT1HD_Teletext_Page_594-ref', mask = api.txtMask, msg = '(Page 594) Ilgili page"e geldiginde page sorunsuz acilmali, karakterlerde problem olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="107" endline="121">
def Teletext_001_001_003(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_003')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 3')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '250+3'])
            api.testImages('TRT1HD_Teletext_Page_250-ref', mask = api.txtMask, msg = '(Page 250) Ilgili page"e geldiginde page sorunsuz acilmali, karakterlerde problem olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="122" endline="135">
def Teletext_001_001_004(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_004')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 4')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '888+3'])
            api.grabImage('controlSearch_', count = 4, delay = 10, nView = 4, msg = 'Bulamayan sayfa icin surekli arayacak. Arama yapildigini kontrol ediniz.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="136" endline="157">
def Teletext_001_001_005(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_005')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 5')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+5', 'red+5'])
            api.testImages('TRT_Teletext_Gundem_red-ref', mask = api.txtMask, msg = 'Kirmizi, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['100+5', 'blue+5'])
            api.testImages('TRT_Teletext_Ekonomi_blue-ref', mask = api.txtMask, msg = 'Mavi, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['100+5', 'yellow+5'])
            api.testImages('TRT_Teletext_HavaYol_green-ref', mask = api.txtMask, msg = 'Sari, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['100+5', 'green+5'])
            api.testImages('TRT_Teletext_Spor_yellow-ref', mask = api.txtMask, msg = 'Yesil, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="158" endline="187">
def Teletext_001_001_006(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_006')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 6')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+5', 'right+1', 'left+1'])
            controlImage = []
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_IndexPage')
            api.sendKeys(['right+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Right_1')
            api.sendKeys(['right+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Right_2')
            api.sendKeys(['right+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Right_3')
            api.sendKeys(['left+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Left_1')
            api.sendKeys(['left+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Left_2')
            api.sendKeys(['left+1'])
            controlImage += api.grabImage('TRT_Teletext_SubPageControl_Left_3')
            api.showImages(controlImage, nView = 7, msg = 'Subpage"ler arasi dolasimda bir problem olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="188" endline="204">
def Teletext_001_001_007(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_007')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 7')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+5', 'progup+3*2'])
            api.sendKeys(['text+5'])
            api.grabImage('TRT_MixTeletext', nView = 1, msg = 'Mix teletext acilmalidir, teletext bilgisi arkaplanda kanalin goruntusu uzerine basilmalidir.')
            api.sendKeys(['text+3'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="205" endline="216">
def Teletext_001_001_008(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_008')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 8')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5*3', 'info+1'])
            api.testImages('TRT_InfoBar-ref', mask = api.infoBarMask, msg = 'Teletextten cikip mevcut kanal geri donmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="217" endline="237">
def Teletext_001_001_009(api) :
INDENT
    api.setTestCaseName('Teletext_001_001_009')
    api.setTestCaseDescription('DVB-S Teletext Kontrolleri 9')
    if not api.start() :
    INDENT
        try :
        INDENT
            chnNo = api.getChannelNumber(api.usingChannelName, 0, getList = False)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chnNo) + '+3', 'progup+3*10', 'progdown+3*10'])
                api.sendKeys(['+10', 'text+15'])
                api.testImages('TRT_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Teletext index sayfasi acilmalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="238" endline="263">
def Teletext_001_002_001(api) :
INDENT
    api.setTestCaseName('Teletext_001_002_001')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500_TurkGreek)
            api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)
            chnNo = api.getChannelNumber(api.usingChannelName2, 0)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_TURKGRE_DVBT + ['progup+3', 'progdown+3'])
                api.sendKeys(['+10', 'text+10', '105+10'])
                api.testImages('CINE_Teletext_Page_105-ref', mask = api.txtMask, msg = 'Teletext acilmali ve eksik ya da bozuk karakter olmamalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="264" endline="289">
def Teletext_001_002_002(api) :
INDENT
    api.setTestCaseName('Teletext_001_002_002')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500)
            api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)
            chnNo = api.getChannelNumber(api.usingChannelName, 0)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chnNo) + '+5'] + api.LANGUAGESETTING_TXT_TURKGRE_DVBT)
                api.sendKeys(['+20', 'text+10', '101+5'])
                api.testImages('TRT_Teletext_Page_101-ref', mask = api.txtMask, msg = 'Teletext sayfasinda eksik ya da bozuk karakter olmamalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="290" endline="314">
def Teletext_001_002_003(api) :
INDENT
    api.setTestCaseName('Teletext_001_002_003')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 3')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500_East)
            api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)
            chnNo = api.getChannelNumber('CT1', 0)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_EAST_DVBT + [str(chnNo) + '+5', 'progup+5', 'progdown+15', 'text+10', '898+5'])
                api.testImages('CT1_Teletext_Page_898-ref', mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir.')
                api.doPowerCycle(api)
                api.sendKeys(['text+5', '898+15'])
                api.testImages('CT1_Teletext_AfterPowerCycle_Page_898-ref', mask = api.txtMask, msg = 'Power off/on sonrasi teletextde eksik ya da bozuk karakter olmamalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="315" endline="334">
def Teletext_001_002_004(api) :
INDENT
    api.setTestCaseName('Teletext_001_002_004')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 4')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500_Cyrillic)
            api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)

            api.sendKeys(api.LANGUAGESETTING_TXT_CYRILLIC_DVBT + ['progup+5', 'progdown+5', 'text+60', '120+5'])
            api.testImages('NrtbinKahan_Teletext_Page_120-ref', mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="335" endline="358">
def Teletext_001_002_005(api) :
INDENT
    api.setTestCaseName('Teletext_001_002_005')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 5')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer', api.DVBS_10750_27500_Arabic)
            api.sendKeys(api.MANUAL_CH_SCAN_SAT_10750FREG)
            chnNo = api.getChannelNumber('IRIB-TV2', 0)
            if chnNo == 0 :
            INDENT
                print ('Channel not found!')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_ARABIC_DVBT + ['progup+5', 'progdown+5', str(chnNo) + '+15', 'text+60', '100+10'])
                api.testImages('IRIBTV2_Teletext_Page_120-ref', mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="359" endline="383">
def Teletext_001_002_006(api) :
INDENT
    resultArray = api.getTestCaseResult(tcID = range(16, 24))
    runPreConditions = 'FAIL' in resultArray or 'INCONCLUSIVE' in resultArray or 'SEMIAUTO' in resultArray or len(resultArray) == 0
    if runPreConditions :
    INDENT
        api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
        api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
        api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21)
        chnNo = api.getChannelNumber(api.usingChannelName3, 0)
        api.sendKeys([str(chnNo) + '+10'])
    DEDENT
    api.setTestCaseName('Teletext_001_002_006')
    api.setTestCaseDescription('Teletext Language Karakter Kontrolleri 6')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.LANGUAGESETTING_TXT + ['progup+3', 'progdown+15', 'text+10', '105+5'])
            api.testImages('TF1_Teletext_Page_105-ref', mask = api.txtMask, msg = '(Page 105)Eksik ya da bozuk karakter olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="384" endline="398">
def Teletext_001_003_001(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_001')
    api.setTestCaseDescription('DVB-T Teletext Kontrolleri 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+10', '100+5', 'progup+3*10'])
            api.testImages(['TF1_Teletext_Page_110-ref', 'TF1_Teletext_Page_110_2-ref'], mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="399" endline="420">
def Teletext_001_003_002(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_002')
    api.setTestCaseDescription('DVB-T Teletext kontrolleri 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21)
            chnNo = api.getChannelNumber(api.usingChannelName3, 0)
            api.sendKeys([str(chnNo) + '+10'])
            api.sendKeys(['text+10', '100+5', 'progdown+3*10'])
            masterImages = ['TF1_Teletext_Page_608_1-ref', 'TF1_Teletext_Page_608_2-ref', 'TF1_Teletext_Page_608_3-ref', 'TF1_Teletext_Page_608_4-ref']
            api.testImages(masterImages, mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir. Teletext data icerigi degisti ise kontrol ediniz.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="421" endline="437">
def Teletext_001_003_003(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_003')
    api.setTestCaseDescription('DVB-T Teletext Kontrolleri 3')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+10', '615+5'])
            api.testImages('TF1_Teletext_Page_615-ref', mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir. Teletext data icerigi degisti ise kontrol ediniz.')
            api.sendKeys(['750+5'])
            api.grabImage('controlSearch_', count = 4, delay = 10, nView = 4, msg = 'Bulamayan sayfa icin surekli arayacak. Arama yapildigini kontrol ediniz.')
            api.sendKeys(['text+3*2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="438" endline="459">
def Teletext_001_003_005(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_005')
    api.setTestCaseDescription('DVB-T Teletext Kontrolleri 5')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '105+5', 'red+5'])
            api.testImages('TF1_Teletext_104_red-ref', mask = api.txtPageNoMask, msg = 'Kirmizi, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['blue+5'])
            api.testImages('TF1_Teletext_200_blue-ref', mask = api.txtPageNoMask, msg = 'Mavi, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['yellow+5'])
            api.testImages('TF1_Teletext_210_yellow-ref', mask = api.txtPageNoMask, msg = 'Sari, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['green+5'])
            api.testImages('TF1_Teletext_213_green-ref', mask = api.txtPageNoMask, msg = 'Yesil, renk tuslarina atanmis fonksiyonlar o tuslara basildiginda problemsiz bir sekilde calismalidir.')
            api.sendKeys(['text+3*2+5'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="460" endline="484">
def Teletext_001_003_006(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_006')
    api.setTestCaseDescription('DVB-T Teletext kontrolleri 6')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+5', 'right+1', 'left+1'])
            api.sendKeys(['right+1'])
            controlImage = []
            controlImage += api.grabImage('PIC_right_1')
            api.sendKeys(['right+1'])
            controlImage += api.grabImage('PIC_right_2')
            api.sendKeys(['left+1'])
            controlImage += api.grabImage('PIC_left_1')
            api.sendKeys(['left+1'])
            controlImage += api.grabImage('PIC_left_2')
            api.showImages(controlImage, nView = 4, msg = 'Subpage"ler arasi dolasimda bir problem olmamalidir.')
            api.sendKeys(['text+3*2+3'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="485" endline="501">
def Teletext_001_003_007(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_007')
    api.setTestCaseDescription('DVB-T Teletext Kontrolleri 7')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['text+5', '100+5', 'progup+3*3'])
            api.sendKeys(['text+5'])
            api.grabImage('TF1_MixTeletext', nView = 1, msg = 'Mix teletext acilmalidir, teletext bilgisi arkaplanda kanalin goruntusu uzerine basilmalidir.')
            api.sendKeys(['text+3'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="502" endline="518">
def Teletext_001_003_008(api) :
INDENT
    api.setTestCaseName('Teletext_001_003_008')
    api.setTestCaseDescription('DVB-T Teletext Kontrolleri 8')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['progup+3*10', 'progdown+3*10+15'])
            api.sendKeys(['text+15'])
            api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Teletext index sayfasi acilmalidir.')
            api.sendKeys(['text+5*2', 'info+1'])
            api.testImages('TF1_InfoBar-ref', mask = api.infoBarMask, msg = 'Teletextten cikip mevcut kanal geri donmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="519" endline="547">
def Teletext_001_004_001(api) :
INDENT
    api.setTestCaseName('Teletext_001_004_001')
    api.setTestCaseDescription('DVB-C Teletext Kontrolleri 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_338FREG)
            chNo_DasErste = api.getChannelNumber('Das Erste HD')
            if (chNo_DasErste == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_DasErste) + '+10', 'text+10'])
                api.testImages('text_DasErsteHD-ref', mask = api.txtPageNoMask, msg = 'Das Erste HD kanalinda teletext acilmalidir.')
                api.sendKeys(['101+3'])
                api.testImages('text_Channel_DasErsteHD_Page_101-ref', mask = api.txtPageNoMask, msg = 'Das Erste HD kanalinda teletext 101. sayfa acilmalidir.')
                api.sendKeys(['102+3'])
                api.testImages('text_Channel_DasErsteHD_Page_102-ref', mask = api.txtPageNoMask, msg = 'Das Erste HD kanalinda teletext 102. sayfa acilmalidir.')
                api.sendKeys(['103+3'])
                api.testImages('text_Channel_DasErsteHD_Page_103-ref', mask = api.txtPageNoMask, msg = 'Das Erste HD kanalinda teletext 103. sayfa acilmalidir.')
                api.sendKeys(['text+5*2', 'info+1'])
                api.testImages('channel_DasErsteHd-ref', mask = api.infoBarMask, msg = 'Teletextten cikip mevcut kanal geri donmelidir.')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="548" endline="571">
def Teletext_001_005_001(api) :
INDENT
    api.setTestCaseName('Teletext_001_005_001')
    api.setTestCaseDescription('Teletext Performans Kontrolleri 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI)
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21)
            chNo_TF1 = api.getChannelNumber('TF1')
            chNo_TMC = api.getChannelNumber('TMC', getList = False)
            if (chNo_TF1 == 0 or chNo_TMC == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_TF1) + '+10', 'subtitles+5', 'text+15*3', str(chNo_TMC) + '+10', 'text+0.5'])
                api.testImages('_noTeletextAvailable-ref', mask = api.txtNotAvailable, msg = 'Teletext tusuna basildiginda No Teletext Available uyarisi cikmali, herhangi bir crash/reset problemi gorunmemelidir.')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="572" endline="594">
def Teletext_001_005_002(api) :
INDENT
    api.setTestCaseName('Teletext_001_005_002')
    api.setTestCaseDescription('Teletext Performans Kontrolleri 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
            chNo_TF1 = api.getChannelNumber('TF1', getList = False)
            if (chNo_TF1 == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_TF1) + '+10', 'text+15'])
                api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Teletext sayfasina datanin geldigi gorulmelidir.')
                api.plugInOutRFCable(api, plugIn = False)
                api.sendKeys(['+30'])
                api.testImages('_noSignal-ref', msg = 'Teletext bilgisi ekrandan kalkmalidir, no signal durumuna gecmelidir.')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="595" endline="617">
def Teletext_001_005_003(api) :
INDENT
    api.setTestCaseName('Teletext_001_005_003')
    api.setTestCaseDescription('Teletext Performans Kontrolleri 3')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.plugInOutRFCable(api, plugIn = True)
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21)
            chNo_TF1 = api.getChannelNumber('TF1', getList = False)
            if (chNo_TF1 == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_TF1) + '+10', 'text+15', '100+5'])
                api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = '(Page 100)Rf kablosu takildiktan sonra teletext acilmalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="618" endline="645">
def Teletext_001_005_004(api) :
INDENT
    api.setTestCaseName('Teletext_001_005_004')
    api.setTestCaseDescription('Teletext Performans Kontrolleri 4')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_474Mhz_CH21_West)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21)
            chNo_TF1 = api.getChannelNumber('TF1', getList = False)
            if (chNo_TF1 == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_TF1) + '+10', 'text+10', 'standby+30*2', str(chNo_TF1) + '+10', 'text+10'])
                api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Teletext acilmalidir.')
                sleep(1200)
                api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Uzun sureli beklemede problem olmamalidir.')
                api.doPowerCycle(api)
                api.sendKeys([str(chNo_TF1) + '+15', 'text+10'])
                api.testImages('TF1_Teletext_Page_100-ref', mask = api.txtPageNoMask, msg = 'Power off/on sonrasi Teletext"e girebilmelidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="646" endline="671">
def Teletext_001_005_005(api) :
INDENT
    api.setTestCaseName('Teletext_001_005_005')
    api.setTestCaseDescription('Teletext Performans Kontrolleri 5 - FRACAS-1359')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + ['SETCOUNTRY SPAIN+1'] + api.CONFIRMFTI + api.SET_ASTRA1)
            api.stopPlayStream(api, 'StreamPlayer2', api.DVBT_698Mhz_CH49_Spanish)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH49)
            chNo_TV3 = api.getChannelNumber('TV3HD', getList = False)
            chNo_TV3 = 1
            if (chNo_TV3 == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo_TV3) + '+5', 'progup+5', 'progdown+15', 'text+10'])
                api.testImages('TV3_Teletext_Spain-ref', mask = api.txtMask, msg = 'Eksik ya da bozuk karakter olmamalidir.')
                api.doPowerCycle(api)
                api.sendKeys(['text+5'])
                api.testImages('TV3_Teletext_Spain_AfterPowerCycle-ref', mask = api.txtMask, msg = 'Power off/on sonrasi teletextde eksik ya da bozuk karakter olmamalidir.')
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="672" endline="716">
def Teletext_002_001_001(api) :
INDENT
    api.setTestCaseName('Teletext_002_001_001')
    api.setTestCaseDescription('Analog Teletext Pages Channel 35')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN35)
            chNo = api.getChannelNumber('CHANNEL 4')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo) + '+10', 'text+10'])
                pages = [
                    '100', '101', '200', '250', '400', '500', '501', '502', '503', '504', '505', '510', '511', '512', '513', '700', '710', '711',
                    '712', '800', '820', '860', '861', '862', '866', '867', '868', '869', '870', '871', '899', '872', '873', '880', '881', '882',
                    '883', '884', '885', '886', '887', '888', '889']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_2_1_1(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_2_1_1(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_2_1_1(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="717" endline="730">
def _subPageCount_TXT_2_1_1(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '504' : ['0001', '0002', '0003', '0004', '0005'],
            '505' : ['0001', '0002', '0003', '0004'],
            '510' : ['0001', '0002', '0003'],
            '511' : ['0001', '0002'],
            '881' : ['1234', '2359', 'yellow', 'blue'],
            '882' : ['1234', '2359', 'yellow', 'blue'],
            '886' : ['0001', '0002']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="731" endline="742">
def _multiReferans_TXT_2_1_1(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '513' : ['Page' + str(pageNumber) + '_FaultOff-ref', 'Page' + str(pageNumber) + '_FaultOn-ref'],
            '883' : ['Page' + str(pageNumber) + '_Subtitle_One-ref', 'Page' + str(pageNumber) + '_Subtitle_Two-ref', 'Page' + str(pageNumber) + '_Subtitle_Three-ref', 'Page' + str(pageNumber) + '_Subtitle_Four-ref', 'Page' + str(pageNumber) + '_Subtitle_Five-ref'],
            '884' : ['Page' + str(pageNumber) + '_Subtitle_One-ref', 'Page' + str(pageNumber) + '_Subtitle_Two-ref', 'Page' + str(pageNumber) + '_Subtitle_Three-ref', 'Page' + str(pageNumber) + '_Subtitle_Four-ref', 'Page' + str(pageNumber) + '_Subtitle_Five-ref'],
            '885' : ['Page' + str(pageNumber) + '_NowHere_One-ref', 'Page' + str(pageNumber) + '_NowHere_Two-ref', 'Page' + str(pageNumber) + '_NowHere_Three-ref'],
            '887' : ['Page' + str(pageNumber) + '_NewsFlashOff-ref', 'Page' + str(pageNumber) + '_NewsFlashOn-ref']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="743" endline="783">
def Teletext_002_001_002(api) :
INDENT
    api.setTestCaseName('Teletext_002_001_002')
    api.setTestCaseDescription('Analog Teletext Pages Channel 12')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN12)
            chNo = api.getChannelNumber('C12')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys([str(chNo) + '+10', 'text+10'])
                pages = ['600', '610', '611', '620', '621', '630', '631', '650', '651', '660', '661', '670', '671', '672', '680', '681', '682', '683']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_2_1_2(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_2_1_2(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_2_1_2(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="784" endline="789">
def _subPageCount_TXT_2_1_2(pageNumber) :
INDENT
    try :
    INDENT
        return {'-1' : []}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="790" endline="800">
def _multiReferans_TXT_2_1_2(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '651' : ['Page' + str(pageNumber) + '_1_4-ref', 'Page' + str(pageNumber) + '_2_4-ref', 'Page' + str(pageNumber) + '_3_4-ref', 'Page' + str(pageNumber) + '_4_4-ref'],
            '660' : ['Page' + str(pageNumber) + '_1_2-ref', 'Page' + str(pageNumber) + '_2_2-ref'],
            '671' : ['Page' + str(pageNumber) + '_1_3-ref', 'Page' + str(pageNumber) + '_2_3-ref', 'Page' + str(pageNumber) + '_3_3-ref'],
            '672' : ['Page' + str(pageNumber) + '_1_3-ref', 'Page' + str(pageNumber) + '_2_3-ref', 'Page' + str(pageNumber) + '_3_3-ref']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="801" endline="841">
def Teletext_003_001_001(api) :
INDENT
    api.setTestCaseName('Teletext_003_001_001')
    api.setTestCaseDescription('Channel 35 Language East')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN35)
            chNo = api.getChannelNumber('CHANNEL 4')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_EAST_DVBT + [str(chNo) + '+10', 'text+10'])
                pages = ['200', '202', '204', '205', '210', '217', '218', '219', '221', '222', '252', '254', '255', '260', '267', '268', '269', '271', '272']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_3_1_1(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_3(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_3(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="842" endline="866">
def _subPageCount_TXT_3_1_1(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '202' : ['0001', '0002', '0003', '0004'],
            '204' : ['0001', '0002', '0003', '0004'],
            '205' : ['0001', '0002', '0003', '0004', '0005'],
            '210' : ['0001', '0002'],
            '217' : ['0001', '0002'],
            '218' : ['0001', '0002'],
            '219' : ['0001', '0002'],
            '221' : ['0001', '0002'],
            '222' : ['0001', '0002'],
            '252' : ['0001', '0002', '0003', '0004'],
            '254' : ['0001', '0002', '0003', '0004'],
            '255' : ['0001', '0002', '0003', '0004', '0005'],
            '260' : ['0001', '0002'],
            '267' : ['0001', '0002'],
            '268' : ['0001', '0002'],
            '269' : ['0001', '0002'],
            '271' : ['0001', '0002'],
            '272' : ['0001', '0002']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="867" endline="907">
def Teletext_003_001_002(api) :
INDENT
    api.setTestCaseName('Teletext_003_001_002')
    api.setTestCaseDescription('Channel 35 Language Cyrilic')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN35)
            chNo = api.getChannelNumber('CHANNEL 4')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_CYRILLIC_DVBT + [str(chNo) + '+10', 'text+10'])
                pages = ['200', '201', '204', '205', '215', '216', '218', '219', '220', '222', '251', '254', '255', '265', '266', '268', '269', '270', '272']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_3_1_2(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_3(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_3(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="908" endline="931">
def _subPageCount_TXT_3_1_2(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '201' : ['0001', '0002', '0003'],
            '204' : ['0001', '0002', '0003', '0004'],
            '205' : ['0001', '0002', '0003', '0004', '0005'],
            '215' : ['0001', '0002'],
            '218' : ['0001', '0002'],
            '219' : ['0001', '0002'],
            '220' : ['0001', '0002'],
            '222' : ['0001', '0002'],
            '251' : ['0001', '0002', '0003'],
            '254' : ['0001', '0002', '0003', '0004'],
            '255' : ['0001', '0002', '0003', '0004', '0005'],
            '265' : ['0001', '0002'],
            '266' : ['0001', '0002'],
            '268' : ['0001', '0002'],
            '269' : ['0001', '0002'],
            '270' : ['0001', '0002', '0003', '0004'],
            '272' : ['0001', '0002']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="932" endline="972">
def Teletext_003_001_003(api) :
INDENT
    api.setTestCaseName('Teletext_003_001_003')
    api.setTestCaseDescription('Channel 12 Language Turk\Gre')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN12)
            chNo = api.getChannelNumber('C12')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_TURKGRE_DVBT + [str(chNo) + '+10', 'text+10'])
                pages = ['200', '201', '202', '203', '205', '206', '207', '209', '211', '212', '251', '252', '253', '255', '256', '257', '259', '261', '262']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_3_1_3(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_3(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_3(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="973" endline="997">
def _subPageCount_TXT_3_1_3(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '201' : ['0001', '0002', '0003'],
            '202' : ['0001', '0002', '0003', '0004'],
            '203' : ['0001', '0002', '0003', '0004'],
            '205' : ['0001', '0002', '0003', '0004', '0005'],
            '206' : ['0001', '0002', '0003'],
            '207' : ['0001', '0002', '0003', '0004'],
            '209' : ['0001', '0002', '0003', '0004'],
            '211' : ['0001', '0002', '0003'],
            '212' : ['0001', '0002'],
            '251' : ['0001', '0002', '0003'],
            '252' : ['0001', '0002', '0003', '0004'],
            '253' : ['0001', '0002', '0003', '0004'],
            '255' : ['0001', '0002', '0003', '0004', '0005'],
            '256' : ['0001', '0002', '0003'],
            '257' : ['0001', '0002', '0003', '0004'],
            '259' : ['0001', '0002', '0003', '0004'],
            '261' : ['0001', '0002', '0003'],
            '262' : ['0001', '0002', '0003', '0004']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="998" endline="1039">
def Teletext_003_001_004(api) :
INDENT
    api.setTestCaseName('Teletext_003_001_004')
    api.setTestCaseDescription('Channel 35 Language Arabic')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.FTI + api.CONFIRMFTI + api.SET_ASTRA1)
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN35)
            chNo = api.getChannelNumber('CHANNEL 4')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT_ARABIC_DVBT + [str(chNo) + '+10', 'text+10'])
                pages = ['200', '201', '202', '208', '223', '224', '251', '252', '258', '273', '274']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_3_1_4(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_3(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_3(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="1040" endline="1054">
def _subPageCount_TXT_3_1_4(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '201' : ['0001', '0002', '0003'],
            '202' : ['0001', '0002', '0003', '0004'],
            '208' : ['0001', '0002', '0003', '0004', '0005', '0006'],
            '223' : ['0001', '0002'],
            '251' : ['0001', '0002', '0003'],
            '252' : ['0001', '0002', '0003', '0004'],
            '258' : ['0001', '0002', '0003', '0004', '0005', '0006'],
            '273' : ['0001', '0002']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="1055" endline="1095">
def Teletext_003_001_005(api) :
INDENT
    api.setTestCaseName('Teletext_003_001_005')
    api.setTestCaseDescription('Channel 12 Language West')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN12)
            chNo = api.getChannelNumber('C12')
            if (chNo == 0) :
            INDENT
                print ('Kanal Bulunamadi')
            DEDENT
            else :
            INDENT
                api.sendKeys(api.LANGUAGESETTING_TXT + [str(chNo) + '+10', 'text+10'])
                pages = ['200', '201', '202', '203', '205', '206', '207', '209', '211', '213', '251', '252', '253', '255', '256', '257', '259', '261', '263']
                sleepTimePerPage = 10
                for pageIndex in range(0, len(pages)) :
                INDENT
                    currentPage = pages [pageIndex]
                    goPage = currentPage + '+' + str(sleepTimePerPage)
                    api.sendKeys(['teletext_index+3', goPage])
                    curPgSubPgCount = _subPageCount_TXT_3_1_5(currentPage)
                    if (len(curPgSubPgCount) == 0) :
                    INDENT
                        referancesImages = []
                        if (len(_multiReferans_TXT_3(currentPage)) == 0) :
                        INDENT
                            referancesImages.append('Page' + str(currentPage) + '-ref')
                        DEDENT
                        else :
                        INDENT
                            referancesImages = _multiReferans_TXT_3(currentPage)
                        DEDENT
                        api.testImages(referancesImages, mask = api.txtMask, grabName = None, limit = 80, timeout = 10)
                    DEDENT
                    else :
                    INDENT
                        for i in range(0, len(curPgSubPgCount)) :
                        INDENT
                            goSubPage = str(curPgSubPgCount [i]) + '+' + str(sleepTimePerPage)
                            api.sendKeys(['teletext_index+2', goPage, 'teletext_subpage+1', goSubPage])
                            api.testImages('Page' + str(currentPage) + '_Subpage_P' + str(curPgSubPgCount [i]) + '-ref', mask = api.txtMask, limit = 80, timeout = 5)
                            sleep(sleepTimePerPage / 2)
                        DEDENT
                        sleep(sleepTimePerPage)
                    DEDENT
                DEDENT
                api.sendKeys(['text+3*2'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="1096" endline="1117">
def _subPageCount_TXT_3_1_5(pageNumber) :
INDENT
    try :
    INDENT
        return {
            '201' : ['0001', '0002', '0003'],
            '202' : ['0001', '0002', '0003', '0004'],
            '203' : ['0001', '0002', '0003', '0004'],
            '205' : ['0001', '0002', '0003', '0004', '0005'],
            '206' : ['0001', '0002', '0003'],
            '207' : ['0001', '0002', '0003', '0004'],
            '209' : ['0001', '0002', '0003', '0004'],
            '211' : ['0001', '0002', '0003'],
            '251' : ['0001', '0002', '0003'],
            '252' : ['0001', '0002', '0003', '0004'],
            '255' : ['0001', '0002', '0003', '0004', '0005'],
            '256' : ['0001', '0002', '0003'],
            '257' : ['0001', '0002', '0003', '0004'],
            '259' : ['0001', '0002', '0003', '0004'],
            '261' : ['0001', '0002', '0003']}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__6_tcg.py" startline="1118" endline="1123">
def _multiReferans_TXT_3(pageNumber) :
INDENT
    try :
    INDENT
        return {'-1' : []}.get(pageNumber, [])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__3_macro.py" startline="2" endline="42">
def test(api) :
INDENT
    try :
    INDENT
        api.usingChannelName = 'TRT 1'
        api.usingChannelName2 = 'CINE+'
        api.usingChannelName3 = 'TF1'
        api.FTI = ['STARTFTI+5', 'left+1', 'ok+45']
        api.CONFIRMFTI = ['ok+2*7+5']
        api.INSTALL_MENU = api.SETTINGS_MENU = []
        if api.UIName == 'carbon' :
        INDENT
            api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', 'menu+2', 'down+1', 'ok+1', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit2+2*2', 'clearosd+5', 'menu+2', 'right+1', 'up+1', 'ok+1', 'gofirstitemgroup+1']
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down*3', 'ok+2', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit+2*2', 'menu+2', 'down*2', 'ok+2', 'gofirstitemgroup+1']
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
            api.SETTINGS_MENU = ['exit+2*2', 'menu+3', 'ok+3', 'right+2*2', 'ok+2', 'gofirstitemgroup+1']
        DEDENT
        api.SET_ASTRA1 = api.INSTALL_MENU + ['down+1*4', 'ok+1', 'down+1', 'ok+1', 'left+1', 'ok+1', 'up+1', 'gofirstitem+2', 'down+1', 'gofirstitem+2', 'left+1', 'ok+6']
        api.MANUAL_CHANNEL_SCAN = api.INSTALL_MENU + ['down*1', 'ok+2', 'gofirstitemgroup+1', 'gofirstitem+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL = api.MANUAL_CHANNEL_SCAN
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE = api.MANUAL_CHANNEL_SCAN + ['gofirstitem+1', 'right+1']
        api.MANUAL_CHANNEL_SCAN_ANALOGUE = api.MANUAL_CHANNEL_SCAN + ['gofirstitem+1', 'left+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 = api.MANUAL_CHANNEL_SCAN + ['right*2+1', 'up+1', 'right+1', 'down+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH21 = api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL + ['down+1', '21+15', 'ok+60']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL_CH49 = api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL + ['down', '49+15', 'ok']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE_338FREG = api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '338+15', 'down*2', '6900+2', 'ok+60']
        api.MANUAL_CH_SCAN_SAT_10750FREG = api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 + ['down', '10750+3', 'down+1', 'gofirstitem+1', 'left+1', 'down+1', '27500+10', 'ok+60']
        api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN12 = api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3+1', '12+15', 'ok+40']
        api.MANUAL_CHANNEL_SCAN_ANALOGUE_BANDC_SYSBG_CHN35 = api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3+1', '35+15', 'ok+40']
        api.SETTINGS_LANGUAGE = api.SETTINGS_MENU + ['down+1', 'ok+1', 'gofirstitemgroup+1']
        api.LANGUAGESETTING_TXT = api.SETTINGS_LANGUAGE + ['down+1*5', 'gofirstitem+1', 'exit2+2*2', 'clearosd+5']
        api.LANGUAGESETTING_TXT_TURKGRE_DVBT = api.SETTINGS_LANGUAGE + ['down+1*5', 'gofirstitem+1', 'left+1*2', 'exit2+2*2', 'clearosd+5']
        api.LANGUAGESETTING_TXT_EAST_DVBT = api.SETTINGS_LANGUAGE + ['down+1*5', 'gofirstitem+1', 'right+1', 'exit2+2*2', 'clearosd+5']
        api.LANGUAGESETTING_TXT_CYRILLIC_DVBT = api.SETTINGS_LANGUAGE + ['down+1*5', 'gofirstitem+1', 'right+1*2', 'exit2+2*2', 'clearosd+5']
        api.LANGUAGESETTING_TXT_ARABIC_DVBT = api.SETTINGS_LANGUAGE + ['down+1*5', 'gofirstitem+1', 'left+1', 'exit2+2*2', 'clearosd+5']
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="103" endline="135">
def test(api) :
INDENT
    global reportID
    try :
    INDENT
        api.activateDevices(** devConf)
        try :
        INDENT
            api.manual = Manual(1)
            print '\nMANUAL_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        if auto_getReportID or auto_readTVInfo :
        INDENT
            readTVInfo(api)
        DEDENT
        setDeviceParameters(api)
        if test_Devices :
        INDENT
            checkTestDevices(api)
        DEDENT
        if auto_getReportID :
        INDENT
            msg = 'ReportID almak icin gonderilen bilgiler:\n-------------------------------------------\n'
            for i in WebMonitor_NewTest_dict :
            INDENT
                msg += str(i) + ': ' + str(WebMonitor_NewTest_dict [i]) + '\n'
            DEDENT
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
            api.manual.getResult()
            reportID = getReportID(WebMonitor_NewTest_dict)
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; REPORTID: ' + str(reportID)])
            api.manual.getResult()
        DEDENT
        if not reportID :
        INDENT
            api.writeToLog('###### getReportID ERROR ######\n Web arayuzunden reportID alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            reportID = 0
        DEDENT
        makeTVSettingsGlobal(api)
        readyForTest(api)
        api.getTV_IP = _getTV_IP
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="136" endline="167">
def setDeviceParameters(api) :
INDENT
    try :
    INDENT
        api.setCaptureDevice(deviceSettings [0])
        if (deviceSettings [0] == 3) :
        INDENT
            tvIP = _getTV_IP(api) [0]
            api.setTvIP(tvIP)
        DEDENT
        api.setPictureAlgorithm(deviceSettings [1])
        if (deviceSettings [1] == 1) :
        INDENT
            api.setPSNRLimits(matchLimit = 90, diffLimit = 90)
        DEDENT
        elif (deviceSettings [1] == 4) :
        INDENT
            api.setSSIMLimits(matchLimit = 90, diffLimit = 90)
        DEDENT
        api.setResizeCapture(deviceSettings [2])
        api.setRotateCapture(deviceSettings [3])
        api.setAudioCaptureDevice(deviceSettings [4])
        api.setVideoAnalysisDevice(deviceSettings [5])
        api.generateTCSequence(0)
        try :
        INDENT
            api.dta = DTA(1)
            print '\nSTREAM_PLAYER_T-C_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        try :
        INDENT
            api.dta107S = DTA107S(1)
            print '\nSTREAM_PLAYER_S_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="168" endline="185">
def checkTestDevices(api) :
INDENT
    try :
    INDENT
        api.setReportId(0, testName = 'DEVICE_CONTROL')
        api.setTestCaseName('init')
        api.setTestCaseDescription('Test and Device Configuration')
        if not api.start(force = True) :
        INDENT
            try :
            INDENT
                print api.grabImage('test1')
                sleep(1)
                print api.grabImage('test2')
            DEDENT
            except :
            INDENT
                api.printError()
            DEDENT
            api.end(False)
            print 'END: init'
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="186" endline="195">
def makeTVSettingsGlobal(api) :
INDENT
    try :
    INDENT
        api.projectName = projectName.lower()
        api.UIName = UIName.lower()
        api.customerName = customerName
        api.countryName = countryName
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="196" endline="205">
def readyForTest(api) :
INDENT
    try :
    INDENT
        masterPath = os.path.join(vestaMasterPath, 'Teletext', UIName.lower(), projectName.title())
        testName = testSuiteName + '_' + projectName.title() + '_' + SWVersion + '_svn' + SVNNumber
        api.setTestMasterPath(masterPath)
        api.setReportId(reportID, testName)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="206" endline="350">
def readTVInfo(api) :
INDENT
    try :
    INDENT
        global SWVersion, SVNNumber, projectName, hardwareName, UIName, countryName, customerName, WebMonitor_NewTest_dict
        _SWVersion = _SVNNumber = _projectName = _UIName = _hardwareName = ramSize = PMVersion = mbootVersion = mfcVersion = languageName = ''
        langList = {
            'dan' : 'danish', 'ger' : 'german', 'est' : 'estonian', 'eng' : 'english', 'spa' : 'spanish', 'gre' : 'greek',
            'fre' : 'french', 'gla' : 'gaelic', 'hrv' : 'croatian', 'ita' : 'italian', 'lav' : 'latvian', 'lit' : 'lithuanian',
            'hun' : 'hungarian', 'dut' : 'dutch', 'nor' : 'norwegian', 'pol' : 'polish', 'por' : 'portuguese', 'rus' : 'russian',
            'rum' : 'romanian', 'alb' : 'albanian', 'slv' : 'slovanian', 'slo' : 'slovak', 'srp' : 'serbian', 'fin' : 'finnish',
            'swe' : 'swedish', 'tur' : 'turkish', 'cze' : 'czech', 'ukr' : 'ukranian', 'bul' : 'bulgarian', 'ara' : 'arabic',
            'per' : 'persian', 'heb' : 'hebrew', 'bel' : 'belarussian', 'mac' : 'macedonian', 'mon' : 'montenegrin',
            'kaz' : 'kazakh', 'tha' : 'Thai'}
        countryList = {
            'aus' : 'australia', 'dnk' : 'denmark', 'fin' : 'finland', 'fra' : 'france', 'deu' : 'germany', 'ita' : 'italy',
            'nld' : 'netherlands', 'nor' : 'norway', 'pol' : 'poland', 'prt' : 'portugal', 'esp' : 'spain', 'swe' : 'sweden',
            'gbr' : 'united_kingdom', 'alb' : 'albania', 'aut' : 'austria', 'bel' : 'belgium', 'bgr' : 'bulgaria', 'chn' : 'china',
            'cze' : 'czech_republic', 'est' : 'estonia', 'grc' : 'greece', 'hun' : 'hungary', 'isr' : 'israel', 'lva' : 'latvia',
            'ltu' : 'lithuania', 'mkd' : 'macedonia', 'rou' : 'romania', 'rus' : 'russia', 'srb' : 'serbia', 'svk' : 'slovakia',
            'svn' : 'slovenia', 'che' : 'switzerland', 'tur' : 'turkey', 'hrv' : 'croatia', 'ice' : 'iceland', 'lux' : 'luxembourg',
            'ita' : 'san_marino', 'nzl' : 'new_zealand', 'mne' : 'montenegro', 'ukr' : 'ukraine', 'imn' : 'isle_of_man',
            'sau' : 'saudi_arabia', 'irn' : 'persia', 'are' : 'united_arab_emirates', 'kwt' : 'kuwait', 'omn' : 'oman',
            'bhr' : 'bahrain', 'qat' : 'qatar', 'blr' : 'belarussia', 'irl' : 'ireland', 'irq' : 'iraq', 'jor' : 'jordan',
            'lbn' : 'lebanon', 'ind' : 'india', 'col' : 'colombia', 'cyp' : 'cyprus', 'tha' : 'thailand', 'gha' : 'ghana',
            'egy' : 'egypt', 'lbr' : 'liberia', 'tgo' : 'togo', 'sle' : 'sierra_leone', 'civ' : 'cote_d_ivoire', 'ken' : 'kenya',
            'tza' : 'tanzania', 'moz' : 'mozambique', 'cod' : 'congo', 'sen' : 'senegal', 'nga' : 'nigeria', 'eth' : 'ethiopia',
            'zmb' : 'zambia', 'uga' : 'uganda', 'arg' : 'argentina', 'ang' : 'angola'}
        result = api.logKeywordsSearch(
            ['TV INFO', '#*project:', '#*hardware:', '#*ram:', '#*sw version:',
                '#*svn no:', '#*mboot ver:', '#*mfc ver:', '#*ip address:',
                '#*ui name:', '#*lang:', '#*country:', '#*customer:', 'Stbc ver:'],
            command = ['UART_uartexit', 'UART_GETTVINFO+0.5'], counts = 1, sTypes = 1, timeout = 2, portIndex = 0)
        print '-----------> ', result, '<-------------'
        msg = 'GETTVINFO komutuyla alinan bilgiler:\n-------------------------------------------\n'
        for i in range(len(result [0])) :
        INDENT
            msg += str(result [0] [i]) + '\n'
        DEDENT
        api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
        api.manual.getResult()
        if result [0] [0] and result [0] [0] [0].find('TV INFO') > - 1 :
        INDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                _projectName = result [0] [1] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _hardwareName = result [0] [2] [0].split(': ') [1].strip().upper().replace('NC', '')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                ramSize = result [0] [3] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _SWVersion = result [0] [4] [0].split(': ') [1].strip().replace('V.', 'v')
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _SVNNumber = result [0] [5] [0].split(': ') [1].strip()
            DEDENT
            if result [0] [6] and result [0] [6] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [6] [0].rsplit(':', 1)
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1].strip()
                    DEDENT
                    aaa [0] = aaa [0].rsplit(': ', 1) [1].split('-')
                    mbootVersion = aaa [0] [1].split(' ') [0]
                    _hardwareName = aaa [0] [0].replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [7] and result [0] [7] [0] :
            INDENT
                mfcVersion = result [0] [7] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [8] and result [0] [8] [0] :
            INDENT
                tvIP = result [0] [8] [0].split(': ') [1].strip().upper()
                api.setTvIP(tvIP)
            DEDENT
            if result [0] [9] and result [0] [9] [0] :
            INDENT
                _UIName = result [0] [9] [0].split(': ') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [10] and result [0] [10] [0] :
            INDENT
                languageName = result [0] [10] [0].split(': ') [1].strip().title()
            DEDENT
            if result [0] [11] and result [0] [11] [0] :
            INDENT
                countryName = result [0] [11] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [12] and result [0] [12] [0] :
            INDENT
                customerName = result [0] [12] [0].split(': ') [1].strip().upper()
            DEDENT
        DEDENT
        else :
        INDENT
            result = api.logKeywordsSearch(
                ['MBoot Version:', 'DDR  Size:        ', '\#\*V\.|\#\*SW_VER: V\.', '#*Build info', '#*UI name:', '_hwprofile\.bin'],
                patterns = [' MB\d{1,5}\-\d{1,6} PM ver: \d{1,6}| MB\d{1,6}NC\-\d{1,5} PM ver: \d{1,6}| MB\d{1,5}\-\d{1,6}| MB\d{1,6}NC\-\d{1,5}',
                    '\d{1,5}MB|\d{1,5}\.\d{1,5}GB', 'V\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|V\.\d{1,3}\.\d{1,3}\.\d{1,3}[a-zA-Z]', '\[ \d{1,6}\]|\[\d{1,7}\]',
                    '', ' MB\d{1,5}_hwprofile\.bin| mb\d{1,5}_hwprofile\.bin| t\d{1,5}_hwprofile\.bin| T\d{1,5}_hwprofile\.bin'],
                command = ['poweroff+5', 'poweron+10', '00+35', 'UART_aa', 'UART_GETSWVERSION+1', 'UART_aa', 'UART_BUILDINFO+1', 'UART_aa', 'UART_GETUINAME+1', 'UART_aa', 'UART_ls ../conf+1', 'UART_aa', 'UART_ls /conf+1'], counts = 1, sTypes = 1, timeout = 1, portIndex = 0)
            if result [0] [0] and result [0] [0] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [0] [0].split(': ')
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1]
                    DEDENT
                    mbootVersion = aaa [0].replace('PM ver', '').strip().split('-') [1]
                    _hardwareName = aaa [0].replace('PM ver', '').strip().split('-') [0].upper().replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                ramSize = result [0] [1] [0]
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _SWVersion = result [0] [2] [0].replace('V.', 'v')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                _SVNNumber = result [0] [3] [0].replace('[', '').replace(']', '').strip()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _UIName = result [0] [4] [0].split('#*UI name:') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _hardwareName = result [0] [5] [0].split('_') [0].upper().strip().replace('NC', '')

            DEDENT
        DEDENT
        if not projectName :
        INDENT
            projectName = _projectName
        DEDENT
        if not SWVersion :
        INDENT
            SWVersion = _SWVersion
        DEDENT
        if not SVNNumber :
        INDENT
            SVNNumber = _SVNNumber
        DEDENT
        if not UIName :
        INDENT
            UIName = _UIName
        DEDENT
        if not projectN_vs_hardwareN_dict.get(projectName.lower(), False) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a project: %s\n' % (projectName.lower()), fileName = 'ERROR')
            return
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = _hardwareName
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = projectN_vs_hardwareN_dict.get(projectName.lower(), False).upper()
            if not hardwareName :
            INDENT
                api.writeToLog('Please Update Project Hardware Dict! Since there is no hardware for project: %s\n' % (projectName.lower()), fileName = 'ERROR')
                return
            DEDENT
        DEDENT
        if not (hardwareName in projectN_vs_hardwareN_dict.get(projectName.lower(), False)) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a hardware: %s\n' % (hardwareName), fileName = 'ERROR')
            return
        DEDENT
        if not SWVersion or not SVNNumber or not UIName :
        INDENT
            api.writeToLog('###### ERROR ######\n version, SVN, UI ve hardware bilgisi alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            api.writeToLog('version: %s SVN: %s UI: %s\n' % (SWVersion, SVNNumber, UIName), fileName = 'ERROR', timestamp = False)
            return
        DEDENT
        languageName = langList.get(languageName.lower(), 'English').title()
        countryName = countryList.get(countryName.lower(), countryName).title()

        WebMonitor_NewTest_dict ['project'] = projectName
        WebMonitor_NewTest_dict ['hardware_name'] = hardwareName
        WebMonitor_NewTest_dict ['hardware'] = hardwareName + ' ' + ramSize
        WebMonitor_NewTest_dict ['version'] = SWVersion
        WebMonitor_NewTest_dict ['SVN'] = SVNNumber
        WebMonitor_NewTest_dict ['pm'] = PMVersion
        WebMonitor_NewTest_dict ['romboot'] = mbootVersion
        WebMonitor_NewTest_dict ['mfc'] = mfcVersion
        WebMonitor_NewTest_dict ['ui'] = UIName
        WebMonitor_NewTest_dict ['language'] = languageName

    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="351" endline="360">
def getReportID(data) :
INDENT
    import urllib, urllib2
    url = 'http://veargd13262/vesta2/add_test.php'
    data = urllib.urlencode(data)
    content = urllib2.urlopen(url = url, data = data).read()
    reportID = 0
    if str(content).isdigit() :
    INDENT
        reportID = int(content)
    DEDENT
    return reportID
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__1_init.py" startline="361" endline="376">
def _getTV_IP(api) :
INDENT
    try :
    INDENT
        api.TV_IP = ['']
        if api.captureDevice == 3 :
        INDENT
            for i in range(5) :
            INDENT
                result = api.logKeywordsSearch(['#*IPaddr:|#*IP|addr:'], 1, command = ['UART_aa', 'UART_get_IP_address'], sTypes = 1, patterns = ['(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'])
                api.TV_IP = eval(str(result).replace('[[]]', "''").replace("[['", "'").replace("']]", "'"))
                print 'TV IP: ' + ''.join(api.TV_IP).replace('10.108', ', 10.108') [2 :].replace('10.108', ', 10.108').replace('192.168', ', 192.168') [2 :]
                if '' in api.TV_IP :
                INDENT
                    sleep(3)
                DEDENT
                else :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
    return api.TV_IP
DEDENT
</source>
<source file="systems/Vestel-Code/Teletext/txt__2_mask.py" startline="2" endline="19">
def test(api) :
INDENT
    try :
    INDENT
        if api.UIName == 'carbon' :
        INDENT
            api.txtMask = ['txt-mask', (1, 1, 1919, 900), (1000, 1, 1919, 65, 1), (1, 1010, 1919, 1079, 1)]
            api.infoBarMask = ['infoBar-mask', (1, 840, 1919, 1079), (1, 920, 1919, 1015, 1), (1600, 860, 1760, 915, 1)]
            api.txtPageNoMask = ['txt-pageNo', (90, 5, 275, 60)]
            api.txtNotAvailable = ['txt-notAvailable', (545, 405, 1280, 555)]
        DEDENT
        elif api.UIName == 'panasonic' or api.UIName == 'titanium' :
        INDENT
            if api.projectName == 'raphael' :
            INDENT
                api.txtNotAvailable = ['txt-notAvailable', (670, 315, 1265, 615)]
            DEDENT
            else :
            INDENT
                api.txtNotAvailable = ['txt-notAvailable', (680, 420, 1260, 540)]
            DEDENT
            api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
            api.txtMask = ['txt-mask', (1, 1, 1919, 900), (1, 485, 1919, 605, 1), (1000, 1, 1919, 75, 1)]
            api.txtPageNoMask = ['txt-pageNo', (90, 5, 275, 60)]
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__3_macro.py" startline="2" endline="61">
def test(api) :
INDENT
    try :
    INDENT
        api.streamPath = 'D:/STREAMS/Installation Based On Menu/'
        api.DTV_DVB_C_346MHZ = ['ModulationType; DVBC', 'Frequency; 346', 'BitRate; 38014706', 'Constellation; QAM256', 'remultiplex; 1', 'Play; 1']
        tkgs = tddf = 0
        if api.TKGS :
        INDENT
            tkgs = 1
        DEDENT
        if api.TKGS or api.DSmart or api.Digiturk or api.Fransat :
        INDENT
            tddf = 1
        DEDENT
        api.INSTALL_MENU = api.OTHER_SETTINGS = []
        if api.UIName == 'carbon' :
        INDENT
            api.INSTALL_MENU = ['clearosd+10', 'exit2+5*2', '4725+5', 'menu+2', 'down', 'ok+2', 'gofirstitemgroup+1']
            api.OTHER_SETTINGS = ['exit2+2*2', 'menu+2', 'right+2', 'down*2', 'ok+1', 'up', 'ok+1']
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down*3', 'ok+2', 'gofirstitemgroup+1']
            api.OTHER_SETTINGS = ['exit2+2*2', 'menu+2', 'down*2', 'ok+1', 'up', 'ok+1']
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            api.INSTALL_MENU = ['exit2+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down+1', 'ok+2', 'gofirstitemgroup+1']
            api.OTHER_SETTINGS = ['exit2+2*2', 'menu+3', 'right*3', 'ok+1', 'up', 'ok+1']
        DEDENT
        api.AUTOMATIC_CHANNEL_SCAN = api.INSTALL_MENU + ['down*' + str(tkgs), 'ok+2', 'gofirstitemgroup+1']
        api.MANUAL_CHANNEL_SCAN = api.INSTALL_MENU + ['down*' + str(1 + tkgs), 'ok+2', 'gofirstitemgroup+1', 'gofirstitem+1']
        api.NETWORK_CHANNEL_SCAN = api.INSTALL_MENU + ['down*' + str(2 + tkgs), 'ok+2', 'gofirstitemgroup+1']
        api.ANALOGUE_FINE_TUNE = api.INSTALL_MENU + ['down*' + str(3 + tkgs), 'ok+2']
        api.SATELLITE_SETTINGS = api.INSTALL_MENU + ['down*' + str(4 + tkgs), 'ok+1']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL = api.AUTOMATIC_CHANNEL_SCAN + ['ok', 'left', 'ok', 'ok']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE = api.AUTOMATIC_CHANNEL_SCAN + ['down', 'ok', 'left', 'ok', 'ok']
        api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE = api.AUTOMATIC_CHANNEL_SCAN + ['down*2', 'ok', 'left', 'ok', 'ok']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_FULL = api.AUTOMATIC_CHANNEL_SCAN + ['up', 'ok+1*' + str(1 + tddf), 'green']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 = api.AUTOMATIC_CHANNEL_SCAN + ['up', 'ok+1*' + str(1 + tddf), 'down', 'yellow']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4 = api.AUTOMATIC_CHANNEL_SCAN + ['up', 'ok+1*' + str(1 + tddf), 'down*3', 'yellow']
        api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4_withChannel = api.AUTOMATIC_CHANNEL_SCAN + ['up', 'ok+1', 'left', 'ok+1*' + str(1 + tddf), 'down*3', 'yellow']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL = api.MANUAL_CHANNEL_SCAN
        api.MANUAL_CHANNEL_SCAN_ANALOGUE = api.MANUAL_CHANNEL_SCAN + ['left+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE = api.MANUAL_CHANNEL_SCAN + ['right+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_1 = api.MANUAL_CHANNEL_SCAN + ['right*2+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 = api.MANUAL_CHANNEL_SCAN + ['right*2+1', 'up', 'right', 'down+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_3 = api.MANUAL_CHANNEL_SCAN + ['right*2+1', 'up', 'right*2', 'down+1']
        api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4 = api.MANUAL_CHANNEL_SCAN + ['right*2+1', 'up', 'right*3', 'down+1']
        api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*2+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*3+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*4+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_1 = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*3+1', 'up+1', 'gofirstitem+1', 'right+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_2 = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*3+1', 'up+1', 'gofirstitem+1', 'right*2+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_3 = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*3+1', 'up+1', 'gofirstitem+1', 'right*3+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_4 = ['exit2+3*2', '1+5', 'ok', 'green+1', 'blue+1', 'red+1', 'right*3+1', 'up+1', 'gofirstitem+1', 'right*4+1', 'ok+2', 'exit2+3*2']
        api.CHANNEL_LIST_SCRAMBLED = ['exit2+3*2', '1+5', 'ok', 'green', 'blue+1', 'red+1', 'down*2', 'gofirstitem+1', 'left', 'ok+2', 'exit2+3*2']
        api.SATCODX = api.SATELLITE_SETTINGS + ['up', 'ok+2']
        api.OTHER_SETTINGS_BISS_KEY = api.OTHER_SETTINGS + ['down*5', 'ok+1']
        api.ANTENNAINSTALLATION = api.SATELLITE_SETTINGS + ['down+1', 'ok+2']
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="3" endline="12">
def test(api) :
INDENT
    try :
    INDENT
        api.doFTI = _doFTI
        api.setDiseqC = _setDiseqC
        api.doPowerCycle = _doPowerCycle
        api.audioCompare = _audioCompare
        api.stopPlayStream = _stopPlayStream
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="13" endline="52">
def _doFTI(api, scanEncryptedChannels = 1, aerial = 0, cable = 0, satellite = 0, analogue = 0, favNetType = - 1, diseqc = None) :
INDENT
    try :
    INDENT
        api.sendKeys(['STARTFTI+5', 'left+1', 'ok+45', 'ok+2'])
        if not scanEncryptedChannels :
        INDENT
            api.sendKeys(['down+0.5', 'GOFIRSTITEM+1', 'GOFIRSTITEMGROUP+2'])
        DEDENT
        if not (aerial or cable or satellite or analogue) :
        INDENT
            api.sendKeys(['ok+3*7+5'])
            if diseqc :
            INDENT
                api.sendKeys(api.ANTENNAINSTALLATION)
                api.setDiseqC(api, diseqc = diseqc)
            DEDENT
        DEDENT
        else :
        INDENT
            if favNetType == 'aerial' :
            INDENT
                api.sendKeys(['down+0.5*2', 'GOFIRSTITEM+1', 'right+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            elif favNetType == 'cable' :
            INDENT
                api.sendKeys(['down+0.5*2', 'GOFIRSTITEM+1', 'right+0.5*2', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            elif favNetType == 'satellite' :
            INDENT
                api.sendKeys(['down+0.5*2', 'GOFIRSTITEM+1', 'left+0.5*2', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            elif favNetType == 'analogue' :
            INDENT
                api.sendKeys(['down+0.5*2', 'GOFIRSTITEM+1', 'left+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            if aerial and favNetType ! = 'aerial' :
            INDENT
                api.sendKeys(['down+0.5*3', 'GOFIRSTITEM+1', 'right+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            if cable and favNetType ! = 'cable' :
            INDENT
                api.sendKeys(['up+0.5*3', 'GOFIRSTITEM+1', 'right+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            if satellite and favNetType ! = 'satellite' :
            INDENT
                api.sendKeys(['up+0.5*2', 'GOFIRSTITEM+1', 'right+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            if analogue and favNetType ! = 'analogue' :
            INDENT
                api.sendKeys(['up+1', 'GOFIRSTITEM+1', 'right+1', 'GOFIRSTITEMGROUP+2'])
            DEDENT
            api.sendKeys(['ok+1*3'])
            api.sendKeys(['ok+1'])
            if cable :
            INDENT
                api.sendKeys(['right+0.5', 'ok+1*2'])
            DEDENT
            if satellite :
            INDENT
                api.setDiseqC(api, diseqc = diseqc)
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="53" endline="65">
def _setDiseqC(api, diseqc = ['', '', '', '']) :
INDENT
    try :
    INDENT
        api.sendKeys(['GOFIRSTITEM+1', 'left+1', 'ok+1'])
        if diseqc [3] == 'astra 1' and diseqc [1] ! = 'turksat' :
        INDENT
            api.sendKeys(['left+1', 'up+1', 'right+1', 'down+1', 'right+1'])
        DEDENT
        elif diseqc [3] ! = 'astra 1' and diseqc [1] == 'turksat' :
        INDENT
            api.sendKeys(['down+1', 'left+1*2', 'up+1', 'left+1'])
        DEDENT
        else :
        INDENT
            api.sendKeys(['right+1*13', 'down+1', 'left+1*2', 'down+1', 'right+1*19', 'down+1', 'right+1'])
        DEDENT
        api.sendKeys(['ok'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="66" endline="72">
def _doPowerCycle(api) :
INDENT
    try :
    INDENT
        api.sendKeys(['poweroff+15', 'poweron+45', 'RNS_0+15'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="73" endline="80">
def _audioCompare(api) :
INDENT
    for i in range(50) :
    INDENT
        api.sendKeys(['exit+2'])
        if api.testImages(['scrambled-ref', 'blackScreen-ref'], expectMatch = False, mask = api.scrambledMask, recordResults = False, msg = 'Goruntude bir problem olmamali.') [0] :
        INDENT
            break
        DEDENT
        api.sendKeys(['progup+10'])
    DEDENT
    api.checkAudio(msg = 'Seste bir problem olmamali')
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__4_method.py" startline="81" endline="95">
def _stopPlayStream(api, streamFile = '', macro = [], delay = 1) :
INDENT
    try :
    INDENT
        api.dta.sendCommands(commandL = ['Stop; 0'], devnum = 0)
        sleep(1)
        if not streamFile :
        INDENT
            return
        DEDENT
        else :
        INDENT
            api.dta.sendCommands(commandL = ['InputFile; ' + api.streamPath + str(streamFile)], devnum = 0)
            api.dta.sendCommands(commandL = macro, devnum = 0)
        DEDENT
        api.dta.sendCommands(commandL = ['ignore_stop; 1'], devnum = 0)
        api.dta.sendCommands(commandL = ['Play; 1'], devnum = 0)
        sleep(delay)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__2_mask.py" startline="2" endline="22">
def test(api) :
INDENT
    try :
    INDENT
        if api.UIName == 'carbon' :
        INDENT
            api.channelListMask = ['channelList-mask', (180, 55, 1800, 1025), (210, 180, 1745, 880, 1)]
            api.scrambledMask = ['scrambled-mask', (840, 410, 1190, 475)]
            api.infoBarMask = ['infoBar-mask', (1, 860, 1919, 1079), (1, 955, 1919, 1025, 1), (1600, 880, 1755, 940, 1)]
            api.analogFineTuneIconMask = ['analogFineTuneIcon-mask', (714, 1037, 774, 1079)]
            api.analogFrequancyMask = ['analogFrequancy-mask', (833, 480, 870, 518)]
            api.scanStatisticMask = ['scanStatistic-mask', (90, 55, 355, 95), (65, 185, 205, 510)]
            api.broadcastTypeMask = ['broadcastType-mask', (1650, 1045, 1730, 1070)]
        DEDENT
        elif api.UIName == 'panasonic' or api.UIName == 'titanium' :
        INDENT
            api.channelListMask = ['channelList-mask', (110, 45, 1815, 1035), (155, 180, 1755, 895, 1)]
            api.scrambledMask = ['scrambled-mask', (675, 400, 1245, 680)]
            api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 900, 1)]
            api.analogFineTuneIconMask = ['analogFineTuneIcon-mask', (1220, 487, 1265, 522)]
            api.analogFrequancyMask = ['analogFrequancy-mask', (735, 1030, 770, 1053)]
            api.scanStatisticMask = ['scanStatistic-mask', (90, 30, 375, 85), (105, 175, 325, 520)]
            api.broadcastTypeMask = ['broadcastType-mask', (1440, 1035, 1530, 1065)]
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="11" endline="82">
def test(api) :
INDENT
    try :
    INDENT
        Case101(api)
        Case102(api)
        Case103(api)
        Case104(api)
        Case105(api)
        Case106(api)
        Case107(api)
        Case108(api)
        Case109(api)
        Case110(api)
        Case111(api)
        Case112(api)
        Case113(api)
        Case114(api)
        Case115(api)
        Case116(api)
        Case117(api)
        Case118(api)
        Case119(api)
        Case120(api)
        Case121(api)
        Case122(api)
        Case123(api)
        Case124(api)
        Case125(api)
        Case201(api)
        Case202(api)
        Case203(api)
        Case204(api)
        Case205(api)
        Case206(api)
        Case207(api)
        Case208(api)
        Case209(api)
        Case210(api)
        Case211(api)
        Case212(api)
        Case301(api)
        Case302(api)
        Case303(api)
        Case401(api)
        Case402(api)
        Case403(api)
        Case404(api)
        Case405(api)
        Case406(api)
        Case407(api)
        Case408(api)
        Case409(api)
        Case410(api)
        Case501(api)
        Case502(api)
        Case503(api)
        Case504(api)
        Case505(api)
        Case506(api)
        Case507(api)
        Case508(api)
        Case509(api)
        Case510(api)
        Case511(api)
        Case512(api)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="83" endline="111">
def Case101(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_01')
    api.setTestCaseDescription('DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                api.channelSearchCompleteControl(timeout = 300)
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 2
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="112" endline="148">
def Case102(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_02')
    api.setTestCaseDescription('DVB-C + DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 1 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
    DEDENT
    previousCaseNumber = 2
    api.end(False)
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="149" endline="177">
def Case103(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_03')
    api.setTestCaseDescription('DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 3
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="178" endline="216">
def Case104(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_04')
    api.setTestCaseDescription('DVB-C + DVB-S Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 3 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.ANTENNAINSTALLATION)
                    setDiseqC(api, diseqc = ['', '', '', 'astra 1'])
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4_withChannel)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 4
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="217" endline="245">
def Case105(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_05')
    api.setTestCaseDescription('DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 5
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="246" endline="282">
def Case106(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_06')
    api.setTestCaseDescription('DVB-C + Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 5 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 6
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="283" endline="301">
def Case107(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_07')
    api.setTestCaseDescription('No Channel Messsage')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 7
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="302" endline="330">
def Case108(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_08')
    api.setTestCaseDescription('DVB-S (Astra 1) Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 7 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                DEDENT
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 8
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="331" endline="367">
def Case109(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_09')
    api.setTestCaseDescription('DVB-S (Astra 1) + DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 8 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 9
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="368" endline="396">
def Case110(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_10')
    api.setTestCaseDescription('DVB-S (Astra 1) Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 10
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="397" endline="433">
def Case111(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_11')
    api.setTestCaseDescription('DVB-S (Astra 1) + DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 10 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 11
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="434" endline="462">
def Case112(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_12')
    api.setTestCaseDescription('DVB-S (Astra 1) Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 12
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="463" endline="499">
def Case113(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_13')
    api.setTestCaseDescription('DVB-S (Astra 1) + Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 12 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 13
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="500" endline="528">
def Case114(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_14')
    api.setTestCaseDescription('Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 14
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="529" endline="565">
def Case115(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_15')
    api.setTestCaseDescription('Analogue + DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 14 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 15
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="566" endline="594">
def Case116(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_16')
    api.setTestCaseDescription('Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 16
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="595" endline="631">
def Case117(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_17')
    api.setTestCaseDescription('Analogue + DVB-S Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG or not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 16 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4_withChannel)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 17
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="632" endline="660">
def Case118(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_18')
    api.setTestCaseDescription('Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 18
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="661" endline="697">
def Case119(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_19')
    api.setTestCaseDescription('Analogue + DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 18 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 19
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="698" endline="726">
def Case120(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_20')
    api.setTestCaseDescription('DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 20
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="727" endline="765">
def Case121(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_21')
    api.setTestCaseDescription('DVB-T + DVB-S Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 20 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.ANTENNAINSTALLATION)
                    api.setDiseqC(api, diseqc = diseqc)
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4_withChannel)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 21
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="766" endline="794">
def Case122(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_22')
    api.setTestCaseDescription('DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 22
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="795" endline="831">
def Case123(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_23')
    api.setTestCaseDescription('DVB-T + Analogue Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 22 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_ANALOGUE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 23
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="832" endline="860">
def Case124(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_24')
    api.setTestCaseDescription('DVB-T Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                api.channelSearchCompleteControl()
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 24
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="861" endline="897">
def Case125(api) :
INDENT
    global previousCaseNumber
    api.setTestCaseName('Installation_BasedOn_Menu_01_25')
    api.setTestCaseDescription('DVB-T + DVB-C Automatic Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                if previousCaseNumber ! = 24 :
                INDENT
                    api.doFTI(api, diseqc = ['', '', '', 'astra 1'])
                    sleep(10)
                    api.testImages('noChannel-ref')
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_AERIAL)
                    api.channelSearchCompleteControl()
                DEDENT
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_CABLE)
                    api.channelSearchCompleteControl()
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+5'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    previousCaseNumber = 25
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="898" endline="922">
def Case201(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_01')
    api.setTestCaseDescription('DVB-T Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_AERIAL + ['down', '45', 'down+2', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="923" endline="945">
def Case202(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_02')
    api.setTestCaseDescription('DVB-S (Turksat) Satellite Network Fast Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 + ['down', '12380', 'down', 'GOFIRSTITEM', 'down', '27500', 'down', 'right', 'ok'])
                api.channelSearchCompleteControl()
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC2-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="946" endline="969">
def Case203(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_03')
    api.setTestCaseDescription('DVB-S (LH-Eutelsat) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_1 + ['down', '10721', 'down', 'right', 'down', '22000', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="970" endline="993">
def Case204(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_04')
    api.setTestCaseDescription('DVB-S (HH-Turksat) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 + ['down', '12329', 'down', 'right', 'down', '06666', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="994" endline="1017">
def Case205(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_05')
    api.setTestCaseDescription('DVB-S (LV-Astra 1) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4 + ['down', '11347', 'down*2', '22000', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', '2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1018" endline="1041">
def Case206(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_06')
    api.setTestCaseDescription('DVB-S (HV-Hotbird) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_3 + ['down', '12558', 'down*2', '27500', 'down+5', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', '8+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1042" endline="1065">
def Case207(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_07')
    api.setTestCaseDescription('DVB-S2 (Astra 1) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_4 + ['down', '11494', 'down', 'right', 'down', '22000', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', '2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1066" endline="1089">
def Case208(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_08')
    api.setTestCaseDescription('Analogue (C12 224.25MHz) Manual Channel Scan')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3', '12', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', limit = 70)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1090" endline="1119">
def Case209(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_09')
    api.setTestCaseDescription('Analogue (C12 224.25MHz) Fine Tune +4')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3', '12', 'down', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.grabImage('PIC4')
                api.sendKeys(['exit2+7', '1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', limit = 70)
                api.audioCompare(api)
                api.sendKeys(api.ANALOGUE_FINE_TUNE + ['right*5+1', 'ok+2', 'exit2+7', 'info+1'])
                api.testImages('PIC3-ref', mask = api.analogFineTuneIconMask)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.testImages('PIC4', mask = api.analogFrequancyMask, expectMatch = False)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1120" endline="1149">
def Case210(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_10')
    api.setTestCaseDescription('Analogue (C12 224.25MHz) Fine Tune -5')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3', '12', 'down', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.grabImage('PIC4')
                api.sendKeys(['exit2+7', '1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', limit = 70)
                api.audioCompare(api)
                api.sendKeys(api.ANALOGUE_FINE_TUNE + ['left*5+1', 'ok+2', 'exit2+7', 'info+1'])
                api.testImages('PIC3-ref', mask = api.analogFineTuneIconMask)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.testImages('PIC4', mask = api.analogFrequancyMask, expectMatch = False)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1150" endline="1179">
def Case211(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_11')
    api.setTestCaseDescription('Analogue (C12 224.25MHz) Fine Tune 0')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['down*3', '12', 'down', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.grabImage('PIC4')
                api.sendKeys(['exit2+7', '1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', limit = 70)
                api.audioCompare(api)
                api.sendKeys(api.ANALOGUE_FINE_TUNE + ['right*5+1', 'ok+2', 'exit2+7', 'info+1'])
                api.testImages('PIC3-ref', mask = api.analogFineTuneIconMask)
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_ANALOGUE + ['up+2'])
                api.testImages('PIC4', mask = api.analogFrequancyMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1180" endline="1203">
def Case212(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_02_12')
    api.setTestCaseDescription('DVB-C (338.00 MHz) Manual Channel Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_CABLE + ['down', '33800', 'ok'])
                api.channelSearchCompleteControl(60)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['exit2+7', 'info+1'])
                api.testImages('PIC2-ref', mask = api.infoBarMask)
                api.audioCompare(api)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1204" endline="1228">
def Case301(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_03_01')
    api.setTestCaseDescription('DVB-C (346.00 Mhz) Cable Network Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doPowerCycle(api)
                api.stopPlayStream(api, streamFile = '3_UM_CI+_TS131_346MHz_QAM256_DLID42_01082014.ts', macro = api.DTV_DVB_C_346MHZ)
                api.doFTI(api)
                api.testImages('noChannel-ref')
                api.sendKeys(api.NETWORK_CHANNEL_SCAN + ['down', 'ok', 'down', '34600', 'ok'])
                api.channelSearchCompleteControl()
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC2-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1229" endline="1251">
def Case302(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_03_02')
    api.setTestCaseDescription('DVB-S (Turksat) Satellite Network Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.MANUAL_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2 + ['down', '12380', 'down', 'GOFIRSTITEM', 'down', '27500', 'down', 'right', 'ok'])
                api.channelSearchCompleteControl()
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC2-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1252" endline="1264">
def Case303(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_03_03')
    api.setTestCaseDescription('DVB-T (INTRF1) Aerial Network Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1265" endline="1309">
def Case401(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_01')
    api.setTestCaseDescription('DVB-S (Full Diseqc) FTI Auto Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_FULL)
                api.channelSearchCompleteControl(3300)
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_1 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC1-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_2 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_3 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC5-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC6-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_4 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC7-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC8-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1310" endline="1333">
def Case402(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_02')
    api.setTestCaseDescription('DVB-S (Turksat) FTI Auto Search')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['', 'turksat', '', ''])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.AUTOMATIC_CHANNEL_SCAN_DIGITAL_SATELLITE_DISEQC_2)
                api.channelSearchCompleteControl()
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC1-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC2-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1334" endline="1347">
def Case403(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_03')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1348" endline="1360">
def Case404(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_04')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1361" endline="1373">
def Case405(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_05')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1374" endline="1386">
def Case406(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_06')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1387" endline="1399">
def Case407(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_07')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1400" endline="1412">
def Case408(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_08')
    api.setTestCaseDescription('DVB-S Bisskey Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1413" endline="1432">
def Case409(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_09')
    api.setTestCaseDescription('DVB-S Bisskey Menu Item Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api)
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.OTHER_SETTINGS_BISS_KEY)
                api.testImages('PIC1-ref', msg = 'Other Settings menu altinda Bisskey menusu cikmamalidir.')
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1433" endline="1478">
def Case410(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_04_10')
    api.setTestCaseDescription('DVB-S Download Satcodx')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, diseqc = ['eutelsat 7a', 'turksat', 'hotbird', 'astra 1'])
                sleep(10)
                api.testImages('noChannel-ref')
                api.sendKeys(api.SATCODX + ['down', 'ok+2', 'ok+5'])
                api.testImages('PIC1-ref')
                sleep(100)
                if api.testImages('noChannel-ref', expectMatch = False) [0] :
                INDENT
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_1 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC2-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC3-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_2 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC4-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC5-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_3 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC6-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC7-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                    api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY_DISEQC_4 + ['1+10', 'ok+2', 'green+5'])
                    api.testImages('PIC8-ref', mask = api.channelListMask)
                    api.sendKeys(['up+5'])
                    api.testImages('PIC9-ref', mask = api.channelListMask)
                    api.sendKeys(['exit2+10'])
                    api.audioCompare(api)
                DEDENT
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1479" endline="1504">
def Case501(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_01')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-T) - Favourite Aerial')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, satellite = 1, favNetType = 'aerial', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 2, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1505" endline="1529">
def Case502(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_02')
    api.setTestCaseDescription('FTI Auto Search - (DVB-T, Analogue) - Favourite Analogue')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.ANALOG or not api.DVBT :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, analogue = 1, favNetType = 'analogue')
                api.channelSearchCompleteControl(2000, counts = 2, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1530" endline="1555">
def Case503(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_03')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-C) - Favourite Satellite')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, cable = 1, satellite = 1, favNetType = 'satellite', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 2, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1556" endline="1581">
def Case504(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_04')
    api.setTestCaseDescription('FTI Auto Search - (DVB-C, Analogue) - Favourite Analogue')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, cable = 1, analogue = 1, favNetType = 'analogue')
                api.channelSearchCompleteControl(1800, counts = 2, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1582" endline="1607">
def Case505(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_05')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, Analogue) - Favourite Satellite')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, analogue = 1, satellite = 1, favNetType = 'satellite', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 2, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1608" endline="1633">
def Case506(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_06')
    api.setTestCaseDescription('FTI Auto Search - (DVB-T, DVB-C, Analogue) - Favourite Aerial')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBC or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, cable = 1, analogue = 1, aerial = 1, favNetType = 'aerial')
                api.channelSearchCompleteControl(1800, counts = 3, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1634" endline="1659">
def Case507(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_07')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-T, Analogue) - Favourite Aerial')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBT or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, analogue = 1, satellite = 1, favNetType = 'aerial', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 3, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1660" endline="1685">
def Case508(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_08')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-T, DVB-C) - Favourite Cable')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBC or not api.DVBS :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, cable = 1, satellite = 1, favNetType = 'cable', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 3, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1686" endline="1711">
def Case509(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_09')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-C, Analogue) - Favourite Satellite')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBC or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, analogue = 1, cable = 1, satellite = 1, favNetType = 'satellite', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(1800, counts = 3, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1712" endline="1737">
def Case510(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_10')
    api.setTestCaseDescription('FTI Auto Search - (DVB-S Turksat, DVB-T, DVB-C, Analogue) - Favourite Aerial')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBS or not api.DVBT or not api.DVBC or not api.ANALOG :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, cable = 1, satellite = 1, analogue = 1, favNetType = 'aerial', diseqc = ['', 'turksat', '', ''])
                api.channelSearchCompleteControl(3600, counts = 4, finish = False)
                api.testImages('PIC1-ref', mask = api.scanStatisticMask)
                api.sendKeys(['ok+10', 'exit2+10', 'info+1'])
                api.testImages('PIC2-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['progup+10', 'info+1'])
                api.testImages('PIC3-ref', mask = api.broadcastTypeMask)
                api.sendKeys(['1+10', 'ok+2', 'green+5'])
                api.testImages('PIC4-ref', mask = api.channelListMask)
                api.sendKeys(['up+5'])
                api.testImages('PIC5-ref', mask = api.channelListMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1738" endline="1756">
def Case511(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_11')
    api.setTestCaseDescription('FTI DVB-C Auto Search - Encrypted Channels Enable')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, cable = 1)
                api.channelSearchCompleteControl(counts = 1)
                api.sendKeys(['ok+10'] + api.CHANNEL_LIST_SCRAMBLED + ['exit2+10'])
                api.testImages('scrambled-ref', mask = api.scrambledMask)
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__5_tcg.py" startline="1757" endline="1779">
def Case512(api) :
INDENT
    api.setTestCaseName('Installation_BasedOn_Menu_05_12')
    api.setTestCaseDescription('FTI Auto Search DVB-T, DVB-C Favourite Aerial - Encrypted Channels Disabled')
    if not api.start() :
    INDENT
        try :
        INDENT
            if not api.DVBT or not api.DVBC :
            INDENT
                api.updateTestResult('N/A')
            DEDENT
            else :
            INDENT
                api.doFTI(api, aerial = 1, cable = 1, scanEncryptedChannels = 0)
                api.channelSearchCompleteControl(counts = 2)
                CHANNEL_LIST_SCRAMBLED = api.CHANNEL_LIST_SCRAMBLED
                CHANNEL_LIST_SCRAMBLED [len(CHANNEL_LIST_SCRAMBLED) - 1] = ''
                CHANNEL_LIST_SCRAMBLED.remove('')
                api.sendKeys(['ok+10'] + CHANNEL_LIST_SCRAMBLED)
                api.testImages('PIC1-ref')
                api.sendKeys(['exit2*2/3'])
            DEDENT
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="105" endline="137">
def test(api) :
INDENT
    global reportID
    try :
    INDENT
        api.activateDevices(** devConf)
        try :
        INDENT
            api.manual = Manual(1)
            print '\nMANUAL_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        if auto_getReportID or auto_readTVInfo :
        INDENT
            readTVInfo(api)
        DEDENT
        setDeviceParameters(api)
        if test_Devices :
        INDENT
            checkTestDevices(api)
        DEDENT
        if auto_getReportID :
        INDENT
            msg = 'ReportID almak icin gonderilen bilgiler:\n-------------------------------------------\n'
            for i in WebMonitor_NewTest_dict :
            INDENT
                msg += str(i) + ': ' + str(WebMonitor_NewTest_dict [i]) + '\n'
            DEDENT
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
            api.manual.getResult()
            reportID = getReportID(WebMonitor_NewTest_dict)
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; REPORTID: ' + str(reportID)])
            api.manual.getResult()
        DEDENT
        if not reportID :
        INDENT
            api.writeToLog('###### getReportID ERROR ######\n Web arayuzunden reportID alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            reportID = 0
        DEDENT
        makeTVSettingsGlobal(api)
        readyForTest(api)
        api.getTV_IP = _getTV_IP
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="138" endline="164">
def setDeviceParameters(api) :
INDENT
    try :
    INDENT
        api.setCaptureDevice(deviceSettings [0])
        if (deviceSettings [0] == 3) :
        INDENT
            tvIP = _getTV_IP(api) [0]
            api.setTvIP(tvIP)
        DEDENT
        api.setPictureAlgorithm(deviceSettings [1])
        if (deviceSettings [1] == 1) :
        INDENT
            api.setPSNRLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        elif (deviceSettings [1] == 4) :
        INDENT
            api.setSSIMLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        api.setResizeCapture(deviceSettings [2])
        api.setRotateCapture(deviceSettings [3])
        api.setAudioCaptureDevice(deviceSettings [4])
        api.setVideoAnalysisDevice(deviceSettings [5])
        api.generateTCSequence(0)
        try :
        INDENT
            api.dta = DTA(1)
            print '\nSTREAM_PLAYER_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="165" endline="182">
def checkTestDevices(api) :
INDENT
    try :
    INDENT
        api.setReportId(0, testName = 'DEVICE_CONTROL')
        api.setTestCaseName('init')
        api.setTestCaseDescription('Test and Device Configuration')
        if not api.start(force = True) :
        INDENT
            try :
            INDENT
                print api.grabImage('test1')
                sleep(1)
                print api.grabImage('test2')
            DEDENT
            except :
            INDENT
                api.printError()
            DEDENT
            api.end(False)
            print 'END: init'
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="183" endline="197">
def makeTVSettingsGlobal(api) :
INDENT
    try :
    INDENT
        api.projectName = projectName.lower()
        api.UIName = UIName.lower()
        api.customerName = customerName
        api.countryName = countryName
        api.ANALOG = dvbSettings [0]
        api.DVBC = dvbSettings [1]
        api.DVBT = dvbSettings [2]
        api.DVBS = dvbSettings [3]
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="198" endline="207">
def readyForTest(api) :
INDENT
    try :
    INDENT
        masterPath = os.path.join(vestaMasterPath, 'InstallationBasedOnMenu', UIName.lower(), projectName.title())
        testName = testSuiteName + '_' + projectName.title() + '_' + SWVersion + '_svn' + SVNNumber
        api.setTestMasterPath(masterPath)
        api.setReportId(reportID, testName)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="208" endline="352">
def readTVInfo(api) :
INDENT
    try :
    INDENT
        global SWVersion, SVNNumber, projectName, hardwareName, UIName, countryName, customerName, WebMonitor_NewTest_dict
        _SWVersion = _SVNNumber = _projectName = _UIName = _hardwareName = ramSize = PMVersion = mbootVersion = mfcVersion = languageName = ''
        langList = {
            'dan' : 'danish', 'ger' : 'german', 'est' : 'estonian', 'eng' : 'english', 'spa' : 'spanish', 'gre' : 'greek',
            'fre' : 'french', 'gla' : 'gaelic', 'hrv' : 'croatian', 'ita' : 'italian', 'lav' : 'latvian', 'lit' : 'lithuanian',
            'hun' : 'hungarian', 'dut' : 'dutch', 'nor' : 'norwegian', 'pol' : 'polish', 'por' : 'portuguese', 'rus' : 'russian',
            'rum' : 'romanian', 'alb' : 'albanian', 'slv' : 'slovanian', 'slo' : 'slovak', 'srp' : 'serbian', 'fin' : 'finnish',
            'swe' : 'swedish', 'tur' : 'turkish', 'cze' : 'czech', 'ukr' : 'ukranian', 'bul' : 'bulgarian', 'ara' : 'arabic',
            'per' : 'persian', 'heb' : 'hebrew', 'bel' : 'belarussian', 'mac' : 'macedonian', 'mon' : 'montenegrin',
            'kaz' : 'kazakh', 'tha' : 'Thai'}
        countryList = {
            'aus' : 'australia', 'dnk' : 'denmark', 'fin' : 'finland', 'fra' : 'france', 'deu' : 'germany', 'ita' : 'italy',
            'nld' : 'netherlands', 'nor' : 'norway', 'pol' : 'poland', 'prt' : 'portugal', 'esp' : 'spain', 'swe' : 'sweden',
            'gbr' : 'united_kingdom', 'alb' : 'albania', 'aut' : 'austria', 'bel' : 'belgium', 'bgr' : 'bulgaria', 'chn' : 'china',
            'cze' : 'czech_republic', 'est' : 'estonia', 'grc' : 'greece', 'hun' : 'hungary', 'isr' : 'israel', 'lva' : 'latvia',
            'ltu' : 'lithuania', 'mkd' : 'macedonia', 'rou' : 'romania', 'rus' : 'russia', 'srb' : 'serbia', 'svk' : 'slovakia',
            'svn' : 'slovenia', 'che' : 'switzerland', 'tur' : 'turkey', 'hrv' : 'croatia', 'ice' : 'iceland', 'lux' : 'luxembourg',
            'ita' : 'san_marino', 'nzl' : 'new_zealand', 'mne' : 'montenegro', 'ukr' : 'ukraine', 'imn' : 'isle_of_man',
            'sau' : 'saudi_arabia', 'irn' : 'persia', 'are' : 'united_arab_emirates', 'kwt' : 'kuwait', 'omn' : 'oman',
            'bhr' : 'bahrain', 'qat' : 'qatar', 'blr' : 'belarussia', 'irl' : 'ireland', 'irq' : 'iraq', 'jor' : 'jordan',
            'lbn' : 'lebanon', 'ind' : 'india', 'col' : 'colombia', 'cyp' : 'cyprus', 'tha' : 'thailand', 'gha' : 'ghana',
            'egy' : 'egypt', 'lbr' : 'liberia', 'tgo' : 'togo', 'sle' : 'sierra_leone', 'civ' : 'cote_d_ivoire', 'ken' : 'kenya',
            'tza' : 'tanzania', 'moz' : 'mozambique', 'cod' : 'congo', 'sen' : 'senegal', 'nga' : 'nigeria', 'eth' : 'ethiopia',
            'zmb' : 'zambia', 'uga' : 'uganda', 'arg' : 'argentina', 'ang' : 'angola'}
        result = api.logKeywordsSearch(
            ['TV INFO', '#*project:', '#*hardware:', '#*ram:', '#*sw version:',
                '#*svn no:', '#*mboot ver:', '#*mfc ver:', '#*ip address:',
                '#*ui name:', '#*lang:', '#*country:', '#*customer:', 'Stbc ver:'],
            command = ['UART_uartexit', 'UART_GETTVINFO+0.5'], counts = 1, sTypes = 1, timeout = 2, portIndex = 0)
        print '-----------> ', result, '<-------------'
        msg = 'GETTVINFO komutuyla alinan bilgiler:\n-------------------------------------------\n'
        for i in range(len(result [0])) :
        INDENT
            msg += str(result [0] [i]) + '\n'
        DEDENT
        api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
        api.manual.getResult()
        if result [0] [0] and result [0] [0] [0].find('TV INFO') > - 1 :
        INDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                _projectName = result [0] [1] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _hardwareName = result [0] [2] [0].split(': ') [1].strip().upper().replace('NC', '')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                ramSize = result [0] [3] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _SWVersion = result [0] [4] [0].split(': ') [1].strip().replace('V.', 'v')
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _SVNNumber = result [0] [5] [0].split(': ') [1].strip()
            DEDENT
            if result [0] [6] and result [0] [6] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [6] [0].rsplit(':', 1)
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1].strip()
                    DEDENT
                    aaa [0] = aaa [0].rsplit(': ', 1) [1].split('-')
                    mbootVersion = aaa [0] [1].split(' ') [0]
                    _hardwareName = aaa [0] [0].replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [7] and result [0] [7] [0] :
            INDENT
                mfcVersion = result [0] [7] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [8] and result [0] [8] [0] :
            INDENT
                tvIP = result [0] [8] [0].split(': ') [1].strip().upper()
                api.setTvIP(tvIP)
            DEDENT
            if result [0] [9] and result [0] [9] [0] :
            INDENT
                _UIName = result [0] [9] [0].split(': ') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [10] and result [0] [10] [0] :
            INDENT
                languageName = result [0] [10] [0].split(': ') [1].strip().title()
            DEDENT
            if result [0] [11] and result [0] [11] [0] :
            INDENT
                countryName = result [0] [11] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [12] and result [0] [12] [0] :
            INDENT
                customerName = result [0] [12] [0].split(': ') [1].strip().upper()
            DEDENT
        DEDENT
        else :
        INDENT
            result = api.logKeywordsSearch(
                ['MBoot Version:', 'DDR  Size:        ', '\#\*V\.|\#\*SW_VER: V\.', '#*Build info', '#*UI name:', '_hwprofile\.bin'],
                patterns = [' MB\d{1,5}\-\d{1,6} PM ver: \d{1,6}| MB\d{1,6}NC\-\d{1,5} PM ver: \d{1,6}| MB\d{1,5}\-\d{1,6}| MB\d{1,6}NC\-\d{1,5}',
                    '\d{1,5}MB|\d{1,5}\.\d{1,5}GB', 'V\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|V\.\d{1,3}\.\d{1,3}\.\d{1,3}[a-zA-Z]', '\[ \d{1,6}\]|\[\d{1,7}\]',
                    '', ' MB\d{1,5}_hwprofile\.bin| mb\d{1,5}_hwprofile\.bin| t\d{1,5}_hwprofile\.bin| T\d{1,5}_hwprofile\.bin'],
                command = ['poweroff+5', 'poweron+10', '00+35', 'UART_aa', 'UART_GETSWVERSION+1', 'UART_aa', 'UART_BUILDINFO+1', 'UART_aa', 'UART_GETUINAME+1', 'UART_aa', 'UART_ls ../conf+1', 'UART_aa', 'UART_ls /conf+1'], counts = 1, sTypes = 1, timeout = 1, portIndex = 0)
            if result [0] [0] and result [0] [0] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [0] [0].split(': ')
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1]
                    DEDENT
                    mbootVersion = aaa [0].replace('PM ver', '').strip().split('-') [1]
                    _hardwareName = aaa [0].replace('PM ver', '').strip().split('-') [0].upper().replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                ramSize = result [0] [1] [0]
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _SWVersion = result [0] [2] [0].replace('V.', 'v')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                _SVNNumber = result [0] [3] [0].replace('[', '').replace(']', '').strip()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _UIName = result [0] [4] [0].split('#*UI name:') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _hardwareName = result [0] [5] [0].split('_') [0].upper().strip().replace('NC', '')

            DEDENT
        DEDENT
        if not projectName :
        INDENT
            projectName = _projectName
        DEDENT
        if not SWVersion :
        INDENT
            SWVersion = _SWVersion
        DEDENT
        if not SVNNumber :
        INDENT
            SVNNumber = _SVNNumber
        DEDENT
        if not UIName :
        INDENT
            UIName = _UIName
        DEDENT
        if not projectN_vs_hardwareN_dict.get(projectName.lower(), False) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a project: %s\n' % (projectName.lower()), fileName = 'ERROR')
            return
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = _hardwareName
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = projectN_vs_hardwareN_dict.get(projectName.lower(), False).upper()
            if not hardwareName :
            INDENT
                api.writeToLog('Please Update Project Hardware Dict! Since there is no hardware for project: %s\n' % (projectName.lower()), fileName = 'ERROR')
                return
            DEDENT
        DEDENT
        if not (hardwareName in projectN_vs_hardwareN_dict.get(projectName.lower(), False)) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a hardware: %s\n' % (hardwareName), fileName = 'ERROR')
            return
        DEDENT
        if not SWVersion or not SVNNumber or not UIName :
        INDENT
            api.writeToLog('###### ERROR ######\n version, SVN, UI ve hardware bilgisi alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            api.writeToLog('version: %s SVN: %s UI: %s\n' % (SWVersion, SVNNumber, UIName), fileName = 'ERROR', timestamp = False)
            return
        DEDENT
        languageName = langList.get(languageName.lower(), 'English').title()
        countryName = countryList.get(countryName.lower(), countryName).title()

        WebMonitor_NewTest_dict ['project'] = projectName
        WebMonitor_NewTest_dict ['hardware_name'] = hardwareName
        WebMonitor_NewTest_dict ['hardware'] = hardwareName + ' ' + ramSize
        WebMonitor_NewTest_dict ['version'] = SWVersion
        WebMonitor_NewTest_dict ['SVN'] = SVNNumber
        WebMonitor_NewTest_dict ['pm'] = PMVersion
        WebMonitor_NewTest_dict ['romboot'] = mbootVersion
        WebMonitor_NewTest_dict ['mfc'] = mfcVersion
        WebMonitor_NewTest_dict ['ui'] = UIName
        WebMonitor_NewTest_dict ['language'] = languageName

    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="353" endline="362">
def getReportID(data) :
INDENT
    import urllib, urllib2
    url = 'http://veargd13262/vesta2/add_test.php'
    data = urllib.urlencode(data)
    content = urllib2.urlopen(url = url, data = data).read()
    reportID = 0
    if str(content).isdigit() :
    INDENT
        reportID = int(content)
    DEDENT
    return reportID
DEDENT
</source>
<source file="systems/Vestel-Code/Installation Based On Menu/ibom__1_init.py" startline="363" endline="378">
def _getTV_IP(api) :
INDENT
    try :
    INDENT
        api.TV_IP = ['']
        if api.captureDevice == 3 :
        INDENT
            for i in range(5) :
            INDENT
                result = api.logKeywordsSearch(['#*IPaddr:|#*IP|addr:'], 1, command = ['UART_aa', 'UART_get_IP_address'], sTypes = 1, patterns = ['(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'])
                api.TV_IP = eval(str(result).replace('[[]]', "''").replace("[['", "'").replace("']]", "'"))
                print 'TV IP: ' + ''.join(api.TV_IP).replace('10.108', ', 10.108') [2 :].replace('10.108', ', 10.108').replace('192.168', ', 192.168') [2 :]
                if '' in api.TV_IP :
                INDENT
                    sleep(3)
                DEDENT
                else :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
    return api.TV_IP
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="5" endline="13">
def test(api) :
INDENT
    try :
    INDENT
        Case01(api)
        Case02(api)
        Case03(api)
        Case04(api)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="14" endline="32">
def Case01(api) :
INDENT
    api.setTestCaseDescription('Init')
    api.setTestCaseName('Init')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.doFTI(api)
            api.sendKeys(api.IMPORT_CHANNEL_LIST_FTI)
            api.updateTestResult('PASS')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
    Light_Chlist_Control(api)
    Light_Chlist_FilterControl1(api)
    Light_Chlist_FilterFavourite(api)
    Light_Chlist_FilterControl2(api)
    Light_Chlist_FilterControl3(api)
    Light_Chlist_FilterControl4(api)
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="33" endline="42">
def Case02(api) :
INDENT
    Advance_Chlist_Watch(api)
    Advance_Chlist_Delete(api)
    Advance_Chlist_EditChannelName(api)
    Advance_Chlist_Lock(api)
    Advance_Chlist_Move(api)
    Advance_Chlist_TagUntagAll(api)
    Advance_Chlist_TagUntag(api)
    Advance_Chlist_Jump(api)
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="43" endline="53">
def Case03(api) :
INDENT
    Advance_Chlist_MultiFav(api)
    Advance_Chlist_MultiFav_Filter_Network(api)
    Advance_Chlist_MultiFav_Filter_TV_Radio(api)
    Advance_Chlist_MultiFav_Filter_Free_CAS(api)
    Advance_Chlist_MultiFav_Filter_Sort(api)
    Advance_Chlist_MultiFav_Filter_HD_SD(api)
    Advance_Chlist_MultiFav_Filter_Satellite(api)
    Advance_Chlist_MultiFav_Filter_A_Z(api)
    Advance_Chlist_MultiFav_Filter_Combination(api)
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="54" endline="65">
def Case04(api) :
INDENT
    Advance_Chlist_Filter_Network(api)
    Advance_Chlist_Filter_TV_Radio(api)
    Advance_Chlist_Filter_Free_CAS(api)
    Advance_Chlist_Filter_Sort(api)
    Advance_Chlist_Filter_HD_SD(api)
    Advance_Chlist_Filter_Favourite(api)
    Advance_Chlist_Filter_SatelliteList(api)
    Advance_Chlist_Filter_A_Z(api)
    Advance_Chlist_Filter_Combination1(api)
    Advance_Chlist_Filter_Combination2(api)
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="66" endline="106">
def Light_Chlist_Control(api) :
INDENT
    api.setTestCaseName('Light_Chlist_Control')
    api.setTestCaseDescription('Light Channel List Control')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber('ATV', 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(['ok+3'])
            api.testImages('pic01-ref', mask = api.lightChannelListMask, msg = 'Light kanal listesi acilmalidir.')
            api.sendKeys(['progup+3'])
            api.testImages('pic02-ref', mask = api.lightChannelListMask, msg = 'Sayfa ilerlemelidir/degismelidir.')
            api.sendKeys(['progdown+3'])
            api.testImages('pic03-ref', mask = api.lightChannelListMask, msg = 'Sayfa geriye gitmelidir/degismelidir.')
            api.sendKeys(['up*5+3'])
            api.testImages('pic04-ref', mask = api.lightChannelListMask, msg = 'Daha onceki kanallarin isimleri kanal listesinde gorulmelidir. Navigasyon sirasinda bir problem olmamalidir.')
            api.testImages('blackScreen-ref', mask = api.blackScreenMask, expectMatch = False, msg = 'Goruntude bir problem olmamalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')
            api.sendKeys(['ok+3', 'down*7+3'])
            api.testImages('pic05-ref', mask = api.lightChannelListMask, msg = 'Daha sonraki kanallarin isimleri kanal listesinde gorulmelidir. Navigasyon sirasinda bir problem olmamalidir.')
            api.testImages('blackScreen-ref', mask = api.blackScreenMask, expectMatch = False, msg = 'Goruntude bir problem olmamalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')
            api.sendKeys(['ok+7', 'down*7+3', 'ok+7', 'info+1'])
            api.testImages('pic06-ref', mask = api.infoBarMask, msg = 'Kanala tune olundu.')
            api.testImages('blackScreen-ref', mask = api.blackScreenMask, expectMatch = False, msg = 'Izlemek icin kanal listesinden secilen kanal acilmalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (5, 0, 5), msg = 'Izlemek icin kanal listesinden secilen kanalda goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Izlemek icin kanal listesinden secilen kanalda seste bir problem olmamalidir.')
            api.sendKeys(['ok+3'])
            api.testImages('pic07-ref', mask = api.lightChannelListMask, msg = 'Light kanal listesini acildigi gorulmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="107" endline="279">
def Light_Chlist_FilterControl1(api) :
INDENT
    api.setTestCaseName('Light_Chlist_FilterControl1')
    api.setTestCaseDescription('Light Channel List - Filter - Single 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(['1+10'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + ['+3'])
            api.testImages('SatalliteOnly-ref', mask = api.filterChannelListMask, msg = 'Network Type Satellite only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            pageUpCnt = 0
            for i in range(1, 9) :
            INDENT
                if i % 3 ! = 0 :
                INDENT
                    api.testImages('SatalliteOnly_pageUp' + str(pageUpCnt).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde sadece Satellite kanallar gorunmelidir.')
                    api.sendKeys(['progup+0.5'])
                    pageUpCnt += 1
                DEDENT
                else :
                INDENT
                    api.sendKeys(['progup+0.5*60'])
                    pageUpCnt += 60
                DEDENT
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY + ['+3'])
            api.testImages('DigitalAerialOnly-ref', mask = api.filterChannelListMask, msg = 'Network Type Digital Aerial only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(4) :
            INDENT
                api.testImages('DigitalAerialOnly_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede Sadece Aerial kanallar olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY + ['+3'])
            api.testImages('DigitalCableOnly-ref', mask = api.filterChannelListMask, msg = 'Network Type Cable only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(4) :
            INDENT
                api.testImages('DigitalCableOnly_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede Sadece Cable kanallar olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY + ['+3'])
            api.testImages('AnalogOnly-ref', mask = api.filterChannelListMask, msg = 'Network Type Analog only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(1) :
            INDENT
                api.testImages('AnalogOnly_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede Sadece Analog kanallar olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['back+2'])
            api.sendKeys(api.CHANNEL_LIST_FILTER_ALL + ['+3'])
            api.testImages('NetworkTypeAll-ref', mask = api.filterChannelListMask, msg = 'Network Type All secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            pageUpCnt = 0
            for i in range(1, 9) :
            INDENT
                if i % 3 ! = 0 :
                INDENT
                    api.testImages('NetworkTypeAll_pageUp' + str(pageUpCnt).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Tum kanallar kanal listesinde gorunur olmalidir.(Analog, DVB-T, DVB-C, DVB-S-All satellites)')
                    api.sendKeys(['progup+0.5'])
                    pageUpCnt += 1
                DEDENT
                else :
                INDENT
                    api.sendKeys(['progup+0.5*60'])
                    pageUpCnt += 60
                DEDENT
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_RADIOONLY + ['+3'])
            api.testImages('RadioOnly-ref', mask = api.filterChannelListMask, msg = 'TV/Radio, Radio Only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('RadioOnly_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede Sadece Radio kanallar olmali')
                api.sendKeys(['progup+0.5*6'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_TVONLY + ['+3'])
            api.testImages('TvOnly-ref', mask = api.filterChannelListMask, msg = 'TV/Radio, Tv Only secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('TvOnly_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede Sadece TV kanallar olmali')
                api.sendKeys(['progup+0.5*30'])
            DEDENT
            api.sendKeys(['back+2'])
            api.sendKeys(api.FILTER_CHLIST_TVRADIOALL + ['+3'])
            api.testImages('TvRadioAll-ref', mask = api.filterChannelListMask, msg = 'TV/Radio, Tv/Radio All secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('TvRadioAll_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede tum TV/Radyo kanallar olmali')
                api.sendKeys(['progup+0.5*30'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_ENCRYPTED + ['+3'])
            api.testImages('Encrypted-ref', mask = api.filterChannelListMask, msg = 'Free/CAS, Encrypted secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('Encrypted_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede sadece Encrypted kanallar olmali')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_FREE + ['+3'])
            api.testImages('Free-ref', mask = api.filterChannelListMask, msg = 'Free/CAS, Free secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('Free_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Listede sadece Free kanallar olmali')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])
            api.sendKeys(api.FILTER_CHLIST_FREECAS_ALL + ['+3'])
            api.testImages('FreeCasAll-ref', mask = api.filterChannelListMask, msg = 'Free/CAS, All secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            pageUpCnt = 0
            for i in range(1, 9) :
            INDENT
                if i % 3 ! = 0 :
                INDENT
                    api.testImages('FreeCasAll' + str(pageUpCnt).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Tum kanallar kanal listesinde gorunur olmalidir.(Free ve Encrypted)')
                    api.sendKeys(['progup+0.5'])
                    pageUpCnt += 1
                DEDENT
                else :
                INDENT
                    api.sendKeys(['progup+0.5*60'])
                    pageUpCnt += 60
                DEDENT
            DEDENT
            api.sendKeys(['back+2'])
            api.sendKeys(api.FILTER_CHLIST_SORT_ALPH + ['+3'])
            api.testImages('Alphabetic-ref', mask = api.filterChannelListMask, msg = 'Sort, Alphabetic secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('Alphabetic_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesi alfabetik siralanmis olmalidir.')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_SORT_NUM + ['+3'])
            api.testImages('Numeric-ref', mask = api.filterChannelListMask, msg = 'Sort, numeric secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('Numeric_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesi numeric siralanmis olmalidir.')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_HDSD_SD + ['+3'])
            api.testImages('SD-ref', mask = api.filterChannelListMask, msg = 'HDSD, SD secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('SD_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde sadece SD kanallar olmalidir.')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])

            api.sendKeys(api.FILTER_CHLIST_HDSD_HD + ['+3'])
            api.testImages('HD-ref', mask = api.filterChannelListMask, msg = 'HDSD, HD secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(5) :
            INDENT
                api.testImages('HD_pageUp' + str(i).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde sadece HD kanallar olmalidir.')
                api.sendKeys(['progup+0.5'])
            DEDENT
            api.sendKeys(['back+2'])
            api.sendKeys(api.FILTER_CHLIST_HDSD_ALL + ['+3'])
            api.testImages('HDSDAll-ref', mask = api.filterChannelListMask, msg = 'HDSD, HD secilmelidir.')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            pageUpCnt = 0
            for i in range(1, 9) :
            INDENT
                if i % 3 ! = 0 :
                INDENT
                    api.testImages('HDSDAll' + str(pageUpCnt).rjust(3, '0') + '-ref', mask = api.lightChannelListMask, msg = 'Tum kanallar kanal listesinde gorunur olmalidir.(HD ve SD)')
                    api.sendKeys(['progup+0.5'])
                    pageUpCnt += 1
                DEDENT
                else :
                INDENT
                    api.sendKeys(['progup+0.5*60'])
                    pageUpCnt += 60
                DEDENT
            DEDENT
            api.sendKeys(['back+2'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="280" endline="354">
def Light_Chlist_FilterFavourite(api) :
INDENT
    api.setTestCaseName('Light_Chlist_FilterFavourite')
    api.setTestCaseDescription('Light Channel List - Filter - Favourite')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.EDIT_FAVOURITE + ['gofirstitem', 'right', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down', 'gofirstitem', 'right', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down*2', 'gofirstitem', 'right', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down*3', 'gofirstitem', 'right', 'exit2*2+3'])
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST)
            api.testImages('picChList-ref', mask = api.advanceChannelListMask, msg = 'Favorite kanallar eklenmeli')
            api.sendKeys(api.FILTER_CHLIST_FAVOURITE_4)
            api.testImages('picFav4-ref', mask = api.lightChannelListMask, msg = 'Favorite List 4 secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic1-ref', mask = api.lightChannelListMask, msg = 'Listede Favorite List 4teki kanallar olmali')

            api.sendKeys(api.FILTER_CHLIST_FAVOURITE_2)
            api.testImages('picFav2-ref', mask = api.lightChannelListMask, msg = 'Favorite List 2 secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic2-ref', mask = api.lightChannelListMask, msg = 'Listede Favorite List 2deki kanallar olmali')

            api.sendKeys(api.FILTER_CHLIST_FAVOURITE_3)
            api.testImages('picFav3-ref', mask = api.lightChannelListMask, msg = 'Favorite List 3 secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic3-ref', mask = api.lightChannelListMask, msg = 'Listede Favorite List 3teki kanallar olmali')

            api.sendKeys(api.FILTER_CHLIST_FAVOURITE_1)
            api.testImages('picFav1-ref', mask = api.lightChannelListMask, msg = 'Favorite List 1 secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic4-ref', mask = api.lightChannelListMask, msg = 'Listede Favorite List 1deki kanallar olmali')
            api.sendKeys(api.FILTER_CHLIST_FAVOURITE_NONE)
            api.testImages('picFavNone-ref', mask = api.lightChannelListMask, msg = 'Favorite List None secilmeli')
            api.sendKeys(['back+2'])
            for i in range(5, 12) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Listede tum kanallar olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['exit2*2+2'])
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.EDIT_FAVOURITE + ['gofirstitem', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down', 'gofirstitem', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down*2', 'gofirstitem', 'exit2*2+3'])
            api.sendKeys(['progup'])
            api.sendKeys(api.EDIT_FAVOURITE + ['down*3', 'gofirstitem', 'exit2*2+3'])
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST)
            api.testImages('picChListLast-ref', mask = api.advanceChannelListMask, msg = 'Favourite kanallar silinmeli')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="355" endline="413">
def Light_Chlist_FilterControl2(api) :
INDENT
    api.setTestCaseName('Light_Chlist_FilterControl2')
    api.setTestCaseDescription('Light Channel List - Filter - Single 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_ASTRA)
            api.testImages('picAstra-ref', mask = api.lightChannelListMask, msg = 'Satellite Only ve Astra secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic1-ref', mask = api.lightChannelListMask, msg = 'Listede Astra1 kanallari olmali')
            api.sendKeys(['clearosd+5'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_TURKSAT)
            api.testImages('picTurksat-ref', mask = api.lightChannelListMask, msg = 'Satellite Only ve Turksat secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic2-ref', mask = api.lightChannelListMask, msg = 'Listede Astra1 kanallari olmali')
            api.sendKeys(['clearosd+5'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_HOTBIRD)
            api.testImages('picHotbird-ref', mask = api.lightChannelListMask, msg = 'Satellite Only ve Hotbird secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic3-ref', mask = api.lightChannelListMask, msg = 'Listede Astra1 kanallari olmali')
            api.sendKeys(['clearosd+5'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_EUTELSAT)
            api.testImages('picEutelsat-ref', mask = api.lightChannelListMask, msg = 'Satellite Only ve Eutelsat secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic4-ref', mask = api.lightChannelListMask, msg = 'Listede Astra1 kanallari olmali')
            api.sendKeys(['clearosd+5'])
            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_ALL)
            api.testImages('picSatAll-ref', mask = api.lightChannelListMask, msg = 'Satellite Only ve ALL secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic5-ref', mask = api.lightChannelListMask, msg = 'Listede tum Satellite kanallari olmali')
            api.sendKeys(['clearosd+5'])

            api.sendKeys(api.FILTER_CHLIST_A_Z_A)
            api.testImages('picA-ref', mask = api.lightChannelListMask, msg = 'Alphabetic A secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic6-ref', mask = api.lightChannelListMask, msg = 'Listede A ile baslayan kanallar olmali')
            api.sendKeys(['clearosd+5'])
            api.sendKeys(api.FILTER_CHLIST_A_Z_ALL)
            api.testImages('picAlphAll-ref', mask = api.lightChannelListMask, msg = 'Alphabetic All secilmeli')
            api.sendKeys(['back+2'])
            api.testImages('pic7-ref', mask = api.lightChannelListMask, msg = 'Listede tum kanallar olmali')
            api.sendKeys(['clearosd+5'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="414" endline="485">
def Light_Chlist_FilterControl3(api) :
INDENT
    api.setTestCaseName('Light_Chlist_FilterControl3')
    api.setTestCaseDescription('Light Channel List - Filter - Combination 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])

            api.sendKeys(api.CHANNEL_LIST_FILTER_SATELLITE_ONLY)
            api.testImages('picSatOnly-ref', mask = api.filterChannelListMask, msg = 'Satellite Only secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(1, 8) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Listede Satellite kanallari olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['blue+1', 'down+1', 'gofirstitem+1', 'right+1'])
            api.testImages('picSATTVOnly-ref', mask = api.filterChannelListMask, msg = 'TV Only secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(8, 12) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde sadece satellite TV kanallari bulunmalidir.')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['blue+1', 'down+1*2', 'gofirstitem+1', 'right*2+1'])
            api.testImages('picSATTVEncOnly-ref', mask = api.filterChannelListMask, msg = 'Free/CAStan Encrypted secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic12-ref', mask = api.lightChannelListMask, msg = 'Listede encrypted satellite TV kanallari olmali')
            api.sendKeys(['blue+1', 'down+1*5', 'gofirstitem+1', 'right+1*2'])
            api.testImages('picSATTVEncHDOnly-ref', mask = api.filterChannelListMask, msg = ' HD/SDyi HD seciniz')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic13-ref', mask = api.lightChannelListMask, msg = 'Encrypted satellite HD TV kanallari bulunmalidir')
            api.sendKeys(['blue+1', 'down+1*3', 'gofirstitem+1', 'right+2*4'])
            api.testImages('picSATTVEncHDDOnly-ref', mask = api.filterChannelListMask, msg = 'A-Zden D secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic14-ref', mask = api.lightChannelListMask, msg = 'D harfi ile baslayan encrypted satellite HD TV kanallari bulunmalidir.')
            api.sendKeys(['blue+1', 'down+1*4', 'gofirstitem+2', 'right+2'])
            api.testImages('picSATTVEncHDDAlphOnly-ref', mask = api.filterChannelListMask, msg = 'Sort tan Alphabetic secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic15-ref', mask = api.lightChannelListMask, msg = 'D harfi ile baslayan encrypted satellite HD TV kanallari bulunmalidir ve alphabetic siralanmis olmalidir.')
            api.sendKeys(['blue', 'down*7', 'gofirstitem+2', 'right+2'])
            api.testImages('picSATTVEncHDDAlphEutelOnly-ref', mask = api.filterChannelListMask, msg = 'Satellite Listten Eutelsat seciniz secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic16-ref', mask = api.lightChannelListMask, msg = 'D harfi ile baslayan encrypted Eutelsat satellite HD TV kanallari bulunmalidir ve alphabetic siralanmis olmalidir.')
            api.sendKeys(['ok+10', 'info+0.5'])
            api.testImages('pic17-ref', mask = api.infoBarMask, msg = 'Kanalda problem olmamali')
            sleep(7)
            api.sendKeys(api.LIGHTCHLIST + ['blue+2'])
            api.testImages('pic18-ref', mask = api.filterChannelListMask, msg = 'eski filtreleme saklanmamis olmalidir')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(19, 26) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde tum kanallar bulunmalidir.')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['clearosd+5'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="486" endline="531">
def Light_Chlist_FilterControl4(api) :
INDENT
    api.setTestCaseName('Light_Chlist_FilterControl4')
    api.setTestCaseDescription('Light Channel List - Filter - Combination 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY)
            api.testImages('picSatOnly-ref', mask = api.filterChannelListMask, msg = 'Aerial Only secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(1, 3) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Listede Aerial kanallari olmali')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['blue+1', 'down+1', 'gofirstitem+1', 'right+1*2'])
            api.testImages('picAerRadOnly-ref', mask = api.filterChannelListMask, msg = 'Radio Only secilmeli')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic3-ref', mask = api.lightChannelListMask, msg = 'Listede Aerial Radio kanallari olmali')
            api.sendKeys(['ok+10', 'info+0.5'])
            api.testImages('pic4-ref', mask = api.infoBarMask, msg = 'Kanalda problem olmamali')
            api.checkAudio(msg = 'Mevcut radyo kanalinin sesinde bir problem olmamalidir.')
            api.sendKeys(api.LIGHTCHLIST + ['blue+2'])
            api.testImages('pic5-ref', mask = api.filterChannelListMask, msg = 'eski filtreleme saklanmamis olmalidir')
            api.sendKeys(['back+2'] + api.GOFIRSTCHANNELOFLIST)
            for i in range(6, 13) :
            INDENT
                api.testImages('pic' + str(i) + '-ref', mask = api.lightChannelListMask, msg = 'Kanal listesinde tum kanallar bulunmalidir.')
                api.sendKeys(['progup+1'])
            DEDENT
            api.sendKeys(['green+2'])
            api.testImages('pic13-ref', mask = api.advanceChannelListMask, msg = 'Advanced kanal listesi acilmalidir.')
            api.sendKeys(['exit2+7', 'info+0.5'])
            api.testImages('pic14-ref', mask = api.lightChannelListMask, msg = 'Light kanal listesine geri donus olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="532" endline="572">
def Advance_Chlist_Watch(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Watch')
    api.setTestCaseDescription('Advance Channel List - Watch')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Ana menuden advanced kanal listesini acilmalidir.')
            api.sendKeys(['progup+1*8'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Sayfa ilerlemelidir/degismelidir.')
            api.sendKeys(['progdown+1*4'])
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, msg = 'Sayfa geriye gitmelidir/degismelidir.')
            api.sendKeys(['up+1*5'])
            api.testImages('pic3-ref', mask = api.advanceChannelListMask, msg = 'Navigasyon sirasinda bir problem olmamalidir.')
            api.testImages('blackScreen-ref', mask = api.blackScreenMask, expectMatch = False, msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')

            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST + ['down+1*8'])
            api.testImages('pic4-ref', mask = api.advanceChannelListMask, msg = 'Navigasyon sirasinda bir problem olmamalidir.')
            api.testImages('blackScreen-ref', mask = api.blackScreenMask, expectMatch = False, msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')
            api.checkAudio(msg = 'Seste bir problem olmamalidir.')
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST + ['down+1', 'ok+1*4', 'clearosd+10', 'info+0.5'])
            api.testImages('picf-ref', mask = api.infoBarMask, msg = 'Navigasyon sirasinda bir problem olmamalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Mevcut kanalin goruntusunde bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin sesinde bir problem olmamalidir.')
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys(['clearosd+5'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="573" endline="608">
def Advance_Chlist_Delete(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Delete')
    api.setTestCaseDescription('Advance Channel List - Channel Delete/Move')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo = api.getChannelNumber(api.deleteChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + ['up+1*5', 'down+1*5'])
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADD_CHEDIT_DEL + ['ok+4'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Kanal silinmelidir, silinen kanalin yerine asagida bulunan diger kanallar sayisal olarak da sirayla birer yukari tasinmalidir.')

            chNoMove = api.getChannelNumber(api.moveChannelName, 1)
            api.sendKeys([str(chNoMove) + '+2'] + api.ADD_CHEDIT_MOVE + ['1256+2', 'ok+2*2+5'])
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, msg = 'Kanal belirtilen siraya tasinmalidir.')

            api.sendKeys(api.ADD_CHEDIT_DEL + ['right+0.5'])
            api.testImages('pic3-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesindeki bir kanalda iken Options-Delete seciniz. Silinme sorgusunu hayir olarak seciniz.')
            api.sendKeys(['ok+1'])
            api.testImages('pic4-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesine geri donmelidir. Kanal silinmemelidir.')
            api.sendKeys(['exit2*2+10', 'info+0.5'])
            api.testImages('pic5-ref', mask = api.infoBarMask, msg = 'Navigasyon sirasinda bir problem olmamalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Mevcut kanalin goruntusunde bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin sesinde bir problem olmamalidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="609" endline="644">
def Advance_Chlist_EditChannelName(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_EditChannelName')
    api.setTestCaseDescription('Advance Channel List - Edit Channel Name')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo = api.getChannelNumber(api.moveChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')
            api.sendKeys(api.ADD_CHEDIT_EDIT + ['1*3', 'right', '1*6', 'right', '1*9', 'right', '1*8', 'down'] + [(['right', '0*2'], '*3')] + ['ok+5'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Kanalin ismi, +!) olarak degismis olmalidir.')
            api.sendKeys(api.ADD_CHEDIT_EDIT)
            for i in range(1, 33) :
            INDENT
                api.sendKeys([str(i % 10), 'right'])
            DEDENT
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, limit = 100, msg = '32 karekter girilebilmeli, kanal listesinde yapilan degisiklik gorulmelidir.')
            api.sendKeys(['ok+5'])
            api.testImages('pic3-ref', mask = api.advanceChannelListMask, limit = 100, msg = '32 karekter girilebilmeli, kanal listesinde yapilan degisiklik gorulmelidir.')
            api.sendKeys(api.ADD_CHEDIT_EDIT)
            for i in range(1, 34) :
            INDENT
                api.sendKeys([str(i % 10), 'right'])
            DEDENT
            api.testImages('pic4-ref', mask = api.advanceChannelListMask, limit = 100, msg = '32 karekter girilebilmeli, kanal listesinde yapilan degisiklik gorulmelidir.')
            api.sendKeys(['ok+5'])
            api.testImages('pic5-ref', mask = api.advanceChannelListMask, limit = 100, msg = 'Girilen 33. karekteri 32. karekterin uzerine yazmali yine en fazla 32 karekter olmalidir.')
            api.sendKeys(api.ADD_CHEDIT_EDIT + ['back+2'])
            api.testImages('pic6-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesine geri donmelidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="645" endline="695">
def Advance_Chlist_Lock(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Lock')
    api.setTestCaseDescription('Advance Channel List - Lock Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADD_CHEDIT_LOCKUNLOCK + [api.lockPassword + '+3'])
            api.sendKeys(['down+1'] + api.ADD_CHEDIT_LOCKUNLOCK)
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = api.lockPassword + ' sifresi girildikten sonra kanal listesinde kilitlenen kanalin satirinda Lock ikonu cikmalidir.')

            api.sendKeys(['ok+1*2'])
            api.testImages('pic2-ref', mask = api.blackScreenMask, msg = 'Kanalda ses ve goruntu olmamalidir, Enter PIN sorgusu ekrana gelmelidir')
            api.checkAudio(msg = 'Enter pin ekraninda kanalin sesi olmamalidir.', expectMatch = False)
            api.sendKeys([api.lockPassword + '+5', 'ok*2+7'])

            api.sendKeys(['progup+1*3', 'progdown+1*3+10'])
            api.testImages('pic3-ref', mask = api.enterPINWithoutInfoBar, msg = 'Kanalda ses ve goruntu olmamalidir, Enter PIN sorgusu ekrana gelmelidir')
            api.checkAudio(msg = 'Enter pin ekraninda kanalin sesi olmamalidir.', expectMatch = False)
            api.sendKeys([api.lockPassword + '+3'])
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')
            api.sendKeys(api.ADVANCECHLIST_MENU + [str(chNo) + '+3'] + api.ADD_CHEDIT_LOCKUNLOCK + [api.lockPassword + '+3'])
            api.testImages('pic4-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde o kanal uzerindeki kilit ikonu kalkmalidir.')

            api.sendKeys(['ok+1*4+10', 'info+0.5'])
            api.testImages('pic5-ref', mask = api.infoBarMask, msg = 'Kanalda goruntu ve ses alinmalidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (10, 0, 10), msg = 'Goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Mevcut kanalin goruntu ve sesinde bir problem olmamalidir.')

            api.sendKeys(api.ADVANCECHLIST_MENU + api.ADD_CHEDIT_LOCKUNLOCK)
            api.testImages('pic6-ref', mask = api.advanceChannelListMask, msg = 'Kanali kilitlemek icin pin sorgu ekrani gelmelidir.')
            api.sendKeys(['back+3'])
            api.testImages('pic7-ref', mask = api.advanceChannelListMask, msg = 'Kanal kilitlenmemelidir, Enter PIN sorgusu ekrandan kalkmalidir.')
            api.sendKeys(['clearosd+4'])
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="696" endline="722">
def Advance_Chlist_Move(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Move')
    api.setTestCaseDescription('Advance Channel List - Move Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADD_CHEDIT_MOVE + ['8+3', 'ok+3'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Kanal istenilen siraya tasinmalidir')

            api.sendKeys(['2+5'] + api.ADD_CHEDIT_MOVE + ['3880+3', 'ok+2'])
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, msg = 'Kendi broadcast blogunda yer almayan bir numaraya tasinmak istedigine dair uyari vermelidir.')

            api.sendKeys(api.ADD_CHEDIT_MOVE + ['back+4'])
            api.testImages('pic3-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesine geri donmelidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="723" endline="736">
def Advance_Chlist_TagUntagAll(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_TagUntagAll')
    api.setTestCaseDescription('Advance Channel List - Tag / Untag All Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="737" endline="822">
def Advance_Chlist_TagUntag(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_TagUntag')
    api.setTestCaseDescription('Advance Channel List - Tag/Untag Channel')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.doFTI(api, countryName = 'UK')
            api.sendKeys(api.IMPORT_CHANNEL_LIST_FTI)
            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 1)
            chNo2 = api.getChannelNumber(api.DVBT_CHN2, 2, getList = False)
            api.sendKeys([str(chNo1) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')
            api.sendKeys([str(chNo1) + '+3', 'yellow+1'])
            api.sendKeys([str(chNo2) + '+3', 'yellow+1', str(chNo1) + '+2'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Tag/Untag tusu ile ayni broadcast blogu icerisinde 2 kanal isaretlenmelidir.')
            api.sendKeys(api.ADD_CHEDIT_MOVE_MULTI + ['8+2', 'ok+5'])
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, msg = 'Kanallarin ikiside tasinmalidir.')
            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 8)
            chNo2 = api.getChannelNumber(api.DVBT_CHN2, 9, getList = False)
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys([str(chNo1) + '+3', 'yellow+1'])
            api.sendKeys([str(chNo2) + '+3', 'yellow+1', str(chNo1) + '+2'])
            api.testImages('pic3-ref', mask = api.advanceChannelListMask, msg = 'Tag/Untag tusu ile ayni broadcast blogu icerisinde 2 kanal isaretlenmelidir.')
            api.sendKeys(api.ADD_CHEDIT_MOVE_MULTI + ['1033+3', 'ok+5'])
            api.testImages('pic4-ref', mask = api.advanceChannelListMask, msg = 'Kanallar tasinmamalidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 1)
            chNo2 = api.getChannelNumber(api.DVBT_CHN2, 2, getList = False)
            chNo3 = api.getChannelNumber(api.DVBC_CHN1, 1101, getList = False)
            chNo4 = api.getChannelNumber(api.DVBC_CHN2, 1102, getList = False)
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys([str(chNo1) + '+3', 'yellow+1'])
            api.sendKeys([str(chNo2) + '+3', 'yellow+1', str(chNo1) + '+2'])
            api.testImages('pic5-ref', mask = api.advanceChannelListMask, msg = 'Tag/Untag tusu ile ayni broadcast blogu icerisinde 2 kanal isaretlenmelidir.')
            api.sendKeys([str(chNo3) + '+3', 'yellow+1'])
            api.sendKeys([str(chNo4) + '+3', 'yellow+1', str(chNo3) + '+2'])
            api.testImages('pic6-ref', mask = api.advanceChannelListMask, msg = 'Tag/Untag tusu ile ayni broadcast blogu icerisinde 2 kanal isaretlenmelidir.')
            api.sendKeys(api.ADD_CHEDIT_MOVE_MULTI + ['903+1', 'ok+3'])
            api.testImages('pic7-ref', mask = api.advanceChannelListMask, msg = 'Kanallar tasinmamalidir.')

            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 1)
            chNo2 = api.getChannelNumber(api.DVBT_CHN2, 2, getList = False)
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys([str(chNo1) + '+2', 'yellow+1'])
            api.sendKeys([str(chNo2) + '+2', 'yellow+1', str(chNo1) + '+2'])
            api.testImages('pic5-ref', mask = api.advanceChannelListMask, msg = 'Tag/Untag tusu ile ayni broadcast blogu icerisinde 2 kanal isaretlenmelidir.')
            api.sendKeys(api.ADV_CHLIST_LOCKUNLOCKALLCHANNEL + [str(api.lockPassword) + '+3'])
            api.testImages('pic8-ref', mask = api.advanceChannelListMask, msg = 'Options-Lock/Unlock ile isaretlenen kanallari kilitleyiniz.')

            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 1, getList = False)
            chNo2 = api.getChannelNumber(api.DVBT_CHN2, 2, getList = False)
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys([str(chNo1) + '+2', 'yellow+1'])
            api.sendKeys([str(chNo2) + '+2', 'yellow+1', str(chNo1) + '+2'])
            api.sendKeys(api.ADV_CHLIST_LOCKUNLOCKALLCHANNEL + [str(api.lockPassword) + '+2'])
            api.testImages('pic9-ref', mask = api.advanceChannelListMask, msg = 'Isaretli olan kanallarda kilit ikonu artik gorulmemelidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo1 = api.getChannelNumber(api.DVBT_CHN1, 1)
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys([str(chNo1) + '+2'] + [(['yellow+1', 'down+1'], '*5')] + ['up+1'] + api.ADD_FAV1_SELECTEDCHANNELS)
            api.testImages('pic10-ref', mask = api.advanceChannelListMask, msg = 'Ilk 5 kanal Fav1 listesine kaydedilmelidir.')
            api.sendKeys(api.QUICKMENU_SELECT_FAVLIST + ['right+2'])
            api.testImages('pic11-ref', mask = api.quickMenuMask, msg = 'Quick menuden Fav List 1 secilmelidir.')
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('pic12-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde favorite set edilen kanallar gorulmelidir, kanallarin numaralarinda kayma olmamalidir.')
            api.sendKeys(api.QUICKMENU_SELECT_FAVLIST + ['left+2'])
            api.testImages('pic13-ref', mask = api.quickMenuMask, msg = 'Favorite List None set edilmelidir.')
            api.sendKeys(['back+1'])

            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.sendKeys(['1+3', 'yellow', 'down', 'yellow', 'ok+1', 'down', 'ok+2*2+5'])
            api.testImages('pic14-ref', mask = api.advanceChannelListMask, msg = ' silinen kanallarin yerine asagidaki kanallar yukari tasinmalidir.')
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="823" endline="845">
def Advance_Chlist_Jump(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Jump')
    api.setTestCaseDescription('Advance Channel List - Jump')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.sendKeys(api.IMPORT_CHANNEL_LIST)
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(['7+5'])
            api.testImages('pic1-ref', mask = api.advanceChannelListMask, msg = 'Digit ile girilen kanalin bulundugu siraya gitmelidir.')

            api.sendKeys(['6000+5'])
            api.testImages('pic2-ref', mask = api.advanceChannelListMask, msg = 'girilen digit numarasina en yakin numarali kanalin bulundugu satira gitmelidir.')
            api.sendKeys(['clearosd+4'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="846" endline="875">
def Advance_Chlist_MultiFav(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav')
    api.setTestCaseDescription('Advance Channel List - MultiFav')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="876" endline="896">
def Advance_Chlist_MultiFav_Filter_Network(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_Network')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter Network')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="897" endline="912">
def Advance_Chlist_MultiFav_Filter_TV_Radio(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_TV_Radio')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter TV/Radio')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="913" endline="928">
def Advance_Chlist_MultiFav_Filter_Free_CAS(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_Free_CAS')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter Free/CAS')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="929" endline="944">
def Advance_Chlist_MultiFav_Filter_Sort(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_Sort')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter Sort')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="945" endline="960">
def Advance_Chlist_MultiFav_Filter_HD_SD(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_HD_SD')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter HD/SD')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="961" endline="974">
def Advance_Chlist_MultiFav_Filter_A_Z(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_A_Z')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter A/Z')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="975" endline="994">
def Advance_Chlist_MultiFav_Filter_Satellite(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_Satellite')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter Satellite')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="995" endline="1018">
def Advance_Chlist_MultiFav_Filter_Combination(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_MultiFav_Filter_Combination')
    api.setTestCaseDescription('Advance Channel List - MultiFav Filter Combination 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            api.updateTestResult('MANUAL')

        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1019" endline="1055">
def Advance_Chlist_Filter_Network(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Network')
    api.setTestCaseDescription('Advance Channel List - Filter - Network')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + ['back+5'])
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Satellite kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_DIGITAL_AERIAL_ONLY + ['back+5'])
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Digital Aerial kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_DIGITAL_CABLE_ONLY + ['back+5'])
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Digital Cable kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_ANALOGUE_TV_ONLY + ['back+5'])
            api.testImages('pic04-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Analog kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_ALL + ['back+5'])
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1056" endline="1082">
def Advance_Chlist_Filter_TV_Radio(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_TV_Radio')
    api.setTestCaseDescription('Advance Channel List - Filter - TV/Radio')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_RADIOONLY + ['back+5'])
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece radio kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_TVONLY + ['back+5'])
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece tv kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_TVRADIOALL + ['back+5'])
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1083" endline="1109">
def Advance_Chlist_Filter_Free_CAS(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Free_CAS')
    api.setTestCaseDescription('Advance Channel List - Filter - Free/CAS')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_ENCRYPTED + ['back+5'])
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Encrypted kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_FREE + ['back+5'])
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece Free kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_FREECAS_ALL + ['back+5'])
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1110" endline="1136">
def Advance_Chlist_Filter_Sort(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Sort')
    api.setTestCaseDescription('Advance Channel List - Filter - Sort')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_SORT_NUM + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Tum kanallar numerik sirali olmalidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_SORT_ALPH + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Tum kanallar alphabetic sirali olmalidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_SORT_NUM + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Tum kanallar numerik sirali olmalidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1137" endline="1163">
def Advance_Chlist_Filter_HD_SD(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_HD_SD')
    api.setTestCaseDescription('Advance Channel List - Filter - HD/SD')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_HDSD_SD + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece SD kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_HDSD_HD + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece HD kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_HDSD_ALL + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde sadece tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1164" endline="1200">
def Advance_Chlist_Filter_Favourite(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Favourite')
    api.setTestCaseDescription('Advance Channel List - Filter - Favorite')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.FILTER_FAVOURITE_4 + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Favourite List 4 bos ise kanal listesinde kanal olmamalidir.')

            api.sendKeys(api.FILTER_FAVOURITE_2 + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Favourite List 2 bos ise kanal listesinde kanal olmamalidir.')

            api.sendKeys(api.FILTER_FAVOURITE_3 + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Favourite List 3 bos ise kanal listesinde kanal olmamalidir.')

            api.sendKeys(api.FILTER_FAVOURITE_1 + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic04-ref', mask = api.advanceChannelListMask, msg = 'Favourite List 1 bos ise kanal listesinde kanal olmamalidir.')
            api.sendKeys(api.FILTER_FAVOURITE_NONE + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1201" endline="1239">
def Advance_Chlist_Filter_SatelliteList(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_SatelliteList')
    api.setTestCaseDescription('Advance Channel List - Filter - Satellite List')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_ASTRA + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Astra kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_TURKSAT + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Turksat kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_HOTBIRD + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Hotbird kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_EUTELSAT + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Eutelsat kanallar gorunmelidir.')
            api.sendKeys(api.CLEAR_FILTER + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1240" endline="1261">
def Advance_Chlist_Filter_A_Z(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_A_Z')
    api.setTestCaseDescription('Advance Channel List - Filter - A/Z')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_A_Z_A + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde A harfi ile baslayan kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_A_Z_ALL + ['back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde tum kanallar gorunmelidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1262" endline="1310">
def Advance_Chlist_Filter_Combination1(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Combination1')
    api.setTestCaseDescription('Advance Channel List - Filter - Combination 1')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST + api.CLEAR_FILTER)
            api.sendKeys([str(chNo) + '+10'])
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic01-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde satellite kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_TVONLY + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde satellite TV kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_FREE + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Free satellite TV kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_HDSD_SD + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic04-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde Free satellite SD TV kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_A_Z_T + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic05-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde T ile baslayan Free satellite SD TV kanallar gorunmelidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_SORT_ALPH + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic06-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde T ile baslayan Free satellite SD TV kanallar gorunmelidir alphabetic siralanmalidir.')
            api.sendKeys(api.ADV_CHLIST_FILTER_SATELLITE_ONLY + api.ADD_SATLIST_TURKSAT + ['+5', 'back+5'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic07-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde T ile baslayan Free Turksat satellite SD TV kanallar gorunmelidir alphabetic siralanmalidir.')
            api.sendKeys(['ok+2*4+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + ['blue+2'])
            api.testImages('pic08-ref', mask = api.advanceChannelListMask, msg = 'Yapilan filtreleme ayarlari saklanmalidir')
            api.sendKeys(['back'] + api.CLEAR_FILTER + ['clearosd+5'])
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__5_tcg.py" startline="1311" endline="1350">
def Advance_Chlist_Filter_Combination2(api) :
INDENT
    api.setTestCaseName('Advance_Chlist_Filter_Combination2')
    api.setTestCaseDescription('Advance Channel List - Filter - Combination 2')
    if not api.start() :
    INDENT
        try :
        INDENT
            chNo = api.getChannelNumber(api.firstChannelName, 1)
            api.sendKeys([str(chNo) + '+10'])
            api.sendKeys(api.ADVANCECHLIST_MENU + api.CLEAR_FILTER)
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('picAdvChList-ref', mask = api.advanceChannelListMask, msg = 'Advance channel list acilmali')

            api.sendKeys(api.ADV_CHLIST_FILTER_DIGITAL_CABLE_ONLY + ['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic02-ref', mask = api.advanceChannelListMask, msg = 'Kanal listesinde digital cable kanallar gorunmelidir.')

            api.sendKeys(api.ADV_CHLIST_FILTER_RADIOONLY + ['back+2'] + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic03-ref', mask = api.advanceChannelListMask, msg = 'Eger yayinda varsa, kanal listesinde sadece digital aerial Radio kanallari bulunmalidir, eger yayinda yoksa, kanal listesinde kanalin bulunamadigina dair uyari olmalidir.')

            api.doPowerCycle(api)
            api.sendKeys(api.ADVANCECHLIST_MENU + api.GOFIRSTCHANNELOFLIST)
            api.testImages('pic04-ref', mask = api.advanceChannelListMask, msg = 'Daha once filtreleme secenekleri kullanilarak filtrelenen kanallar gorulmelidir')
            api.sendKeys(['blue+1'])
            api.testImages('pic05-ref', mask = api.filterChannelListMask, msg = 'Yapilan filtreleme ayarlari saklanmalidir.')

            api.sendKeys(['red+1'])
            api.testImages('pic06-ref', mask = api.filterChannelListMask, msg = 'Tum filtreleme secenekleri default degerlerine geri donmelidir.')
            api.sendKeys(['exit2+2*2', str(chNo) + '+10', 'info+0.5'])
            api.testImages('pic07-ref', mask = api.infoBarMask, msg = 'Tum filtreleme secenekleri default degerlerine geri donmelidir.')
            api.videoAnalysis(duration = (30, 0, 30), tolerance = (5, 0, 5), msg = 'Izlemek icin kanal listesinden secilen kanalda goruntude bir problem olmamalidir.')
            api.checkAudio(msg = 'Izlemek icin kanal listesinden secilen kanalda seste bir problem olmamalidir.')
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        api.end(False)
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="106" endline="138">
def test(api) :
INDENT
    global reportID
    try :
    INDENT
        api.activateDevices(** devConf)
        try :
        INDENT
            api.manual = Manual(1)
            print '\nMANUAL_CREATED\n'
        DEDENT
        except :
        INDENT
            api.printError()
        DEDENT
        if auto_getReportID or auto_readTVInfo :
        INDENT
            readTVInfo(api)
        DEDENT
        setDeviceParameters(api)
        if test_Devices :
        INDENT
            checkTestDevices(api)
        DEDENT
        if auto_getReportID :
        INDENT
            msg = 'ReportID almak icin gonderilen bilgiler:\n-------------------------------------------\n'
            for i in WebMonitor_NewTest_dict :
            INDENT
                msg += str(i) + ': ' + str(WebMonitor_NewTest_dict [i]) + '\n'
            DEDENT
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
            api.manual.getResult()
            reportID = getReportID(WebMonitor_NewTest_dict)
            api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; REPORTID: ' + str(reportID)])
            api.manual.getResult()
        DEDENT
        if not reportID :
        INDENT
            api.writeToLog('###### getReportID ERROR ######\n Web arayuzunden reportID alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            reportID = 0
        DEDENT
        makeTVSettingsGlobal(api)
        readyForTest(api)
        api.getTV_IP = _getTV_IP
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="139" endline="159">
def setDeviceParameters(api) :
INDENT
    try :
    INDENT
        api.setCaptureDevice(deviceSettings [0])
        if (deviceSettings [0] == 3) :
        INDENT
            tvIP = _getTV_IP(api) [0]
            api.setTvIP(tvIP)
        DEDENT
        api.setPictureAlgorithm(deviceSettings [1])
        if (deviceSettings [1] == 1) :
        INDENT
            api.setPSNRLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        elif (deviceSettings [1] == 4) :
        INDENT
            api.setSSIMLimits(matchLimit = 80, diffLimit = 80)
        DEDENT
        api.setResizeCapture(deviceSettings [2])
        api.setRotateCapture(deviceSettings [3])
        api.setAudioCaptureDevice(deviceSettings [4])
        api.setVideoAnalysisDevice(deviceSettings [5])
        api.generateTCSequence(0)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="160" endline="177">
def checkTestDevices(api) :
INDENT
    try :
    INDENT
        api.setReportId(0, testName = 'DEVICE_CONTROL')
        api.setTestCaseName('init')
        api.setTestCaseDescription('Test and Device Configuration')
        if not api.start(force = True) :
        INDENT
            try :
            INDENT
                print api.grabImage('test1')
                sleep(1)
                print api.grabImage('test2')
            DEDENT
            except :
            INDENT
                api.printError()
            DEDENT
            api.end(False)
            print 'END: init'
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="178" endline="187">
def makeTVSettingsGlobal(api) :
INDENT
    try :
    INDENT
        api.projectName = projectName.lower()
        api.UIName = UIName.lower()
        api.customerName = customerName
        api.countryName = countryName
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="188" endline="197">
def readyForTest(api) :
INDENT
    try :
    INDENT
        masterPath = os.path.join(vestaMasterPath, 'SingleChannelList', UIName.lower(), projectName.title())
        testName = testSuiteName + '_' + projectName.title() + '_' + SWVersion + '_svn' + SVNNumber
        api.setTestMasterPath(masterPath)
        api.setReportId(reportID, testName)
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="198" endline="342">
def readTVInfo(api) :
INDENT
    try :
    INDENT
        global SWVersion, SVNNumber, projectName, hardwareName, UIName, countryName, customerName, WebMonitor_NewTest_dict
        _SWVersion = _SVNNumber = _projectName = _UIName = _hardwareName = ramSize = PMVersion = mbootVersion = mfcVersion = languageName = ''
        langList = {
            'dan' : 'danish', 'ger' : 'german', 'est' : 'estonian', 'eng' : 'english', 'spa' : 'spanish', 'gre' : 'greek',
            'fre' : 'french', 'gla' : 'gaelic', 'hrv' : 'croatian', 'ita' : 'italian', 'lav' : 'latvian', 'lit' : 'lithuanian',
            'hun' : 'hungarian', 'dut' : 'dutch', 'nor' : 'norwegian', 'pol' : 'polish', 'por' : 'portuguese', 'rus' : 'russian',
            'rum' : 'romanian', 'alb' : 'albanian', 'slv' : 'slovanian', 'slo' : 'slovak', 'srp' : 'serbian', 'fin' : 'finnish',
            'swe' : 'swedish', 'tur' : 'turkish', 'cze' : 'czech', 'ukr' : 'ukranian', 'bul' : 'bulgarian', 'ara' : 'arabic',
            'per' : 'persian', 'heb' : 'hebrew', 'bel' : 'belarussian', 'mac' : 'macedonian', 'mon' : 'montenegrin',
            'kaz' : 'kazakh', 'tha' : 'Thai'}
        countryList = {
            'aus' : 'australia', 'dnk' : 'denmark', 'fin' : 'finland', 'fra' : 'france', 'deu' : 'germany', 'ita' : 'italy',
            'nld' : 'netherlands', 'nor' : 'norway', 'pol' : 'poland', 'prt' : 'portugal', 'esp' : 'spain', 'swe' : 'sweden',
            'gbr' : 'united_kingdom', 'alb' : 'albania', 'aut' : 'austria', 'bel' : 'belgium', 'bgr' : 'bulgaria', 'chn' : 'china',
            'cze' : 'czech_republic', 'est' : 'estonia', 'grc' : 'greece', 'hun' : 'hungary', 'isr' : 'israel', 'lva' : 'latvia',
            'ltu' : 'lithuania', 'mkd' : 'macedonia', 'rou' : 'romania', 'rus' : 'russia', 'srb' : 'serbia', 'svk' : 'slovakia',
            'svn' : 'slovenia', 'che' : 'switzerland', 'tur' : 'turkey', 'hrv' : 'croatia', 'ice' : 'iceland', 'lux' : 'luxembourg',
            'ita' : 'san_marino', 'nzl' : 'new_zealand', 'mne' : 'montenegro', 'ukr' : 'ukraine', 'imn' : 'isle_of_man',
            'sau' : 'saudi_arabia', 'irn' : 'persia', 'are' : 'united_arab_emirates', 'kwt' : 'kuwait', 'omn' : 'oman',
            'bhr' : 'bahrain', 'qat' : 'qatar', 'blr' : 'belarussia', 'irl' : 'ireland', 'irq' : 'iraq', 'jor' : 'jordan',
            'lbn' : 'lebanon', 'ind' : 'india', 'col' : 'colombia', 'cyp' : 'cyprus', 'tha' : 'thailand', 'gha' : 'ghana',
            'egy' : 'egypt', 'lbr' : 'liberia', 'tgo' : 'togo', 'sle' : 'sierra_leone', 'civ' : 'cote_d_ivoire', 'ken' : 'kenya',
            'tza' : 'tanzania', 'moz' : 'mozambique', 'cod' : 'congo', 'sen' : 'senegal', 'nga' : 'nigeria', 'eth' : 'ethiopia',
            'zmb' : 'zambia', 'uga' : 'uganda', 'arg' : 'argentina', 'ang' : 'angola'}
        result = api.logKeywordsSearch(
            ['TV INFO', '#*project:', '#*hardware:', '#*ram:', '#*sw version:',
                '#*svn no:', '#*mboot ver:', '#*mfc ver:', '#*ip address:',
                '#*ui name:', '#*lang:', '#*country:', '#*customer:', 'Stbc ver:'],
            command = ['UART_uartexit', 'UART_GETTVINFO+0.5'], counts = 1, sTypes = 1, timeout = 2, portIndex = 0)
        print '-----------> ', result, '<-------------'
        msg = 'GETTVINFO komutuyla alinan bilgiler:\n-------------------------------------------\n'
        for i in range(len(result [0])) :
        INDENT
            msg += str(result [0] [i]) + '\n'
        DEDENT
        api.manual.sendCommands(['type; 1', 'timeout; 60', 'message; ' + msg])
        api.manual.getResult()
        if result [0] [0] and result [0] [0] [0].find('TV INFO') > - 1 :
        INDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                _projectName = result [0] [1] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _hardwareName = result [0] [2] [0].split(': ') [1].strip().upper().replace('NC', '')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                ramSize = result [0] [3] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _SWVersion = result [0] [4] [0].split(': ') [1].strip().replace('V.', 'v')
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _SVNNumber = result [0] [5] [0].split(': ') [1].strip()
            DEDENT
            if result [0] [6] and result [0] [6] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [6] [0].rsplit(':', 1)
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1].strip()
                    DEDENT
                    aaa [0] = aaa [0].rsplit(': ', 1) [1].split('-')
                    mbootVersion = aaa [0] [1].split(' ') [0]
                    _hardwareName = aaa [0] [0].replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [7] and result [0] [7] [0] :
            INDENT
                mfcVersion = result [0] [7] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [8] and result [0] [8] [0] :
            INDENT
                tvIP = result [0] [8] [0].split(': ') [1].strip().upper()
                api.setTvIP(tvIP)
            DEDENT
            if result [0] [9] and result [0] [9] [0] :
            INDENT
                _UIName = result [0] [9] [0].split(': ') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [10] and result [0] [10] [0] :
            INDENT
                languageName = result [0] [10] [0].split(': ') [1].strip().title()
            DEDENT
            if result [0] [11] and result [0] [11] [0] :
            INDENT
                countryName = result [0] [11] [0].split(': ') [1].strip().upper()
            DEDENT
            if result [0] [12] and result [0] [12] [0] :
            INDENT
                customerName = result [0] [12] [0].split(': ') [1].strip().upper()
            DEDENT
        DEDENT
        else :
        INDENT
            result = api.logKeywordsSearch(
                ['MBoot Version:', 'DDR  Size:        ', '\#\*V\.|\#\*SW_VER: V\.', '#*Build info', '#*UI name:', '_hwprofile\.bin'],
                patterns = [' MB\d{1,5}\-\d{1,6} PM ver: \d{1,6}| MB\d{1,6}NC\-\d{1,5} PM ver: \d{1,6}| MB\d{1,5}\-\d{1,6}| MB\d{1,6}NC\-\d{1,5}',
                    '\d{1,5}MB|\d{1,5}\.\d{1,5}GB', 'V\.\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|V\.\d{1,3}\.\d{1,3}\.\d{1,3}[a-zA-Z]', '\[ \d{1,6}\]|\[\d{1,7}\]',
                    '', ' MB\d{1,5}_hwprofile\.bin| mb\d{1,5}_hwprofile\.bin| t\d{1,5}_hwprofile\.bin| T\d{1,5}_hwprofile\.bin'],
                command = ['poweroff+5', 'poweron+10', '00+35', 'UART_aa', 'UART_GETSWVERSION+1', 'UART_aa', 'UART_BUILDINFO+1', 'UART_aa', 'UART_GETUINAME+1', 'UART_aa', 'UART_ls ../conf+1', 'UART_aa', 'UART_ls /conf+1'], counts = 1, sTypes = 1, timeout = 1, portIndex = 0)
            if result [0] [0] and result [0] [0] [0] :
            INDENT
                try :
                INDENT
                    aaa = result [0] [0] [0].split(': ')
                    if len(aaa) > 1 :
                    INDENT
                        PMVersion = aaa [1]
                    DEDENT
                    mbootVersion = aaa [0].replace('PM ver', '').strip().split('-') [1]
                    _hardwareName = aaa [0].replace('PM ver', '').strip().split('-') [0].upper().replace('NC', '')
                DEDENT
                except :
                INDENT
                    pass
                DEDENT
            DEDENT
            if result [0] [1] and result [0] [1] [0] :
            INDENT
                ramSize = result [0] [1] [0]
            DEDENT
            if result [0] [2] and result [0] [2] [0] :
            INDENT
                _SWVersion = result [0] [2] [0].replace('V.', 'v')
            DEDENT
            if result [0] [3] and result [0] [3] [0] :
            INDENT
                _SVNNumber = result [0] [3] [0].replace('[', '').replace(']', '').strip()
            DEDENT
            if result [0] [4] and result [0] [4] [0] :
            INDENT
                _UIName = result [0] [4] [0].split('#*UI name:') [1].strip().lower().replace('_fhd', '').replace('_hd', '').title()
            DEDENT
            if result [0] [5] and result [0] [5] [0] :
            INDENT
                _hardwareName = result [0] [5] [0].split('_') [0].upper().strip().replace('NC', '')

            DEDENT
        DEDENT
        if not projectName :
        INDENT
            projectName = _projectName
        DEDENT
        if not SWVersion :
        INDENT
            SWVersion = _SWVersion
        DEDENT
        if not SVNNumber :
        INDENT
            SVNNumber = _SVNNumber
        DEDENT
        if not UIName :
        INDENT
            UIName = _UIName
        DEDENT
        if not projectN_vs_hardwareN_dict.get(projectName.lower(), False) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a project: %s\n' % (projectName.lower()), fileName = 'ERROR')
            return
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = _hardwareName
        DEDENT
        if not hardwareName :
        INDENT
            hardwareName = projectN_vs_hardwareN_dict.get(projectName.lower(), False).upper()
            if not hardwareName :
            INDENT
                api.writeToLog('Please Update Project Hardware Dict! Since there is no hardware for project: %s\n' % (projectName.lower()), fileName = 'ERROR')
                return
            DEDENT
        DEDENT
        if not (hardwareName in projectN_vs_hardwareN_dict.get(projectName.lower(), False)) :
        INDENT
            api.writeToLog('Please Update Project Hardware Dict! Since there is no such a hardware: %s\n' % (hardwareName), fileName = 'ERROR')
            return
        DEDENT
        if not SWVersion or not SVNNumber or not UIName :
        INDENT
            api.writeToLog('###### ERROR ######\n version, SVN, UI ve hardware bilgisi alinamadi. \n#############################\n', fileName = 'ERROR', timestamp = False)
            api.writeToLog('version: %s SVN: %s UI: %s\n' % (SWVersion, SVNNumber, UIName), fileName = 'ERROR', timestamp = False)
            return
        DEDENT
        languageName = langList.get(languageName.lower(), 'English').title()
        countryName = countryList.get(countryName.lower(), countryName).title()

        WebMonitor_NewTest_dict ['project'] = projectName
        WebMonitor_NewTest_dict ['hardware_name'] = hardwareName
        WebMonitor_NewTest_dict ['hardware'] = hardwareName + ' ' + ramSize
        WebMonitor_NewTest_dict ['version'] = SWVersion
        WebMonitor_NewTest_dict ['SVN'] = SVNNumber
        WebMonitor_NewTest_dict ['pm'] = PMVersion
        WebMonitor_NewTest_dict ['romboot'] = mbootVersion
        WebMonitor_NewTest_dict ['mfc'] = mfcVersion
        WebMonitor_NewTest_dict ['ui'] = UIName
        WebMonitor_NewTest_dict ['language'] = languageName

    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="343" endline="352">
def getReportID(data) :
INDENT
    import urllib, urllib2
    url = 'http://veargd13262/vesta2/add_test.php'
    data = urllib.urlencode(data)
    content = urllib2.urlopen(url = url, data = data).read()
    reportID = 0
    if str(content).isdigit() :
    INDENT
        reportID = int(content)
    DEDENT
    return reportID
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__1_init.py" startline="353" endline="368">
def _getTV_IP(api) :
INDENT
    try :
    INDENT
        api.TV_IP = ['']
        if api.captureDevice == 3 :
        INDENT
            for i in range(5) :
            INDENT
                result = api.logKeywordsSearch(['#*IPaddr:|#*IP|addr:'], 1, command = ['UART_aa', 'UART_get_IP_address'], sTypes = 1, patterns = ['(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'])
                api.TV_IP = eval(str(result).replace('[[]]', "''").replace("[['", "'").replace("']]", "'"))
                print 'TV IP: ' + ''.join(api.TV_IP).replace('10.108', ', 10.108') [2 :].replace('10.108', ', 10.108').replace('192.168', ', 192.168') [2 :]
                if '' in api.TV_IP :
                INDENT
                    sleep(3)
                DEDENT
                else :
                INDENT
                    break
                DEDENT
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
    return api.TV_IP
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__2_mask.py" startline="2" endline="66">
def test(api) :
INDENT
    try :
    INDENT
        api.blackScreenMask = ['blackScreen-mask', (1, 1, 1919, 1079), (650, 300, 1280, 750, 1)]
        if api.UIName == 'carbon' :
        INDENT
            if api.projectName == 'raphael' :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (25, 200, 650, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (400, 200, 1560, 915)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (30, 60, 1060, 935)]
            DEDENT
            elif api.projectName == 'yoda' :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (40, 130, 605, 860)]
                api.infoBarMask = ['infoBar-mask', (1, 840, 1919, 1079), (1, 920, 1919, 1020, 1), (1590, 855, 1760, 915, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (400, 200, 1560, 915)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (200, 60, 1790, 900)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (30, 60, 1060, 935)]
            DEDENT
            else :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (40, 130, 690, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (396, 118, 1567, 878)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (8, 30, 689, 1059)]
            DEDENT
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            if api.projectName == 'michelangelo' :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (25, 200, 650, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (400, 200, 1560, 915)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (30, 60, 1060, 935)]
            DEDENT
            else :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (40, 130, 690, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (396, 118, 1567, 878)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (8, 30, 689, 1059)]
            DEDENT
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            if api.projectName == 'raphael' :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (25, 200, 650, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (400, 200, 1560, 915)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (30, 60, 1060, 935)]
            DEDENT
            elif api.projectName == 'yoda' :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (40, 130, 605, 860)]
                api.infoBarMask = ['infoBar-mask', (1, 840, 1919, 1079), (1, 920, 1919, 1020, 1), (1590, 855, 1760, 915, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (400, 200, 1560, 915)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (200, 60, 1790, 900)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (30, 60, 1060, 935)]
            DEDENT
            else :
            INDENT
                api.lightChannelListMask = ['lightChannelList-mask', (40, 130, 690, 870)]
                api.infoBarMask = ['infoBar-mask', (1, 830, 1919, 1079), (1, 920, 1919, 1005, 1), (1775, 850, 1900, 1079, 1)]
                api.filterChannelListMask = ['filterChannelList-mask', (396, 118, 1567, 878)]
                api.advanceChannelListMask = ['advanceChannelList-mask', (106, 45, 1810, 1030)]
                api.enterPINWithoutInfoBar = ['enterPINWithoutInfoBar-mask', (680, 430, 1919, 890)]
                api.quickMenuMask = ['quickMenu-mask', (8, 30, 689, 1059)]
            DEDENT
        DEDENT
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__3_macro.py" startline="2" endline="92">
def test(api) :
INDENT
    try :
    INDENT
        api.firstChannelName = 'BBC ONE'
        api.deleteChannelName = 'TRT1 HD'
        api.moveChannelName = 'TRT SPOR'
        api.lockPassword = '0000'
        api.DVBT_CHN1 = api.firstChannelName
        api.DVBT_CHN2 = 'BBC TWO'
        api.DVBC_CHN1 = 'Das Erste HD'
        api.DVBC_CHN2 = 'ZDF HD'
        if api.UIName == 'carbon' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down+1', 'ok+2', 'gofirstitemgroup+1']
            api.ADD_CHEDIT_MOVE = ['ok+1', 'down+1', 'ok+1']
        DEDENT
        elif api.UIName == 'panasonic' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down*3', 'ok+2', 'gofirstitemgroup+1']
            api.ADD_CHEDIT_MOVE = ['ok+1', 'down+1', 'ok+1']
        DEDENT
        elif api.UIName == 'titanium' :
        INDENT
            api.INSTALL_MENU = ['exit+2*2', 'clearosd+5', '4725+5', 'menu+2', 'down+1', 'ok+2', 'gofirstitemgroup+1']
            api.ADD_CHEDIT_MOVE = ['ok+1', 'green+1', 'ok+1', 'down+1', 'ok+1']
        DEDENT
        api.IMPORT_CHANNEL_LIST = api.INSTALL_MENU + ['up*3', 'ok+50', 'clearosd+10']
        api.IMPORT_CHANNEL_LIST_FTI = api.INSTALL_MENU + ['up*2', 'ok+50', 'clearosd+10']
        api.GOFIRSTCHANNELOFLIST = ['1+3']
        api.ADVANCECHLIST_MENU = ['clearosd+3', 'menu+2', 'down+1*2', 'ok+1']
        api.CHANNEL_LIST_FILTER_ALL = ['exit+2*2', '1+5', 'ok+1', 'blue', 'gofirstitem+1']
        api.CHANNEL_LIST_FILTER_DIGITAL_AERIAL_ONLY = ['exit+2*2', '1+5', 'ok+1', 'blue', 'gofirstitem+1', 'right+1']
        api.CHANNEL_LIST_FILTER_DIGITAL_CABLE_ONLY = ['exit+2*2', '1+5', 'ok+1', 'blue', 'gofirstitem+1', 'right*2+1']
        api.CHANNEL_LIST_FILTER_SATELLITE_ONLY = ['exit+2*2', '1+5', 'ok+1', 'blue', 'gofirstitem+1', 'right*3+1']
        api.CHANNEL_LIST_FILTER_ANALOGUE_TV_ONLY = ['exit+2*2', '1+5', 'ok+1', 'blue', 'gofirstitem+1', 'right*4+1']
        api.ADVANCECHLIST = ['exit+2', 'ok+2', 'green+2']
        api.LIGHTCHLIST = ['exit+2', 'ok+2']
        api.FILTER_CHLIST_RADIOONLY = api.LIGHTCHLIST + ['blue+1', 'down+1', 'gofirstitem+1', 'right+1*2']
        api.FILTER_CHLIST_TVONLY = api.LIGHTCHLIST + ['blue+1', 'down+1', 'gofirstitem+1', 'right+1']
        api.FILTER_CHLIST_TVRADIOALL = api.LIGHTCHLIST + ['blue+1', 'down+1', 'gofirstitem+1']
        api.FILTER_CHLIST_FREE = api.LIGHTCHLIST + ['blue+1', 'down+1*2', 'gofirstitem+1', 'right+1']
        api.FILTER_CHLIST_ENCRYPTED = api.LIGHTCHLIST + ['blue+1', 'down+1*2', 'gofirstitem+1', 'right*2+1']
        api.FILTER_CHLIST_FREECAS_ALL = api.LIGHTCHLIST + ['blue+1', 'down+1*2', 'gofirstitem+1']
        api.FILTER_CHLIST_A_Z_A = api.LIGHTCHLIST + ['blue+1', 'down+1*3', 'gofirstitem+1', 'right+4']
        api.FILTER_CHLIST_A_Z_ALL = api.LIGHTCHLIST + ['blue+1', 'down+1*3', 'gofirstitem+1']
        api.FILTER_CHLIST_SORT_ALPH = api.LIGHTCHLIST + ['blue+1', 'down+1*4', 'gofirstitem+1', 'right+1']
        api.FILTER_CHLIST_SORT_NUM = api.LIGHTCHLIST + ['blue+1', 'down+1*4', 'gofirstitem+1']
        api.FILTER_CHLIST_HDSD_ALL = api.LIGHTCHLIST + ['blue+1', 'down+1*5', 'gofirstitem+1']
        api.FILTER_CHLIST_HDSD_HD = api.LIGHTCHLIST + ['blue+1', 'down+1*5', 'gofirstitem+1', 'right+1*2']
        api.FILTER_CHLIST_HDSD_SD = api.LIGHTCHLIST + ['blue+1', 'down+1*5', 'gofirstitem+1', 'right+1']
        api.FILTER_CHLIST_FAVOURITE_1 = api.LIGHTCHLIST + ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1']
        api.FILTER_CHLIST_FAVOURITE_2 = api.LIGHTCHLIST + ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*2']
        api.FILTER_CHLIST_FAVOURITE_3 = api.LIGHTCHLIST + ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*3']
        api.FILTER_CHLIST_FAVOURITE_4 = api.LIGHTCHLIST + ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*4']
        api.FILTER_CHLIST_FAVOURITE_NONE = api.LIGHTCHLIST + ['blue+1', 'down+1*6', 'gofirstitem+1']
        api.ADD_SATLIST_ASTRA = ['down*7', 'gofirstitem+1', 'left+1']
        api.ADD_SATLIST_TURKSAT = ['up+1', 'gofirstitem+1', 'right+2*2']
        api.ADD_SATLIST_HOTBIRD = ['down*7', 'gofirstitem+1', 'right+1*3']
        api.ADD_SATLIST_EUTELSAT = ['down*7', 'gofirstitem+1', 'right+1']
        api.ADD_SATLIST_ALL = ['down*7', 'gofirstitem+1']
        api.ADD_CHEDIT_DEL = ['ok+1', 'down*2', 'ok+1']
        api.ADD_CHEDIT_MOVE_MULTI = ['ok+1', 'ok+1']
        api.ADD_CHEDIT_EDIT = ['ok+1', 'down+1*3', 'ok+1']
        api.ADD_CHEDIT_LOCKUNLOCK = ['ok+1', 'down+1*4', 'ok+1']
        api.EDIT_FAVOURITE = ['quick_menu+1', 'down*5', 'ok']
        api.ADV_CHLIST_FILTER_SATELLITE_ONLY = ['blue+1', 'gofirstitem+1', 'right+1*3']
        api.ADV_CHLIST_FILTER_DIGITAL_AERIAL_ONLY = ['blue', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_DIGITAL_CABLE_ONLY = ['blue', 'gofirstitem+1', 'right+1*2']
        api.ADV_CHLIST_FILTER_ANALOGUE_TV_ONLY = ['blue', 'gofirstitem+1', 'right*4+1']
        api.ADV_CHLIST_FILTER_ALL = ['blue', 'gofirstitem+1']
        api.ADV_CHLIST_FILTER_RADIOONLY = ['blue+1', 'down+1', 'gofirstitem+1', 'right+1*2']
        api.ADV_CHLIST_FILTER_TVONLY = ['blue+1', 'down+1', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_TVRADIOALL = ['blue+1', 'down+1', 'gofirstitem+1']
        api.ADV_CHLIST_FILTER_FREE = ['blue+1', 'down+1*2', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_ENCRYPTED = ['blue+1', 'down+1*2', 'gofirstitem+1', 'right*2+1']
        api.ADV_CHLIST_FILTER_FREECAS_ALL = ['blue+1', 'down+1*2', 'gofirstitem+1']
        api.ADV_CHLIST_FILTER_A_Z_A = ['blue+1', 'down+1*3', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_A_Z_T = ['blue+1', 'down+1*3', 'gofirstitem+1', 'left+2*7']
        api.ADV_CHLIST_FILTER_A_Z_ALL = ['blue+1', 'down+1*3', 'gofirstitem+1']
        api.ADV_CHLIST_FILTER_SORT_ALPH = ['blue+1', 'down+1*4', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_SORT_NUM = ['blue+1', 'down+1*4', 'gofirstitem+1']
        api.ADV_CHLIST_FILTER_HDSD_HD = ['blue+1', 'down+1*5', 'gofirstitem+1', 'right+1*2']
        api.ADV_CHLIST_FILTER_HDSD_SD = ['blue+1', 'down+1*5', 'gofirstitem+1', 'right+1']
        api.ADV_CHLIST_FILTER_HDSD_ALL = ['blue+1', 'down+1*5', 'gofirstitem+1']
        api.ADV_CHLIST_LOCKUNLOCKALLCHANNEL = ['ok+2', 'up+2*2', 'ok+3']
        api.ADD_FAV1_SELECTEDCHANNELS = ['ok+1', 'up+1', 'ok+1', 'gofirstitem+1', 'right+1', 'ok+3']
        api.QUICKMENU_SELECT_FAVLIST = ['exit+1*2', 'quick_menu+1', 'gofirstitemgroup+1', 'down+1*4', 'gofirstitem+1']
        api.FILTER_FAVOURITE_1 = ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1']
        api.FILTER_FAVOURITE_2 = ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*2']
        api.FILTER_FAVOURITE_3 = ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*3']
        api.FILTER_FAVOURITE_4 = ['blue+1', 'down+1*6', 'gofirstitem+1', 'right+1*4']
        api.FILTER_FAVOURITE_NONE = ['blue+1', 'down+1*6', 'gofirstitem+1']
        api.CLEAR_FILTER = ['blue+1', 'red+6', 'back+1']
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__4_method.py" startline="2" endline="8">
def test(api) :
INDENT
    try :
    INDENT
        api.doFTI = _doFTI
        api.doPowerCycle = _doPowerCycle
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__4_method.py" startline="9" endline="14">
def _doFTI(api, countryName = 'GERMANY') :
INDENT
    try :
    INDENT
        api.sendKeys(['STARTFTI+5', 'left+1', 'ok+50', 'SETCOUNTRY ' + countryName.upper() + '+2', 'ok+1*7'])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
<source file="systems/Vestel-Code/Single Channel List/scl__4_method.py" startline="15" endline="21">
def _doPowerCycle(api) :
INDENT
    try :
    INDENT
        api.sendKeys(['poweroff+15', 'poweron+45', 'RNS_0+15'])
        api.setTvIP(api.getTV_IP(api) [0])
    DEDENT
    except :
    INDENT
        api.printError()
    DEDENT
DEDENT
</source>
